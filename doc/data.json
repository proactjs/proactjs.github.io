{
    "project": {
        "name": "proact.js",
        "description": "Reactive JavaScript Objects Properties.",
        "version": "1.2.2",
        "url": "",
        "logo": "../proact_logo_icon.png"
    },
    "files": {
        "src/js/core/actor.js": {
            "name": "src/js/core/actor.js",
            "modules": {},
            "classes": {
                "ProAct.Actor": 1
            },
            "fors": {
                "ProAct.Actor": 1
            },
            "namespaces": {}
        },
        "src/js/core/actor_util.js": {
            "name": "src/js/core/actor_util.js",
            "modules": {},
            "classes": {
                "ProAct.ActorUtil": 1
            },
            "fors": {},
            "namespaces": {
                "ProAct": 1
            }
        },
        "src/js/core/core.js": {
            "name": "src/js/core/core.js",
            "modules": {},
            "classes": {
                "ProAct.Core": 1
            },
            "fors": {
                "ProAct.Core": 1
            },
            "namespaces": {}
        },
        "src/js/core/event.js": {
            "name": "src/js/core/event.js",
            "modules": {},
            "classes": {
                "ProAct.Event": 1,
                "ProAct.Event.Types": 1
            },
            "fors": {
                "ProAct.Event": 1
            },
            "namespaces": {
                "ProAct.Event": 1
            }
        },
        "src/js/core/pro.js": {
            "name": "src/js/core/pro.js",
            "modules": {
                "proact-core": 1
            },
            "classes": {
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Utils": 1,
                "ProAct.Configuration": 1
            },
            "fors": {
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Configuration": 1
            },
            "namespaces": {
                "ProAct": 1
            }
        },
        "src/js/properties/array_property.js": {
            "name": "src/js/properties/array_property.js",
            "modules": {},
            "classes": {
                "ProAct.ArrayProperty": 1
            },
            "fors": {
                "ProAct.ArrayProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/auto_property.js": {
            "name": "src/js/properties/auto_property.js",
            "modules": {},
            "classes": {
                "ProAct.AutoProperty": 1
            },
            "fors": {
                "ProAct.AutoProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/object_core.js": {
            "name": "src/js/properties/object_core.js",
            "modules": {},
            "classes": {
                "ProAct.ObjectCore": 1
            },
            "fors": {
                "ProAct.ObjectCore": 1
            },
            "namespaces": {}
        },
        "src/js/properties/object_property.js": {
            "name": "src/js/properties/object_property.js",
            "modules": {},
            "classes": {
                "ProAct.ObjectProperty": 1
            },
            "fors": {
                "ProAct.ObjectProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/property.js": {
            "name": "src/js/properties/property.js",
            "modules": {
                "proact-properties": 1
            },
            "classes": {
                "ProAct.Property": 1,
                "ProAct.Property.Types": 1
            },
            "fors": {
                "ProAct.Property.Types": 1,
                "ProAct.Property": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {
                "ProAct.Property": 1
            }
        },
        "src/js/properties/property_provider.js": {
            "name": "src/js/properties/property_provider.js",
            "modules": {},
            "classes": {
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1
            },
            "fors": {
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1
            },
            "namespaces": {}
        },
        "src/js/properties/proxy_property.js": {
            "name": "src/js/properties/proxy_property.js",
            "modules": {},
            "classes": {
                "ProAct.ProxyProperty": 1
            },
            "fors": {
                "ProAct.ProxyProperty": 1
            },
            "namespaces": {}
        },
        "src/js/streams/buffered_stream.js": {
            "name": "src/js/streams/buffered_stream.js",
            "modules": {},
            "classes": {
                "ProAct.BufferedStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/streams/debouncing_stream.js": {
            "name": "src/js/streams/debouncing_stream.js",
            "modules": {},
            "classes": {
                "ProAct.DebouncingStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/streams/delayed_stream.js": {
            "name": "src/js/streams/delayed_stream.js",
            "modules": {},
            "classes": {
                "ProAct.DelayedStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/streams/size_buffered_stream.js": {
            "name": "src/js/streams/size_buffered_stream.js",
            "modules": {},
            "classes": {
                "ProAct.SizeBufferedStream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/streams/stream.js": {
            "name": "src/js/streams/stream.js",
            "modules": {
                "proact-streams": 1
            },
            "classes": {
                "ProAct.Stream": 1
            },
            "fors": {
                "ProAct.Stream": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {}
        },
        "src/js/streams/throttling_stream.js": {
            "name": "src/js/streams/throttling_stream.js",
            "modules": {},
            "classes": {
                "ProAct.ThrottlingStream": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "proact-core": {
            "name": "proact-core",
            "submodules": {},
            "classes": {
                "ProAct.Actor": 1,
                "ProAct.ActorUtil": 1,
                "ProAct.Core": 1,
                "ProAct.Event": 1,
                "ProAct.Event.Types": 1,
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Utils": 1,
                "ProAct.Configuration": 1
            },
            "fors": {
                "ProAct.Actor": 1,
                "ProAct.Core": 1,
                "ProAct.Event": 1,
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Configuration": 1
            },
            "namespaces": {
                "ProAct": 1,
                "ProAct.Event": 1
            },
            "tag": "main",
            "file": "src/js/core/pro.js",
            "line": 532,
            "description": "The `proact-core` module provides base utilties and common functionality for all the other\nmodules of the lib.",
            "itemtype": "main"
        },
        "proact-properties": {
            "name": "proact-properties",
            "submodules": {},
            "classes": {
                "ProAct.ArrayProperty": 1,
                "ProAct.AutoProperty": 1,
                "ProAct.ObjectCore": 1,
                "ProAct.ObjectProperty": 1,
                "ProAct.Property": 1,
                "ProAct.Property.Types": 1,
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1,
                "ProAct.ProxyProperty": 1,
                "ProAct.BufferedStream": 1,
                "ProAct.DebouncingStream": 1,
                "ProAct.DelayedStream": 1,
                "ProAct.SizeBufferedStream": 1
            },
            "fors": {
                "ProAct.ArrayProperty": 1,
                "ProAct.AutoProperty": 1,
                "ProAct.ObjectCore": 1,
                "ProAct.ObjectProperty": 1,
                "ProAct.Property.Types": 1,
                "ProAct.Property": 1,
                "ProAct.Actor": 1,
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1,
                "ProAct.ProxyProperty": 1
            },
            "namespaces": {
                "ProAct.Property": 1
            },
            "tag": "main",
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 1,
            "description": "The `proact-properties` module provides stateful reactive values attached to normal JavaScript\nobject's fields.",
            "itemtype": "main"
        },
        "proact-streams": {
            "name": "proact-streams",
            "submodules": {},
            "classes": {
                "ProAct.Stream": 1,
                "ProAct.ThrottlingStream": 1
            },
            "fors": {
                "ProAct.Stream": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "src/js/streams/throttling_stream.js",
            "line": 1,
            "description": "The `proact-streams` module provides stateless streams to the ProAct.js API.\nFRP reactive streams.",
            "itemtype": "main"
        }
    },
    "classes": {
        "ProAct.Actor": {
            "name": "ProAct.Actor",
            "shortname": "ProAct.Actor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/actor.js",
            "line": 5,
            "description": "<p>\n `ProAct.Actor` is the basic observer-observable functionallity in ProAct.js\n</p>\n<p>\n The actors in ProAct.js form the dependency graph.\n If some actor listens to changes from another - it depends on it.\n</p>\n<p>\n The actors can transform the values or events incoming to them.\n</p>\n<p>\n Every actor can have a parent actor, that will be notified for all the changes\n on the child-actor, it is something as special observer.\n</p>\n<p>\n ProAct.Actor is part of the core module of ProAct.js.\n   System.out.println();\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>transforms</i>.\n     </p>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "ProAct.ActorUtil": {
            "name": "ProAct.ActorUtil",
            "shortname": "ProAct.ActorUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "ProAct.Actor"
            ],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/actor_util.js",
            "line": 6,
            "description": "ActorUtil provides methods that can be used to make the Actor to 'act'.\nThe Actor is ProAct.js version of the base `Observable` object. Various types\nof listeners can be attached to it and used to observe its `actions`.\n\nOn the other hand the `Actor` should do something or `act`, because something\nhas to be observed after all.\n\nThe `ActorUtil` contains a set of methods that help implementing these `acts`.\n\nFor example the we can trigger events/values in the `Streams`. This is thier `act`.\nThis triggering can be implemented with ease using the methods defined in `ActorUtil`.\n\nAnother example is `Properties` - they can be set or updated by the reactive flow -> they should react.\n\nSo `ActorUtil` provides the `Actors` with helpful methods for `acting` and `reacting`.\n\nAll these methods use the {{#crossLink \"ProAct.Flow\"}}{{/crossLink}} to defer the changes the right way.\nAnd the using the `flow` these methods handle the dependencies between the `Actors`.\n\nUse the methods in the `ActorUtil` to implement your `Actor's` `actions` and `reactions`.",
            "access": "private",
            "tagname": "",
            "static": 1
        },
        "ProAct.Core": {
            "name": "ProAct.Core",
            "shortname": "ProAct.Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/core.js",
            "line": 5,
            "description": "<p>\n Constructs a ProAct.Core. The core is an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} which can be used to manage other {@link ProAct.Actor} objects or groups many ProAct.Actor objects.\n</p>\n<p>\n For example a shell can be a plain old JavaScript object; The core will be in charge of creating dynamic properties for every field of the shell.\n</p>\n<p>\n The idea of the core is to inject observer-observable capabilities in normal objects, or just group many observables.\n</p>\n<p>\n `ProAct.Core` is an abstract class, that has a {{#crossLink \"ProAct.States\"}}{{/crossLink}} state. Its initializing logic should be implemented in an extender.\n</p>\n<p>\n ProAct.Core is used as a parent for the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s it manages, so it can be passed as a listener object - defines a <i>call method</i>.\n</p>\n<p>\n ProAct.Core is part of the core module of ProAct.js.\n</p>\n\nTODO Maybe should be renamed to something else? For example ActorGroup or ActorTroupe, or maybe ActorManager :).",
            "extends": "ProAct.Actor",
            "params": [
                {
                    "name": "shell",
                    "description": "The shell arrounf this core. This ProAct.Core manages observer-observable behavior for this <i>shell</i> object.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data to be used to define the observer-observable behavior of the <i>shell</i>.",
                    "type": "Object"
                }
            ]
        },
        "ProAct.Event": {
            "name": "ProAct.Event",
            "shortname": "ProAct.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct.Event",
            "file": "src/js/core/event.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.Event`. The event contains information of the update.\n</p>\n<p>\n `ProAct.Event` is part of the core module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the event",
                    "type": "ProAct.Event.Types"
                },
                {
                    "name": "...",
                    "description": "args\n     Arguments of the event, for example for value event, these are the old value and the new value.",
                    "optional": true
                }
            ]
        },
        "ProAct.Event.Types": {
            "name": "ProAct.Event.Types",
            "shortname": "ProAct.Event.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct.Event",
            "file": "src/js/core/event.js",
            "line": 160,
            "description": "Defines the possible types of the ProAct.Events.",
            "static": 1
        },
        "ProAct": {
            "name": "ProAct",
            "shortname": "ProAct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/pro.js",
            "line": 9,
            "description": "ProAct.js turns plain JavaScript objects into holders of reactive properties.\nYou can define the dependencies between these objects and properties using the 'vanilla' js syntax.\nFor example if an object should have a property 'x', that depends on its two fields 'a' and 'b', the only thing that's needed\nis to define a function 'x', that refers to 'this.a' and 'this.b'.\n\nSo ProAct.js can turn every vanilla JavaScript value to a set of reactive properties, and this generates a dependency graph between them.\nThe data flow in this oriented graph is determined by its edges. So if we should receive data from the outside of this dependency system we'll need\na powerful but easy to use tool to turn every user or server generated action into a data event, common to the graph. Enter the ProAct.Stream - the functional\npart of ProAct.js\n\nProAct.js can be used to define bindings, to separate views from models (mv*), for performance optimizations... It is a tool.\nA powerful tool for creating other, high level tools, or applications.\nEverything should be defined in this namespace. It can be used as P or Pro.\n\nProAct is powerful Functional Reactive Programming (FRP) lib too. Its streams and events\n\nare integrated with the reactive properties mentioned above.\nEverything can be described using declarative expressions.\nAll ProAct classes and functions are defined in this namespace.\nYou can use `Pro` and `P` instead of `ProAct` too.",
            "static": 1
        },
        "ProAct.States": {
            "name": "ProAct.States",
            "shortname": "ProAct.States",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 76,
            "description": "Defines the possible states of the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} instances.",
            "static": 1
        },
        "ProAct.Utils": {
            "name": "ProAct.Utils",
            "shortname": "ProAct.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 157,
            "description": "Contains a set of utility functions to ease working with arrays and objects.\nCan be reffered by using `ProAct.U` too.\n\nThis class is part of the `proact-core` module of ProAct.js.",
            "static": 1
        },
        "ProAct.Configuration": {
            "name": "ProAct.Configuration",
            "shortname": "ProAct.Configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 532,
            "description": "Contains various configuration settings for the ProAct.js library.",
            "static": 1
        },
        "ProAct.ArrayProperty": {
            "name": "ProAct.ArrayProperty",
            "shortname": "ProAct.ArrayProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/array_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ArrayProperty`.\n A property is a simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} with state.\n</p>\n<p>\n The value of `ProAct.ArrayProperty` is an array, turned to reactive ProAct.js array -\n {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.\n</p>\n<p>\n On changing the array value to another array the listeners for indices/length are moved from the old value to the new value.\n</p>\n<p>\n If set to null or undefined, the property is re-defined, using\n {{#crossLink \"ProAct.Property/reProb:method\"}}{{/crossLink}}.\n</p>\n<p>\n `ProAct.ArrayProperty` is lazy - its object is made reactive on the first read of the property.\n Its state is set to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} on the first read too.\n</p>\n<p>\n `ProAct.ArrayProperty` is part of the proact-arrays module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.AutoProperty": {
            "name": "ProAct.AutoProperty",
            "shortname": "ProAct.AutoProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/auto_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.AutoProperty`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state.\n The auto-computed or functional property has a state of a function return value.\n</p>\n<p>\n Auto-computed properties are functions which are turned\n to {{#crossLink \"ProAct.Property\"}}{{/crossLink}}s by a {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}}.\n</p>\n<p>\n If these functions are reading another fields of ProAct.js objects,\n they authomatically become dependent on them.\n</p>\n<p>\n For example:\n <pre>\n   var obj = {\n     a: 1,\n     b: 2,\n     c: function () {\n       return this.a - this.b;\n     }\n   };\n </pre>\n If this object - <i>obj</i> is turned to a reactive ProAct.js object,\n it becomes a simple object with three fields:\n <pre>\n   {\n     a: 1,\n     b: 2,\n     c: -1\n   }\n </pre>\n But now <i>c</i> is dependent on <i>a</i> and <i>b</i>,\n so if <i>a</i> is set to <b>4</b>, <i>obj</i> becomes:\n <pre>\n   {\n     a: 1,\n     b: 2,\n     c: 2\n   }\n </pre>\n</p>\n<p>\n The logic is the following:\n <ul>\n   <li>The property is initialized to be lazy, so its state is {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}</li>\n   <li>\n     On its first read, the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is set to the listener of the property,\n     so all the properties read in the function body become observed by it.\n     The value of the property is computed using the original function of the field.\n   </li>\n   <li>On this first read the state of the property is updated to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.</li>\n   <li>On its following reads it is a simple value, computed from the first read. No re-computations on get.</li>\n   <li>If a property, this auto-computed property depends changes, the value of <i>this</i> ProAct.AutoProperty is recomputed.</li>\n   <li>Setting the property can be implemented easy, because on set, the original function of the property is called with the new value.</li>\n </ul>\n</p>\n<p>\n `ProAct.AutoProperty` can be dependant on another `ProAct.AutoProperty`.\n</p>\n<p>\n `ProAct.AutoProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.ObjectCore": {
            "name": "ProAct.ObjectCore",
            "shortname": "ProAct.ObjectCore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/object_core.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ObjectCore`.\n `ProAct.ObjectCore` is a {{#crossLink \"ProAct.Core\"}}{{/crossLink}} that manages all the\n {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for a reactive ProAct.js object.\n</p>\n<p>\n It is responsible for all the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances as well as\n initializing them and deciding which type of property corresponds to which field.\n</p>\n<p>\n `ProAct.ObjectCore` is part of the proact-properties module of ProAct.js.\n</p>\n\n```\n \n var object = {\n   a: 4,\n   b: 5,\n   c: function () {\n     return this.a + this.b;\n   }\n };\n var core = new ProAct.ObjectCore(object);\n\n console.log(object.c); // 9\n\n object.a = 1;\n console.log(object.c); // 6\n\n console.log(core.value('c')); // 6\n\n core.set('b', 2));\n console.log(object.b); // 2\n console.log(object.c); // 3\n```",
            "extends": "ProAct.Core",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The shell objec arround this core. This should be plain JavaScript object.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data to be used to define the observer-observable behavior of the <i>object</i>.\n     For example transformations for its properties.",
                    "type": "Object"
                }
            ]
        },
        "ProAct.ObjectProperty": {
            "name": "ProAct.ObjectProperty",
            "shortname": "ProAct.ObjectProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/object_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ObjectProperty`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state. The object property\n has a state of a JavaScript object value.\n</p>\n<p>\n The value of `ProAct.ObjectProperty` is object, turned to reactive ProAct.js object recursively.\n</p>\n<p>\n On changing the object value to another object the listeners for fields with the same name in the objects,\n are moved from the old value's fields to the new value's fields.\n</p>\n<p>\n If set to null or undefined, the property is re-defined, using {{#crossLink \"ProAct.Property/reProb:method\"}}{{/crossLink}}\n</p>\n<p>\n `ProAct.ObjectProperty` is lazy - its object is made reactive on the first read of the property.\n Its state is set to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} on the first read too.\n</p>\n<p>\n `ProAct.ObjectProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.Property": {
            "name": "ProAct.Property",
            "shortname": "ProAct.Property",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property.js",
            "line": 9,
            "description": "<p>\n Constructs a `ProAct.Property`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state.\n The basic property has a state of a simple value - number/string/boolean.\n</p>\n<p>\n Every property could represent a field in a plain JavaScript object.\n It makes it reactive, on reading the property value,\n if {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is set,\n it is added as a listener to the property changes.\n</p>\n<p>\n Every property has a type the default property has a type of a simple value.\n</p>\n<p>\n All the properties of an object are managed by its {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}},\n which is set to a hidden field of the object - '__pro__'.\n</p>\n<p>\n When created every property is in {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}, state,\n when it is functional, the state is changed to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n If the property is not in {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} state, it is not useable.\n</p>\n<p>\n {{#crossLink \"ProAct.Property/init:method\"}}{{/crossLink}} is called by this constructor for the property initialization.\n It should initialize the property and set its state to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n</p>\n<p>\n ProAct.Property is part of the proact-properties module of ProAct.js.\n</p>\n\n```\n var property = new Property({v: 5}, 'v');\n property.get(); // This is 5\n property.set(4);\n property.get(); // This is 4\n```",
            "extends": "ProAct.Actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "An optional getter to be used when the property is read.\n     If this parameter is empty, a new {{#crossLink \"ProAct.Property/defaultGetter:method\"}}{{/crossLink}} is build for <i>this</i>.",
                    "type": "Function"
                },
                {
                    "name": "setter",
                    "description": "An optional setter to be used when the property is written.\n     If this parameter is empty, a new {{#crossLink \"ProAct.Property/defaultSetter:method\"}}{{/crossLink}} is build for <i>this</i>.",
                    "type": "Function"
                }
            ]
        },
        "ProAct.Property.Types": {
            "name": "ProAct.Property.Types",
            "shortname": "ProAct.Property.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "ProAct.Property",
            "file": "src/js/properties/property.js",
            "line": 114,
            "description": "Defines the possible types of the `ProAct.Property`.",
            "static": 1
        },
        "ProAct.PropertyProvider": {
            "name": "ProAct.PropertyProvider",
            "shortname": "ProAct.PropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 5,
            "description": "<p>\n The `ProAct.PropertyProvider` is an abstract class.\n</p>\n<p>\n Many providers can be registered for many kinds of properties.\n</p>\n<p>\n When a ProAct.js object is initialized its fields are turned into properties.\n Depending on the type and the name of the field, as well as meta information the valid\n type of {{#crossLink \"ProAct.Property\"}}{{/crossLink}} is created and used.\n The `PropertyProviders` have 'filter' method and depending on it the valid kind is decided.\n</p>\n<p>\n ProAct.PropertyProvider is part of the proact-properties module of ProAct.js.\n</p>",
            "is_constructor": 1
        },
        "ProAct.SimplePropertyProvider": {
            "name": "ProAct.SimplePropertyProvider",
            "shortname": "ProAct.SimplePropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 241,
            "description": "<p>\n Constructor for `ProAct.SimplePropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for fields of simple types - strings, numbers, booleans.\n</p>\n<p>\n `ProAct.SimplePropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.AutoPropertyProvider": {
            "name": "ProAct.AutoPropertyProvider",
            "shortname": "ProAct.AutoPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 319,
            "description": "<p>\n Constructor for `ProAct.AutoPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instances for fields pointing to functions.\n</p>\n<p>\n `ProAct.AutoPropertyProvider` is part of the `proact-properties` module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ArrayPropertyProvider": {
            "name": "ProAct.ArrayPropertyProvider",
            "shortname": "ProAct.ArrayPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": ""
        },
        "ProAct.ObjectPropertyProvider": {
            "name": "ProAct.ObjectPropertyProvider",
            "shortname": "ProAct.ObjectPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 471,
            "description": "<p>\n Constructor for ProAct.ObjectPropertyProvider.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instances for fields pointing to objects, different from arrays or functions.\n</p>\n<p>\n `ProAct.ObjectPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ProxyPropertyProvider": {
            "name": "ProAct.ProxyPropertyProvider",
            "shortname": "ProAct.ProxyPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 547,
            "description": "<p>\n Constructor for `ProAct.ProxyPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instances for fields that should point to properties.\n</p>\n<p>\n `ProAct.ProxyPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ProxyProperty": {
            "name": "ProAct.ProxyProperty",
            "shortname": "ProAct.ProxyProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/proxy_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ProxyProperty`. This is a property, pointing to another {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n</p>\n<p>\n The value of `ProAct.ProxyProperty` is the value of its target, if the target is updated, the proxy is updated.\n</p>\n<p>\n By setting the value of the proxy, the value of the target is updated, the proxy doesn't have its own value, it uses\n the value of the target.\n</p>\n<p>\n `ProAct.ProxyProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, that will provide the value of the new `ProAct.ProxyProperty`.",
                    "type": "ProAct.Property"
                }
            ]
        },
        "ProAct.BufferedStream": {
            "name": "ProAct.BufferedStream",
            "shortname": "ProAct.BufferedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/streams/buffered_stream.js",
            "line": 1,
            "description": "<p>\n Constructs a ProAct.BufferedStream. This is a {@link ProAct.Stream} with a buffer.\n</p>\n<p>\n On new value/event the listeners are not updated, but the value/event is stored in the buffer.\n</p>\n<p>\n When the buffer is flushed every value/event is emitted to the listeners. In case with property listeners\n they are updated only once with the last event/value. Good for performance optimizations.\n</p>\n<p>\n For example if it is set to stream mouse move events, we don't care for each of the event but for a portion of them.\n</p>\n<p>\n ProAct.BufferedStream is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.Stream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array"
                }
            ]
        },
        "ProAct.DebouncingStream": {
            "name": "ProAct.DebouncingStream",
            "shortname": "ProAct.DebouncingStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/streams/debouncing_stream.js",
            "line": 1,
            "description": "<p>\n Constructs a ProAct.DelayedStream. A {@link ProAct.DelayedStream} that resets its flushing interval on every new value/event.\n Only the last event/value triggered in given interval will be emitted.\n</p>\n<p>\n ProAct.DebouncingStream is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.DelayedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        },
        "ProAct.DelayedStream": {
            "name": "ProAct.DelayedStream",
            "shortname": "ProAct.DelayedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/streams/delayed_stream.js",
            "line": 1,
            "description": "<p>\n Constructs a ProAct.DelayedStream. When a given time interval passes the buffer of the stream is flushed authomatically.\n</p>\n<p>\n ProAct.DelayedStream is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.BufferedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        },
        "ProAct.SizeBufferedStream": {
            "name": "ProAct.SizeBufferedStream",
            "shortname": "ProAct.SizeBufferedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 1,
            "description": "<p>\n Constructs a ProAct.SizeBufferedStream. When the buffer is full (has the same size as <i>this</i> size), it is flushed.\n</p>\n<p>\n ProAct.SizeBufferedStream is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.BufferedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "The size of the buffer.",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "SizeBufferedStream must contain size, if there is no size passed to it.",
                "type": "Error"
            }
        },
        "ProAct.Stream": {
            "name": "ProAct.Stream",
            "shortname": "ProAct.Stream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/stream.js",
            "line": 59,
            "description": "<p>\n Constructs a `ProAct.Stream`.\n The stream is a simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}, without state.\n</p>\n<p>\n The streams are ment to emit values, events, changes and can be plugged into other `Actors`.\n For example it is possible to connect multiple streams, to merge them and to separate them,\n to plug them into properties.\n</p>\n<p>\n The reactive environment consists of the properties and the objects containing them, but\n the outside world is not reactive. It is possible to use the `ProAct.Streams` as connections from the\n outside world to the reactive environment.\n</p>\n<p>\n   The transformations can be used to change the events or values emitetted.\n</p>\n<p>\n `ProAct.Stream` is part of the proact-streams module of ProAct.js.\n</p>",
            "extends": "ProAct.Actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array"
                }
            ]
        },
        "ProAct.ThrottlingStream": {
            "name": "ProAct.ThrottlingStream",
            "shortname": "ProAct.ThrottlingStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/throttling_stream.js",
            "line": 1,
            "description": "<p>\n Constructs a ProAct.ThrottlingStream. This is special kind of {@link ProAct.DelayedStream}.\n</p>\n<p>\n The main idea is the following : if <i>n</i> values/events are triggered to this stream before the time delay for\n flushing passes, only the last one, the <i>n</i>-th is emitted.\n</p>\n<p>\n ProAct.ThrottlingStream is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.DelayedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/js/core/actor.js",
            "line": 65,
            "description": "A constant defining bad values or bad events.\n\nPart of the filtering mechainsm; If a transformation returns\na `BadValue`, based on uncomming event -> the event is skipped.",
            "itemtype": "property",
            "name": "BadValue",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 79,
            "description": "A constant defining closing or ending events.\n\nIf a transformation returns this value, the actor will be closed.\n\nYou can manually close `Actor`s updating them with this constant as an event.",
            "itemtype": "property",
            "name": "Close",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 94,
            "description": "Transforms the passed <i>val</i> using the {{#crossLink \"ProAct.Actor/transforms:method\"}}{{/crossLink}} method of the passed <i>actor</i>.",
            "itemtype": "method",
            "name": "transforms",
            "static": 1,
            "params": [
                {
                    "name": "actor",
                    "description": "The `ProAct.Actor` which transformations should be used.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "val",
                    "description": "The value to transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The transformed value.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 123,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Actor",
            "final": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 133,
            "description": "Initializes this actor.\n<p>\n This method logic is run only if the current state of <i>this</i> is\n {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}.\n</p>\n<p>\n Then {{#crossLink \"ProAct.Actor/afterInit:method\"}}{{/crossLink}} is called to finish the initialization.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "init",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 157,
            "description": "Allocating of resources or initializing is done here.\n<p>\n Empty by default.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "doInit",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 170,
            "description": "Called automatically after initialization of this actor.\n<p>\n By default it changes the state of <i>this</i> to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n</p>\n<p>\n It can be overridden to define more complex initialization logic.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 188,
            "description": "Closes this actor => it state becomes {{#crossLink \"ProAct.States/closed:property\"}}{{/crossLink}}.\n\nThis sends a `close` event to all the subscribers to closing.\n\nAfter closing the actor it can't emit events anymore.\n\nExample:\n```\n var actor = new ProAct.Actor();\n actor.onClose(function () {\n   console.log('Done!');\n });\n\n actor.close(); // We will see 'Done!' on the console output.\n```",
            "instance": "",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "This instance - can be chained.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 217,
            "description": "Checks if <i>this</i> can be closed.\n<p>\n Defaults to return true.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "canClose",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 232,
            "description": "This method is called when a `close` event is pushed to this `Actor`.\n\nIt removes all the subscriptions to the `Actor` and sets its\nstate to {{#crossLink \"ProAct.States/closed:property\"}}{{/crossLink}}.\n\nDo not call this method; it is private!",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "doClose",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 254,
            "description": "Called immediately before destruction.\n\nThe idea is to be implemented by extenders to free additional resources on destroy.",
            "instance": "",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeDestroy",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 268,
            "description": "Destroys this `ProAct.Actor` instance.\n<p>\n The state of <i>this</i> is set to {{#crossLink \"ProAct.States/destroyed:property\"}}{{/crossLink}}.\n</p>\n\nCalls {{#crossLink \"ProAct.Actor/beforeDestroy:method\"}}{{/crossLink}}",
            "instance": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 303,
            "description": "Generates the initial listeners object.\nIt can be overridden for alternative listeners collections.\nIt is used for resetting all the listeners too.\n\nThe default types of listeners are:\n```\n {\n   change: [],\n   error: [],\n   close: []\n }\n```",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultListeners",
            "return": {
                "description": "A map containing the default listeners collections.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 331,
            "description": "A list of actions or action to be used when no action is passed for the methods working with actions.",
            "instance": "",
            "itemtype": "method",
            "name": "defaultActions",
            "access": "protected",
            "tagname": "",
            "default": "'change'",
            "return": {
                "description": "The actions to be used if no actions are provided to action related methods, like\n {{#crossLink \"ProAct.Actor/on:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.Actor/off:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}.",
                "type": "Array|String"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 348,
            "description": "Creates the <i>listener</i> of this actor.\n\nEvery actor should have one listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "makeListener",
            "access": "protected",
            "tagname": "",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 370,
            "description": "Creates the <i>error listener</i> of this actor.\n\nEvery actor should have one error listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer for errors.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "makeErrListener",
            "access": "protected",
            "tagname": "",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>error listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 392,
            "description": "Creates the <i>closing listener</i> of this actor.\n\nEvery actor should have one closing listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer for closing events.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeCloseListener",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>closing listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 414,
            "description": "Creates the <i>event</i> to be send to the listeners on update.\n\n<p>\n The <i>event</i> should be an instance of {{#crossLink \"ProAct.Event\"}}{{/crossLink}}.\n</p>\n\n<p>\n By default this method returns {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}} event.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "makeEvent",
            "default": "{ProAct.Event} with type {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}}.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 437,
            "description": "Attaches a new listener to this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\n```\n  actor.on(function (v) {\n   console.log(v);\n  });\n\n  actor.on('error', function (v) {\n   console.error(v);\n  });\n\n  actor.on({\n   call: function (v) {\n     console.log(v);\n   }\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to listen for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 498,
            "description": "Removes a <i>listener</i> from the passed <i>action</i>.\n\n<p>\n If this method is called without parameters, all the listeners for all the actions are removed.\n The listeners are reset using {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}}.\n</p>\n\nExamples are:\n\nRemoving a listener:\n```\n var listener = function (v) {\n   console.log(v);\n };\n actor.on(listener);\n actor.off(listener);\n```\n\nOr for removing all the listeners attached to an actor:\n```\n actor.off();\n```\n\nOr for removing all the listeners of a given type attached to an actor:\n```\n actor.off('error');\n```\n\nOr for removing a listener from different type of actions:\n```\n var listener = function (v) {\n   console.log(v);\n };\n actor.on(listener);\n actor.onErr(listener);\n\n actor.off(['error', 'change'], listener);\n```",
            "instance": "",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to stop listening for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 581,
            "description": "Attaches a new error listener to this ProAct.Actor.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\nThis is the same as calling `on('error', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "onErr",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 600,
            "description": "Removes an error <i>listener</i> from the passed <i>action</i>.\n\nThis is the same as calling `off('error', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "offErr",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 617,
            "description": "Attaches a new close notifcation listener to this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\nThis is the same as calling `on('close', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "onClose",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 636,
            "description": "Removes a close notification <i>listener</i> from the passed <i>action</i>.\n\nThis is the same as calling `off('close', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "offClose",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 653,
            "description": "Attaches the passed listener to listen to values, errors and the close notification from this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.",
            "instance": "",
            "itemtype": "method",
            "name": "onAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 670,
            "description": "Removes all notifications <i>listener</i> from the passed <i>action</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "offAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 687,
            "description": "Links source actors into this actor. This means that <i>this actor</i>\nis listening for changes from the <i>sources</i>.\n<p>\n A good example is one stream to have another as as source -> if data comes into the source\n stream, it is passed to the listening too. That way the source stream is plugged <b>into</b> the listening one.\n</p>\n<p>\n The listeners from {{#crossLink \"ProAct.Actor/makeListener:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.Actor/makeErrListener:method\"}}{{/crossLink}} and {{#crossLink \"ProAct.Actor/makeCloseListener:method\"}}{{/crossLink}} are used.\n</p>\n\nChaining actors is very powerful operation. It can be used to merge many source actors into one.\n\n```\n var sourceActor1 = <Actor implementation>;\n var sourceActor2 = <Actor implementation>;\n var actor = <Actor implementation>;\n\n actor.into(sourceActor1, sourceActor2);\n actor.on(function (v) {\n   console.log(v);\n });\n\n```\n\nNow if the any of the source actors is updated, the update will be printed on the console by the `actor`.",
            "instance": "",
            "itemtype": "method",
            "name": "into",
            "params": [
                {
                    "name": "...",
                    "description": "Zero or more source ProAct.Actors to set as sources.",
                    "optional": true
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 736,
            "description": "The reverse of {{#crossLink \"ProAct.Actor/into:method\"}}{{/crossLink}} - sets <i>this actor</i> as a source\nto the passed <i>destination</i> actor.\n\n```\n var sourceActor = <Actor implementation>;\n var actor = <Actor implementation>;\n\n sourceActor.out(actor);\n actor.on(function (v) {\n   console.log(v);\n });\n\n Now if the any of the source actors is updated, the update will be printed on the console by the `actor`.\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "out",
            "params": [
                {
                    "name": "destination",
                    "description": "The actor to set as source <i>this</i> to.",
                    "type": "ProAct.Actor"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 767,
            "description": "Adds a new <i>transformation</i> to the list of transformations\nof <i>this actor</i>.\n\n<p>\n A transformation is a function or an object that has a <i>call</i> method defined.\n This function or call method should have one argument and to return a transformed version of it.\n If the returned value is {@link ProAct.Actor.BadValue}, the next transformations are skipped and the updating\n value/event becomes - bad value.\n</p>\n\n<p>\n Every value/event that updates <i>this actor</i> will be transformed using the new transformation.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "transform",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transformation",
                    "description": "The transformation to add.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 796,
            "description": "Adds a new <i>transformation</i> to the list of transformations\nof <i>this actor</i>.\n\n<p>\n A transformation is a function or an object that has a <i>call</i> method defined.\n This function or call method should have one argument and to return a transformed version of it.\n If the returned value is {@link ProAct.Actor.BadValue}, the next transformations are skipped and the updating\n value/event becomes - bad value.\n</p>\n\n<p>\n Every value/event that updates <i>this actor</i> will be transformed using the new transformation.\n</p>\n\nThis method uses {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}}, but can read transformation\nfuntion/object stored in the registry (if the proact-dsl module is present) by it's string name.",
            "instance": "",
            "itemtype": "method",
            "name": "transformStored",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transformation",
                    "description": "The transformation to add. Can be string - to be retrieved by name.",
                    "type": "Object|String"
                },
                {
                    "name": "type",
                    "description": "The type of the transformation, for example `mapping`.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 832,
            "description": "Adds a mapping transformation to <i>this actor</i>.\n<p>\n Mapping transformations just transform one value into another. For example if we get update with\n the value of <i>3</i> and we have mapping transformation that returns the updating value powered by <i>2</i>,\n we'll get <i>9</i> as actual updating value.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "mapping",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 853,
            "description": "Adds a filtering transformation to <i>this actor</i>.\n<p>\n Filtering can be used to filter the incoming update values. For example you can\n filter by only odd numbers as update values.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "filtering",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 881,
            "description": "Adds an accumulation transformation to <i>this actor</i>.\n<p>\n Accumulation is used to compute a value based on the previous one.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "accumulation",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 913,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.map(function (el) {\n   return el * el;\n });\n```\n\nor\n\n```\n var actor = sourceActor.map('+');\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.\n     Can be string for predefined mapping functions.",
                    "type": "Object|Function|Strin"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>mapping</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 944,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.filter(function (el) {\n   return el % 2 == 0;\n });\n```\n\nor\n\n```\n var actor = sourceActor.filter('odd');\n\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>filtering</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 975,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.accumulate(0, function (current, el) {\n   return current + el;\n });\n```\n\nor\n\n```\n var actor = sourceActor.accumulate('+');\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 1007,
            "description": "TODO - Move to the proact-properties module!\n\nGenerates a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} containing the state of an accumulations.\n\n<p>\n The value will be updated with every update coming to this actor.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance observing <i>this</i> with the accumulation applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 1032,
            "description": "Defers a ProAct.Actor listener.\n<p>\n By default this means that the listener is put into active {{#crossLink \"ProAct.Flow\"}}{{/crossLink}} using it's\n {{#crossLink \"ProAct.Flow/pushOnce:method\"}}{{/crossLink}} method, but it can be overridden.\n</p>\n\nThis method determines the order of actions, triggered by the changes in the data flow.\nThe default implementation is executing only one update on this Actor per data flow change.\nThis means that if the `Actor` depends on other three Actors, and all of them get updated,\nit is updated only once with the last update value.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to the listener.",
                    "type": "Object"
                },
                {
                    "name": "listener",
                    "description": "The listener to defer. It should be a function or object defining the <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor_util.js",
            "line": 36,
            "description": "Updating/notifying method that can be applied to an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}\n\nThis method defers the update and the notifications into {{#crossLink \"ProAct.flow\"}}{{/crossLink}}.\n\nIf the state of the caller is {{#crossLink \"ProAct.States.destroyed)\"}}{{/crossLink}}, an exception will be thrown.\nIf the state of the caller is {{#crossLink \"ProAct.States.closed)\"}}{{/crossLink}}, nothing will happen.\n\nExamples:\n\nYou can implement a stream and in it's `trigger` method use this:\n```\n  ActorUtil.update.call(this, event);\n```\nThis way the event will be triggered into the stream and all the listeners to the stream will be notified.\nFor this to work you'll have to override the `makeEvent` method of the stream to return the unmodified source - no state/no event generation,\nthe event will just go through.\n\n\nIf you want to implement a statefull `Actor` like a `property`, you can set a state in it and just notify all the\nobserving `Actors` with this method.",
            "itemtype": "method",
            "name": "update",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The event/value, causing the update -> can be null : no source.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "actions",
                    "description": "For which actions should notify -> can be null : default actions.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "eventData",
                    "description": "Data for creating the updating event -> can be null : no data.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The calling object.",
                "type": "Object"
            },
            "class": "ProAct.ActorUtil",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/actor_util.js",
            "line": 86,
            "description": "Contains the real notify/update logic defered by {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}} into the flow.\nIt is private method, should not be used - use `update`.",
            "itemtype": "method",
            "name": "doUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The event/value, causing the update -> can be null : no source.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "actions",
                    "description": "For which actions should notify -> can be null : default actions.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "eventData",
                    "description": "Data for creating the updating event -> can be null : no data.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The calling object.",
                "type": "Object"
            },
            "class": "ProAct.ActorUtil",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/core.js",
            "line": 47,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Core",
            "final": 1,
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 57,
            "description": "A function to be set to the <i>shell</i> object's <b>p</b> field (if it is configured in {{#crossLink \"ProAct.Configuration\"}}{{/crossLink}}.\n<p>\n This function is the link to the this ProAct.Core of the <i>shell</i>.\n It can be overridden to return different aspects of the core depending on parameters passed.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "value",
            "default": "{this}",
            "return": {
                "description": "Some aspects of <i>this</i> `ProAct.Core`.",
                "type": "Object"
            },
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 75,
            "description": "Initializes <i>this</i> ProAct.Core. This method should be called when the core should become active.\n<p>\n The main idea of the method is to change the {{#crossLink \"ProAct.States\"}}{{/crossLink}}\n state of <i>this</i> to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}, by\n settuping everything needed by the shell to has observer-observable logic.\n</p>\n<p>\n The abstract {{#crossLink \"ProAct.Core/setup:method\"}}{{/crossLink}} method is called for the actual setup.\n If it throws an error, <i>this</i> state is set to {{#crossLink \"ProAct.States/error:property\"}}{{/crossLink}}\n and the core stays inactive.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "prob",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Core"
            },
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 115,
            "description": "Abstract method called by {{#crossLink \"ProAct.Core/prob:method\"}}{{/crossLink}}\nfor the actual initialization of <i>this</i> core.\n\nBy default it throws an exception.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "setup",
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 131,
            "description": "`ProAct.Core` can be used as a parent listener for its managed\n{{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s, so it defines the <i>call</i> method.\n<p>\n By default this method calls {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}\n with <i>this</i> and the passed <i>event</i>.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "call",
            "params": [
                {
                    "name": "event",
                    "description": "The value/event that this listener is notified for.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 34,
            "description": "Factory method for creating of new ProAct.Events with ease.\n<p>\n NOTE: For now only works with arrays, because creating array events required a lot of code.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the event. Can be string for ease.\n     For now this method supports only {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} events.\n     It is possible to pass the string 'array' for type.",
                    "type": "ProAct.Event.Types|String"
                },
                {
                    "name": "data",
                    "description": "Arguments of the event.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 61,
            "description": "Factory method for creating of new ProAct.Events of type {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nTODO Move to the proact-arrays package!",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "subType",
                    "description": "The operation type of the event to create. Can be string or instance of\n     {@link ProAct.Array.Operations}.\n     Prossible string values are - 'remove' and 'splice' for now.",
                    "type": "ProAct.Array.Operations|String"
                },
                {
                    "name": "data",
                    "description": "Arguments of the event.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 99,
            "description": "Factory method for creating of new ProAct.Events without target and source with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nUsing this method we can create for example an event for removing the i-th element from ProAct.Array like this:\n<pre>\n ProAct.Event.simple('array', 'del', el, array);\n</pre>\nThis event can be passed to the ProAct.ArrayCore#update method of the core of a ProAct.Array and it will delete\nthe element in it.\n\nTODO Some of these types and comments should be undepended of the proact-arrays module.",
            "static": 1,
            "params": [
                {
                    "name": "eventType",
                    "description": "The type of the event. Can be string for ease.\n     For now this method supports only {@link ProAct.Event.Types.array} events.\n     It is possible to pass the string 'array' or 'a' for type.",
                    "type": "ProAct.Event.Types|String"
                },
                {
                    "name": "subType",
                    "description": "The operation type of the event to create. Can be string or instance of\n     {@link ProAct.Array.Operations}.\n     Prossible string values are - 'pop', 'shift', 'deleteElement' or 'del' (at index) and 'splice' for now.",
                    "type": "ProAct.Array.Operations|String"
                },
                {
                    "name": "value",
                    "description": "Used a value of the event.\n     For array events this is for example the value to be added or to be removed.\n     It can be index too.",
                    "type": "Object"
                },
                {
                    "name": "array",
                    "description": "Optional parameter for array events - the array target of the event.\n     It will be set as target.\n     Can be used for determining event's parameters too.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 169,
            "description": "Value type events. Events for changing a value.\n<p>\n For properties the args of the event contain the ProAct Object, the old value\n of the property and the new value.\n</p>",
            "type": "Number",
            "itemtype": "property",
            "name": "value",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 183,
            "description": "Array type events. Events for changes in {@link ProAct.Array}.\n<p>\n The args should consist of operation, index, old values, new values.\n</p>\n\nTODO Move it to the proact-arrays module.",
            "type": "Number",
            "itemtype": "property",
            "name": "array",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 198,
            "description": "Close type events. Events for closing streams or destroying properties.",
            "type": "Number",
            "itemtype": "property",
            "name": "close",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 208,
            "description": "Error type events. Events for errors.",
            "type": "Number",
            "itemtype": "property",
            "name": "error",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 67,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 85,
            "description": "Initialized : It is not usable yet.\n\nFor example a computed property (property depending on other properties/actors) is\nin `init` state when it's created and not read yet.\nWhen something reads its value it computes it for the the first time and becomes in `ready`\nstate.",
            "itemtype": "property",
            "name": "init",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 100,
            "description": "Ready for use.\n\nActive {{#crossLink \"ProAct.Actor\"}}Actors{{/crossLink}} have this state. It can be listened to, it\ncan be updated and notify all of its dependencies.",
            "itemtype": "property",
            "name": "ready",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 113,
            "description": "Ended it's lifecycle.\n\nEvery {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} can be `destroyed`. All the resources it uses are freed.\nAll the dependent objects don't depend on it anymore.\n\nFor example if an application has states/routing, {{#crossLink \"ProAct.Actor\"}}Actors{{/crossLink}} that were active in one\nof the states should be `destroyed` before going into other route/state.",
            "itemtype": "property",
            "name": "destroyed",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 129,
            "description": "Error has occured in the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}'s lifecycle.\n\nFor example, if there was an exception in the object's initialization.",
            "itemtype": "property",
            "name": "error",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 141,
            "description": "A closed ProAct object.\n\nStreams that can emmit events anymore are closed streams.\n\nProperties which value can not be updated are closed (constants).",
            "itemtype": "property",
            "name": "closed",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 169,
            "description": "Generates an universally unique identifier.",
            "itemtype": "method",
            "name": "uuid",
            "return": {
                "description": "Unique string.",
                "type": "String"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 184,
            "description": "Checks if the passed value is a Function or not.",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "The object/value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed value is a Function.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 195,
            "description": "Checks if the passed value is a String instance or not.",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "The object/value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed value is a String.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 206,
            "description": "Checks if the passed value is a JavaScript object or not.",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed values is not primitive.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 217,
            "description": "Checks if the passed value is {} or not.",
            "itemtype": "method",
            "name": "isEmptyObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the value is object that has no own fields.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 234,
            "description": "Checks if the passed value is a valid JavaScript Error instance or not.",
            "itemtype": "method",
            "name": "isError",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is instance of an Error.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 245,
            "description": "Checks if the passed value is a valid JavaScript Array instance or not.",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is Array.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 256,
            "description": "Checks if the passed value is instance of the {{#crossLink \"ProAct.Array\"}}{{/crossLink}} type or not.\nTODO Move to the proact-arrays module.",
            "itemtype": "method",
            "name": "isProArray",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is a ProAct.Array instance.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 268,
            "description": "Checks if the passed value is a valid array-like object or not.\nArray like objects in ProAct.js are plain JavaScript arrays and {{#crossLink \"ProAct.Array\"}}{{/crossLink}}s.\nTODO Move to the proact-arrays module.",
            "itemtype": "method",
            "name": "isArrayObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is an Array or ProAct.Array instance.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 281,
            "description": "Checks if the passed value is a valid ProAct.js object or not.\nProAct.js object have a special `__pro__` object that is hidden in them, which should be instance of {{#crossLink \"ProAct.Core\"}}{{/crossLink}}.\nTODO Move to the proact-properties module.",
            "itemtype": "method",
            "name": "isProObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the value is object containing {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances and has a `core`.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 294,
            "description": "Clones the passed object. It creates a deep copy of it.\nFor now it clones only arrays.\n\nTODO It is not fully implemented...",
            "itemtype": "method",
            "name": "clone",
            "beta": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The object to clone.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Clone of the passed object.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 316,
            "description": "Extends the destination object with the properties and methods of the source object.\n\n```\n var obj1 = {a: 3};\n var obj2 = {b: 4;}\n ProAct.Utils.ex(obj2, obj1);\n\n console.log(obj2);\n // This prints : {a: 3, b: 4}\n\n```",
            "itemtype": "method",
            "name": "ex",
            "params": [
                {
                    "name": "destination",
                    "description": "The object to be extended - it will be modified.",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "The source holding the properties and the functions to extend destination with.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The changed destination object.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 345,
            "description": "Used for extending of classes.\nExample is:\n```\n\n var Bar = ProAct.Utils.extendClass.call(Foo, {\n   a: 1,\n   b: 2,\n   c: function () {}\n });\n\n```",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "data",
                    "description": "Data to add new properties to the new class or override old ones.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Child class.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 382,
            "description": "Binds a `function` to an `object context`.\n\nEvery time the `function` is called, `this` will point to the passed `object`.\n\n```\n\n var context = {a: 3};\n var f = ProAct.Utils.bind(context, function () {\n   return this;\n });\n\n var result = f();\n console.log(result === context); // prints 'true'\n\n```",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "ctx",
                    "description": "The `context` to bind the `this` of the function to.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The `function` to bind.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The bound `function`.",
                "type": "Function"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 410,
            "description": "Removes the first appearance of the passed `value` in the passed `array`.\nIf the `value` is not present in the passed `array` does nothing.\n\n```\n\n var array = [1, 2, 3];\n ProAct.Utils.remove(array, 2);\n\n console.log(array); // prints [1, 3]\n\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "array",
                    "description": "The `array` to remove from.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The `value` to be removed.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 434,
            "description": "A powerful function that creates a diff object containing the differences between two arrays.",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "array1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<p>The object returned contains a property for every index there is a difference between the passed arrays.</p>\n     <p>The object set on the index has two array properties : 'o' and 'n'.</p>\n     <p>The 'o' property represents the owned elemetns of the first array that are different from the other's.</p>\n     <p>The 'n' property contains all the elements that are not owned by the first array, but present in the other.</p>\n     <p>Example:</p>\n```\n  var array1 = [1, 3, 4, 5],\n      array2 = [1, 2, 7, 5, 6]\n      diff;\n\n  diff = ProAct.Utils.diff(array1, array2);\n\n  console.log(diff[0]); // undefined - the arrays are the same at he index 0\n  console.log(diff[1]); // {o: [3, 4], n: [2, 7]}\n  console.log(diff[2]); // undefined the change began from index 1, so it is stored there\n  console.log(diff[3]); // undefined - the arrays are the same at index 3\n  console.log(diff[4]); // {o: [], n: [6]}\n```",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 505,
            "description": "Defines a property to an object that contains a initial value.\n\nThe property can be configured using the arguments passed if it is possible in the javascript implementation.",
            "itemtype": "method",
            "name": "defValProp",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to define a property in.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The name of the property to define.",
                    "type": "String"
                },
                {
                    "name": "enumerable",
                    "description": "If the property should be enumerable.<br /> In other words visible when doing <pre>for (p in obj) {}</pre>",
                    "type": "Boolean"
                },
                {
                    "name": "configurable",
                    "description": "If the property should be configurable.<br /> In other words if the parameters of the property for example enumerable or writable can be changed in the future.",
                    "type": "Boolean"
                },
                {
                    "name": "writable",
                    "description": "If the property can be changed.",
                    "type": "Boolean"
                },
                {
                    "name": "val",
                    "description": "The initial value of the property.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 541,
            "description": "If this option is set to true, when a ProAct.js object is created and has properties named\nas one or more of the properties listed in\n{{#crossLink \"ProAct.Configuration.keypropList\"}}{{/crossLink}} an `Error` will be thrown.\n\nIn other words declares some of the properties of every ProAct objects as keyword properties.",
            "itemtype": "property",
            "name": "keyprops",
            "type": "Boolean",
            "static": 1,
            "class": "ProAct.Configuration",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 555,
            "description": "Defines a list of the keyword properties that can not be used in ProAct.js objects.\nThe {{#crossLink \"ProAct.Configuration.keyprops\"}}{{/crossLink}} option must be set to true in order for this list to be used.",
            "itemtype": "property",
            "name": "keypropList",
            "type": "Array",
            "static": 1,
            "class": "ProAct.Configuration",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 567,
            "description": "No-action or emtpy function. Represent an action that does nothing.",
            "itemtype": "method",
            "name": "N",
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 576,
            "description": "<p>\n Represents the current caller of a method, the initiator of the current action.\n</p>\n<p>\n This property does the magic when for example an {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} is called\n for the first time and the dependencies to the other properties are created.\n The current caller expects to be used in a single threaded environment.\n</p>\n<p>\n Do not remove or modify this property manually.\n</p>\nTODO move to proact-properties module.",
            "itemtype": "property",
            "name": "currentCaller",
            "type": "Object",
            "default": "null",
            "static": 1,
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/properties/array_property.js",
            "line": 135,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ArrayProperty",
            "final": 1,
            "class": "ProAct.ArrayProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/array_property.js",
            "line": 145,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.ArrayProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/array:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ArrayProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/array_property.js",
            "line": 162,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.ArrayProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.ArrayProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 134,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.AutoProperty",
            "final": 1,
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 144,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.AutoProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/auto:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 161,
            "description": "Creates the <i>listener</i> of this `ProAct.AutoProperty`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for `ProAct.AutoProperty` is an object defining the <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>\n<p>\n On value changes the <i><this</i> value is set to the value computed by the original function,\n using the {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}} to transform it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this ProAct.AutoProperty</i>.",
                "type": "Object"
            },
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 201,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.AutoProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 60,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectCore",
            "final": 1,
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 70,
            "description": "A function to be set to the <i>shell</i> object's <b>p</b> field (if it is configured in {{#crossLink \"ProAct.Configuration\"}}{{/crossLink}}).\n<p>\n It uses its <i>p</i> argument if it is string to return the right {{#crossLink \"ProAct.Property\"}}{{/crossLink}} for passed field name.\n</p>\n<p>\n If the <i>p</i> argument is <b>*</b> or empty <i>this</i> `ProAct.ObjectCore` instance is returned.\n</p>\n\n```\n core.value('a'); // returns the shell's 'a' value - shell.a.\n core.value('*'); // returns this.\n core.value(); // returns this.\n```",
            "instance": "",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "p",
                    "description": "The name of the managed {{#crossLink \"ProAct.Property\"}}{{/crossLink}} to retrieve.\n     It can be set to <b>*</b> or skipped for <i>this</i> itself to be retrieved.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Managed {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with field name equal to the passed <i>p</i> parameter or <i>this</i>.",
                "type": "Object"
            },
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 102,
            "description": "Initializes all the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for the <i>shell</i>of <i>this</i> ProAct.ObjectCore.\n<p>\n Using the types of the fields of the <i>shell</i> object the right {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances are created and stored\n in <i>this</i> using {{#crossLink \"ProAct.Configuration/makeProp:method\"}}{{/crossLink}}.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "setup",
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 123,
            "description": "Creates a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance for <i>this</i>'s shell.\n\n```\n var shell = {a: 3};\n var core = new ProAct.Core(shell);\n\n shell.b = function () { return this.a + 5; };\n core.makeProp('b');\n\n console.log(shell.b); // 8\n\n shell.a = 5;\n console.log(shell.b); // 10\n```",
            "instance": "",
            "itemtype": "method",
            "name": "makeProp",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the property, the name of the field in the <i>shell</i>.",
                    "type": "String"
                },
                {
                    "name": "listeners",
                    "description": "Initial listeners for 'change' of the property, can be skipped.",
                    "type": "Array"
                },
                {
                    "name": "meta",
                    "description": "Meta information for the property to create, for example if the meta contains 'noprop', no property is created,\n     and the initial value of the field is preserved. The meta is in format of the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}}.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "The newly crated and stored in <i>this</i> property, or null if no property was created.",
                "type": "ProAct.Property"
            },
            "throws": {
                "description": "If there is no field defined in the <i>shell</i> named as the passed <i>property</i>.",
                "type": "Error"
            },
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 198,
            "description": "Sets the value of a managed property. The interesting thing here is that\nif the property does not exist this method creates it and stores a new field in the <i>shell</i> object\nwith the passed <i>value</i>.\n<p>\n The new field is reactive.\n</p>\n\n```\n var shell = {a: 3};\n var core = new ProAct.Core(shell);\n\n core.set('b', function () { return this.a + 5; });\n\n console.log(shell.b); // 8\n\n shell.a = 5;\n console.log(shell.b); // 10\n```",
            "instance": "",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the property to update/create.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the property to be set.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 140,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectProperty",
            "final": 1,
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 150,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.ObjectProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/object:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 167,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.ObjectProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 123,
            "description": "ProAct.Property for simple types - Numbers, Strings or Booleans.",
            "itemtype": "property",
            "name": "simple",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 133,
            "description": "ProAct.Property for auto computed types - Functions.",
            "itemtype": "property",
            "name": "auto",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 143,
            "description": "ProAct.Property for object types - fields containing objects.",
            "itemtype": "property",
            "name": "object",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 153,
            "description": "ProAct.Property for array types - fields containing arrays.",
            "itemtype": "property",
            "name": "array",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 163,
            "description": "ProAct.Property for nil types - fields containing null or undefined.",
            "itemtype": "property",
            "name": "nil",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 173,
            "description": "Retrieves the right` ProAct.Property.Types` value from a value.",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "value",
                    "description": "The value to use to compute the `ProAct.Property.Types` member for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The type of the passed value.",
                "type": "Number"
            },
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 198,
            "description": "Generates a default getter function for a `ProAct.Property` instance.\n<p>\n Every `ProAct.Property` instance has a getter and a setter,\n they can be passed in the constructor, but if left blank,\n this method is used for creating the getter function.\n</p>\n<p>\n The default getter function uses {{#crossLink \"ProAct.Property/addCaller:method\"}}{{/crossLink}}\n method to track the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} listener if set.\n If it is set it is added as a listener to the passed <i>property</i>.\n</p>",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultGetter",
            "params": [
                {
                    "name": "property",
                    "description": "The `ProAct.Property` instance to generate a getter function for.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "The generated getter function.",
                "type": "Function"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 228,
            "description": "Generates a default setter function for a ProAct.Property instance.\n<p>\n Every `ProAct.Property` instance has a setter and a getter,\n they can be passed in the constructor, but if left blank,\n this method is used for creating the setter function.\n</p>\n<p>\n The default setter function uses the {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}\n method to update all the listeners for <i>change</i>s for the passed <i>property</i>.\n</p>\n<p>\n It updates the listeners only if the new value of the property\n is different from the old one (using <i>===</i> for the comparison).\n</p>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultSetter",
            "static": 1,
            "params": [
                {
                    "name": "property",
                    "description": "The `ProAct.Property` instance to generate a setter function for.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "setter",
                    "description": "A setter function for the way of setting the value.\n     It can be skipped if the value should be set using <i>=</i>.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The generated setter function.",
                "type": "Function"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 282,
            "description": "Used to define the managed by a `ProAct.Property` instance field of the passed <i>obj</i>.\n<p>\n The field is writable, enumerable and configurable.\n</p>",
            "itemtype": "method",
            "name": "defineProp",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The object which field should be defined as a property.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The name of the property field to define.",
                    "type": "String"
                },
                {
                    "name": "get",
                    "description": "The getter that should be used to read the new property to be defined.",
                    "type": "Function"
                },
                {
                    "name": "set",
                    "description": "The setter that should be used to update the new property to be defined.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 310,
            "description": "Recreates a property, using its current value.\n<p>\n The re-definition works by using {{#crossLink \"ProAct.Property/destroy:method\"}}{{/crossLink}}\n to destroy the passed <i>property</i> first, and then the\n {{#crossLink \"ProAct.ObjectCore/makeProp:method\"}}{{/crossLink}} method is called of the\n {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}} of the object the <i>property</i> belongs to.\n</p>\n<p>\n This way a new `ProAct.Property` instance is created to replace the passed one.\n</p>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reProb",
            "static": 1,
            "params": [
                {
                    "name": "property",
                    "description": "The ProAct.Property instance to re-define.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "The new re-defined property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 344,
            "description": "Creates a constant property. It's value can not be changed.\n\n```\n var property = ProAct.Property.constant(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 5\n```",
            "static": 1,
            "itemtype": "method",
            "name": "constant",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property. Can not be changed.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new constant property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 368,
            "description": "Creates a value property. It's value can be updated any time and other properties may depend on it.\n\nThis propety is eager - this means that it is initialized automatically even if it's not used.\n\n```\n var property = ProAct.Property.value(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 4\n```",
            "static": 1,
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new value property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 397,
            "description": "Creates a lazy initialized value property. It's value can be updated any time and other properties may depend on it.\n\nBeing lazy means, that the property won't be initialized until it is read (it's get() method is called).\n\n```\n var property = ProAct.Property.lazyValue(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 4\n```",
            "static": 1,
            "itemtype": "method",
            "name": "lazyValue",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new lazily initialized value property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 444,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Property",
            "final": 1,
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 454,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the base class - `ProAct.Property` it is\n {{#crossLink \"ProAct.Property.Types/simple:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 471,
            "description": "Creates the <i>event</i> to be send to the listeners of this `ProAct.Property` on update.\n<p>\n The <i>event</i> should be an instance of {{#crossLink \"ProAct.Event\"}}{{/crossLink}}.\n</p>\n<p>\n By default this method returns {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}} event with target the property name and arguments:\n <ul>\n   <li>The object this `ProAct.Property` manages a field for.</li>\n   <li>The old value of this property.</li>\n   <li>The new value of this property.</li>\n </ul>\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeEvent",
            "default": "{ProAct.Event} with type {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event, created.",
                "type": "ProAct.ValueEvent"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 499,
            "description": "Creates the <i>listener</i> of this `ProAct.Property`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for ProAct.Property is an object defining the <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>\n<p>\n On value changes the <i><this</i> value is set to the new value using the {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}} to transform it.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this ProAct.Property</i>.",
                "type": "Object"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 541,
            "description": "Initializes this property.\n<p>\n First the property is defined as a field in its object,\n using {{#crossLink \"ProAct.Property/defineProp:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "doInit",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 558,
            "description": "Uses {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} to\nautomatically add a new listener to this property if the caller is set.\n<p>\n This method is used by the default getter to make every reader of the property a listener to it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "addCaller",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 578,
            "description": "A hook that is called right before destruction, the extenders use it to clean up resources.\n\nThe `ProAct.Property` deletes its state and is removed from its core container.\n\nDon't override it.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "beforeDestroy",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 602,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n\nWhen the source is changed, the product of this operator is updated too.\n\n```\n var val = ProAct.Property.value(5);\n var plusOne = val.map(function (v) {\n   return v + 1;\n });\n\n plusOne.get(); // 6\n\n val.set(4);\n plusOne.get(); // 5\n```\n\nor\n\n```\n var positive = val.map('+');\n\n val.set(-4);\n\n positive.get(); // 4\n```",
            "instance": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.\n     Can be string for predefined mapping functions.",
                    "type": "Object|Function|Strin"
                }
            ],
            "return": {
                "description": "A new `ProAct.Property` instance with the <i>mapping</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 645,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n\nWhen the source changes, the product, may be updated.\n\nTODO On creation if the filter fails, the property keeps the original value.\nWhat to do? Also these kinds of properties shouldn't be set manually.\n\n```\n var prop = ProAct.Property.value(4);\n var even = sourceActor.filter(function (el) {\n   return el % 2 == 0;\n });\n\n even.get(); // 4\n\n prop.set(5);\n even.get(); // 4\n\n prop.set(6);\n even.get(); // 6\n```\n\nor\n\n```\n var actor = sourceActor.filter('odd');\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>filtering</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Actor",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 691,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n\nSome examples:\n\n```\n var prop = ProAct.Property.value(3);\n var acc = prop.accumulate(0, function (current, el) {\n   return current + el;\n });\n\n acc.get(); // 3\n\n prop.set(5);\n\n acc.get(); // 8\n\n prop.set(2);\n\n acc.get(); // 10\n```\n\nor\n\n```\n var acc = prop.accumulate('+'); // The same as the above if the DSL module is present.\n```",
            "instance": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Property` instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 736,
            "description": "The <b>toString()</b> method returns a string representing this `ProAct.Property`.\n<p>\n The string representation is the value of <i>this</i> property.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "toString",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 757,
            "description": "Creates a {{{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance,\ndependent on this.\nComes from the `proact-properties` module.",
            "instance": "",
            "itemtype": "method",
            "name": "toProperty",
            "class": "ProAct.Actor",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 35,
            "description": "Registers a `ProAct.PropertyProvider`.\n<p>\n The provider is appended in the end of the list of `ProAct.PropertyProviders`.\n</p>\n<p>\n When a property must be provided if there is a `ProAct.PropertyProvider` registered before\n the passed <i>propertyProvider</i>, with valid filtering for the passed field, it will\n be used instead.\n</p>",
            "itemtype": "method",
            "name": "registerProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The `ProAct.PropertyProvider` to register.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 56,
            "description": "Registers a `ProAct.PropertyProvider`.\n<p>\n The provider is prepended in the beginning of the list of `ProAct.PropertyProviders`.\n</p>\n<p>\n It's filtering will be called before any other registered provider.\n</p>",
            "itemtype": "method",
            "name": "prependProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The `ProAct.PropertyProvider` to register.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 75,
            "description": "Removes a `ProAct.PropertyProvider` from the list of the registered `ProAct.PropertyProviders`.",
            "itemtype": "method",
            "name": "unregisterProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The ProAct.PropertyProvider to unregister.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 88,
            "description": "Removes all `ProAct.PropertyProviders` from the list of the registered `ProAct.PropertyProviders`.",
            "static": 1,
            "itemtype": "method",
            "name": "clearProviders",
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 99,
            "description": "Provides a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance using the list of the registered\n`ProAct.PropertyProviders`.\n<p>\n The providers are tried in the order of their registration\n (the order can be changed using {{#crossLink \"ProAct.PropertyProvider/prependProvider:method\"}}{{/crossLink}}).\n</p>\n<p>\n The {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method is used to check\n if a provider is compliant with the passed arguments.\n</p>\n<p>\n If a compliant provider is found, its {{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}} method\n is used to provide the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>object</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to provide a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance for.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A property provided by registered provider, or null if there is no compliant provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 168,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.PropertyProvider",
            "final": 1,
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 178,
            "description": "Used to check if this `ProAct.PropertyProvider` is compliant with the field and meta data\nto be used for creating a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with\n{{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}}.\n<p>\n Abstract - must be implemented by an extender.\n</p>",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n     Can be used in the filtering process.\n     <p>\n       For example field name beginning with foo. Can be turned into a FooProperty.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "If <i>this</i> provider is compliant with the passed arguments.",
                "type": "Boolean"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 207,
            "description": "Provides an instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n<p>\n It should be called only after <i>this</i> {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method,\n called with the same arguments returns true.\n</p>\n<p>\n Abstract - must be implemented in an extender.\n</p>",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}. Can be used in the filtering process.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A property provided by <i>this</i> provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 262,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.SimplePropertyProvider",
            "final": 1,
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 273,
            "description": "Used to check if this `ProAct.SimplePropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}. Can be used in the filtering process.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> not undefined or null as well as object, array ot function.",
                "type": "Boolean"
            },
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 293,
            "description": "Provides an instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 340,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.AutoPropertyProvider",
            "final": 1,
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 350,
            "description": "Used to check if this `ProAct.AutoPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> a function.",
                "type": "Boolean"
            },
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 369,
            "description": "Provides an instance of {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.AutoProperty"
            },
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 395,
            "description": "<p>\n Constructor for `ProAct.ArrayPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instances for fields pointing to arrays.\n</p>\n<p>\n `ProAct.ArrayPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1,
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 416,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ArrayPropertyProvider",
            "final": 1,
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 426,
            "description": "Used to check if this `ProAct.ArrayPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> an array.",
                "type": "Boolean"
            },
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 445,
            "description": "Provides an instance of {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ArrayProperty"
            },
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 492,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectPropertyProvider",
            "final": 1,
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 502,
            "description": "Used to check if this `ProAct.ObjectPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> an object, different from array or function.",
                "type": "Boolean"
            },
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 521,
            "description": "Provides an instance of {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ObjectProperty"
            },
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 568,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ProxyPropertyProvider",
            "final": 1,
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 578,
            "description": "Used to check if this `ProAct.ProxyPropertyProvider` is compliant with the meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "If the meta is present and of type {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, it becomes the target property of the\n     {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} that will be provided.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "True if <i>meta</i> argument is present and is instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                "type": "Boolean"
            },
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 602,
            "description": "Provides an instance of {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "The target {{#crossLink \"ProAct.Property\"}}{{/crossLink}} of the {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} to be created.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ProxyProperty"
            },
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 79,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ProxyProperty",
            "final": 1,
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 89,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For `ProAct.ProxyProperty` this is the type if its <i>target</i>.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 105,
            "description": "Creates the <i>listener</i> of this `ProAct.ProxyProperty`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for ProAct.ProxyProperty is an object defining an empty <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this `ProAct.ProxyProperty`</i>.",
                "type": "Object"
            },
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/buffered_stream.js",
            "line": 50,
            "description": "Reference to the constructor of this object.",
            "memberof": "ProAct.BufferedStream",
            "instance": "",
            "constant": "",
            "type": "{Object}",
            "default": "ProAct.BufferedStream",
            "class": "ProAct.BufferedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/buffered_stream.js",
            "line": 61,
            "description": "Flushes the stream by emitting all the events/values stored in its buffer.\nThe buffer becomes empty.",
            "memberof": "ProAct.BufferedStream",
            "instance": "",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.BufferedStream"
            },
            "class": "ProAct.BufferedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 42,
            "description": "Reference to the constructor of this object.",
            "memberof": "ProAct.DebouncingStream",
            "instance": "",
            "constant": "",
            "type": "{Object}",
            "default": "ProAct.DebouncingStream",
            "class": "ProAct.DebouncingStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 53,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n But the buffer of ProAct.DebouncingStream can store only one value/event, so when the delay passes only\n the last value/event triggered into the stream by this method is emitted. On every call of this method the delay is reset.\n So for example if you have mouse move as source, it will emit only the last mouse move event, that was send <i>delay</i> milliseconds ago.\n</p>\n<p>\n ProAct.DebouncingStream.t is alias of this method.\n</p>",
            "memberof": "ProAct.ThrottlingStream",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.DebouncingStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 84,
            "description": "Creates a new {@link ProAct.DebouncingStream} instance having as source <i>this</i>.",
            "memberof": "ProAct.Stream",
            "instance": "",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {@link ProAct.DebouncingStream} instance.",
                "type": "ProAct.DebouncingStream"
            },
            "class": "ProAct.DebouncingStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 57,
            "description": "Reference to the constructor of this object.",
            "memberof": "ProAct.DelayedStream",
            "instance": "",
            "constant": "",
            "type": "{Object}",
            "default": "ProAct.DelayedStream",
            "class": "ProAct.DelayedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 68,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n</p>\n<p>\n ProAct.DelayedStream.t is alias of this method.\n</p>",
            "memberof": "ProAct.DelayedStream",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 91,
            "description": "<p>\n Cancels the delay interval flushes. If this method is called the stream will stop emitting incoming values/event,\n until the {@link ProAct.DelayedStream#setDelay} method is called.\n</p>",
            "memberof": "ProAct.DelayedStream",
            "instance": "",
            "itemtype": "method",
            "name": "cancelDelay",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "see": [
                "{@link ProAct.DelayedStream#setDelay}"
            ],
            "class": "ProAct.DelayedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 113,
            "description": "<p>\n Modifies the delay of the stream. The current delay is canceled using the {@link ProAct.DelayedStream#cancelDelay} method.\n</p>",
            "memberof": "ProAct.DelayedStream",
            "instance": "",
            "itemtype": "method",
            "name": "setDelay",
            "params": [
                {
                    "name": "delay",
                    "description": "The new delay of the stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 145,
            "description": "Creates a new {@link ProAct.DelayedStream} instance having as source <i>this</i>.",
            "memberof": "ProAct.Stream",
            "instance": "",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {@link ProAct.DelayedStream} instance.",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 61,
            "description": "Reference to the constructor of this object.",
            "memberof": "ProAct.SizeBufferedStream",
            "instance": "",
            "constant": "",
            "type": "{Object}",
            "default": "ProAct.SizeBufferedStream",
            "class": "ProAct.SizeBufferedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 72,
            "description": "<p>\n Triggers a new event/value to the stream. If the buffer is full, anything that is listening for events from\n this stream will get updated with all the values/events in the buffer.\n</p>\n<p>\n ProAct.Stream.t is alias of this method.\n</p>",
            "memberof": "ProAct.SizeBufferedStream",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Stream"
            },
            "see": [
                "{@link ProAct.BufferedStream#flush}"
            ],
            "class": "ProAct.SizeBufferedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 104,
            "description": "Creates a new {@link ProAct.SizeBufferedStream} instance having as source <i>this</i>.",
            "memberof": "ProAct.Stream",
            "instance": "",
            "itemtype": "method",
            "name": "bufferit",
            "params": [
                {
                    "name": "size",
                    "description": "The size of the buffer of the new ProAct.SizeBufferedStream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {@link ProAct.SizeBufferedStream} instance.",
                "type": "ProAct.SizeBufferedStream"
            },
            "throws": {
                "description": "SizeBufferedStream must contain size, if there is no size passed to it.",
                "type": "Error"
            },
            "class": "ProAct.SizeBufferedStream",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 117,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Stream",
            "final": 1,
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 127,
            "description": "Creates the <i>event</i> to be send to the listeners on update.\n<p>\n Streams don't create new events by default, the event is the source.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeEvent",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 146,
            "description": "Creates the <i>listener</i> of this stream.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 171,
            "description": "Creates the <i>error listener</i> of this stream.\n<p>\n The listener pushes the incoming event into `this Stream` by default.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeErrListener",
            "return": {
                "description": "The <i>error listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 199,
            "description": "Creates the <i>closing listener</i> of this stream.\n\nPushes a closing notification into the stream by default.",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeCloseListener",
            "return": {
                "description": "The <i>closing listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 226,
            "description": "Defers a `ProAct.Actor` listener.\n<p>\n For streams this means pushing it to active flow using {{#crossLink \"ProAct.Flow/push:method\"}}{{/crossLink}}.\n If the listener is object with 'property' field, it is done using {{#crossLink \"ProAct.Actor/defer:method\"}}{{/crossLink}}.\n That way the reactive environment is updated only once, but the streams are not part of it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to the listener.",
                    "type": "Object"
                },
                {
                    "name": "listener",
                    "description": "The listener to defer. It should be a function or object defining the <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 263,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n\n```\n  var mapped = stream.map(function (v) {\n    return v * v;\n  });\n\n  mapped.on(function (v) {\n    console.log(v); // squares\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>mapping</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 289,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n\n```\n  var filtered = stream.filter(function (v) {\n    return v % 2 === 1;\n  });\n\n  filtered.on(function (v) {\n    console.log(v); // odds\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>filtering</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 315,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n\n```\n var acc = stream.accumulate(0, function (p, v) {\n   return p + v;\n });\n\n acc.on(console.log); // sums\n```",
            "instance": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 341,
            "description": "Creates a new `ProAct.Stream` instance that merges this with other streams.\nThe new instance will have new value on value from any of the source streams.\n\n```\n var merged = stream1.merge(stream2);\n```\n\nHere if `stream1` emits:\n1--2---3----5-----X\n\nand `steam2` emits:\n----A-----B-----C-----D--X\n\n`merged` will emit:\n1--2A--3--B-5---C-----D--X",
            "instance": "",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "...",
                    "description": "A list of streams to be set as sources.",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the sources this and all the passed streams.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 373,
            "description": "Links source actors into this `ProAct.Stream`. This means that <i>this stream</i>\nis listening for changes from the <i>sources</i>.\n\nThe streams count their sources and when the sources are zero, they become inactive.\n\n```\n var stream1 = ProAct.stream();\n var stream2 = ProAct.stream();\n var stream = ProAct.stream();\n\n stream.into(stream1, stream2);\n stream.on(function (v) {\n   console.log(v);\n });\n\n```\n\nNow if the any of the source streams is emits,\nthe notification will be printed on the output.",
            "instance": "",
            "itemtype": "method",
            "name": "into",
            "params": [
                {
                    "name": "...",
                    "description": "Zero or more source }{{/crossLink}}s to set as sources.",
                    "type": "{#crossLink \"ProAct.Actor\"",
                    "optional": true
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 410,
            "description": "Checks if <i>this</i> can be closed.\n\nUses the number of the active sources to decide if `this stream` is ready to be closed.\nIf the active sources are zero - it can.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "canClose",
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 431,
            "description": "Turns this `ProAct.Actor` to a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}.\n\nIn reality this method creates a new `Stream` with source this.",
            "instance": "",
            "itemtype": "method",
            "name": "toStream",
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 45,
            "description": "Reference to the constructor of this object.",
            "memberof": "ProAct.ThrottlingStream",
            "instance": "",
            "constant": "",
            "type": "{Object}",
            "default": "ProAct.ThrottlingStream",
            "class": "ProAct.ThrottlingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 56,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n But the buffer of ProAct.ThrottlingStream can store only one value/event, so when the delay passes only\n the last value/event triggered into the stream by this method is emitted.\n</p>\n<p>\n ProAct.ThrottlingStream.t is alias of this method.\n</p>",
            "memberof": "ProAct.ThrottlingStream",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.ThrottlingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 86,
            "description": "Creates a new {@link ProAct.ThrottlingStream} instance having as source <i>this</i>.",
            "memberof": "ProAct.Stream",
            "instance": "",
            "itemtype": "method",
            "name": "throttle",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {@link ProAct.ThrottlingStream} instance.",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.ThrottlingStream",
            "module": "proact-streams"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:133"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:157"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:170"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:188"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:217"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:232"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:254"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:254"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:268"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:303"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:331"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:348"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:348"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:370"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:370"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:392"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:392"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:414"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:437"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:498"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:581"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:600"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:617"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:636"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:653"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:670"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:687"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:736"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:767"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:796"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:832"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:853"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:881"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:913"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:913"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:944"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:944"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:975"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:975"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:1007"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:1032"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:57"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:75"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:115"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/core.js:115"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:131"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/array_property.js:145"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/array_property.js:162"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:144"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:161"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:201"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:70"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:102"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:123"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:198"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_property.js:150"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_property.js:167"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:454"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:471"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:499"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:541"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:558"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:578"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:602"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:645"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:691"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:736"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:757"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/properties/property_provider.js:178"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:178"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/properties/property_provider.js:207"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:207"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:273"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:293"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:350"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:369"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:426"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:445"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:502"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:521"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:578"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:602"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/proxy_property.js:89"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/proxy_property.js:105"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/buffered_stream.js:50"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/buffered_stream.js:50"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/streams/buffered_stream.js:50"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/buffered_stream.js:61"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/buffered_stream.js:61"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/debouncing_stream.js:42"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/debouncing_stream.js:42"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/streams/debouncing_stream.js:42"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/debouncing_stream.js:53"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/debouncing_stream.js:53"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/debouncing_stream.js:84"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/debouncing_stream.js:84"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/delayed_stream.js:57"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:57"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/streams/delayed_stream.js:57"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/delayed_stream.js:68"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:68"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/delayed_stream.js:91"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:91"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/delayed_stream.js:113"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:113"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/delayed_stream.js:145"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:145"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/size_buffered_stream.js:61"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/size_buffered_stream.js:61"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/streams/size_buffered_stream.js:61"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/size_buffered_stream.js:72"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/size_buffered_stream.js:72"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/size_buffered_stream.js:104"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/size_buffered_stream.js:104"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:127"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:146"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:171"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:199"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:226"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:263"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:289"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:315"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:341"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:373"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:410"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:431"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/throttling_stream.js:45"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/throttling_stream.js:45"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/streams/throttling_stream.js:45"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/throttling_stream.js:56"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/throttling_stream.js:56"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/throttling_stream.js:86"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/throttling_stream.js:86"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events with ease.\n<p>\n NOTE: For now only works with arrays, because creating array events required a lot of code.\n</p>",
            "line": " src/js/core/event.js:34"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events of type {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nTODO Move to the proact-arrays package!",
            "line": " src/js/core/event.js:61"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events without target and source with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nUsing this method we can create for example an event for removing the i-th element from ProAct.Array like this:\n<pre>\n ProAct.Event.simple('array', 'del', el, array);\n</pre>\nThis event can be passed to the ProAct.ArrayCore#update method of the core of a ProAct.Array and it will delete\nthe element in it.\n\nTODO Some of these types and comments should be undepended of the proact-arrays module.",
            "line": " src/js/core/event.js:99"
        },
        {
            "message": "Missing item type\nProvides a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance using the list of the registered\n`ProAct.PropertyProviders`.\n<p>\n The providers are tried in the order of their registration\n (the order can be changed using {{#crossLink \"ProAct.PropertyProvider/prependProvider:method\"}}{{/crossLink}}).\n</p>\n<p>\n The {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method is used to check\n if a provider is compliant with the passed arguments.\n</p>\n<p>\n If a compliant provider is found, its {{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}} method\n is used to provide the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance.\n</p>",
            "line": " src/js/properties/property_provider.js:99"
        },
        {
            "message": "Missing item type\n<p>\n Constructor for `ProAct.ArrayPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instances for fields pointing to arrays.\n</p>\n<p>\n `ProAct.ArrayPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "line": " src/js/properties/property_provider.js:395"
        },
        {
            "message": "Missing item type\nReference to the constructor of this object.",
            "line": " src/js/streams/buffered_stream.js:50"
        },
        {
            "message": "Missing item type\nReference to the constructor of this object.",
            "line": " src/js/streams/debouncing_stream.js:42"
        },
        {
            "message": "Missing item type\nReference to the constructor of this object.",
            "line": " src/js/streams/delayed_stream.js:57"
        },
        {
            "message": "Missing item type\nReference to the constructor of this object.",
            "line": " src/js/streams/size_buffered_stream.js:61"
        },
        {
            "message": "Missing item type\nReference to the constructor of this object.",
            "line": " src/js/streams/throttling_stream.js:45"
        }
    ]
}