{
    "project": {
        "name": "proact.js",
        "description": "Reactive JavaScript Objects Properties.",
        "version": "1.3.0",
        "url": "",
        "logo": "../proact_logo_icon.png"
    },
    "files": {
        "src/js/flow/flow.js": {
            "name": "src/js/flow/flow.js",
            "modules": {
                "proact-flow": 1
            },
            "classes": {
                "ProAct.Flow": 1
            },
            "fors": {
                "ProAct.Flow": 1,
                "ProAct": 1
            },
            "namespaces": {}
        },
        "src/js/flow/queue.js": {
            "name": "src/js/flow/queue.js",
            "modules": {},
            "classes": {
                "ProAct.Queue": 1
            },
            "fors": {
                "ProAct.Queue": 1
            },
            "namespaces": {}
        },
        "src/js/flow/queues.js": {
            "name": "src/js/flow/queues.js",
            "modules": {},
            "classes": {
                "ProAct.Queues": 1
            },
            "fors": {
                "ProAct.Queues": 1
            },
            "namespaces": {}
        },
        "src/js/core/actor.js": {
            "name": "src/js/core/actor.js",
            "modules": {},
            "classes": {
                "ProAct.Actor": 1
            },
            "fors": {
                "ProAct.Actor": 1
            },
            "namespaces": {}
        },
        "src/js/core/actor_util.js": {
            "name": "src/js/core/actor_util.js",
            "modules": {},
            "classes": {
                "ProAct.ActorUtil": 1
            },
            "fors": {},
            "namespaces": {
                "ProAct": 1
            }
        },
        "src/js/core/core.js": {
            "name": "src/js/core/core.js",
            "modules": {},
            "classes": {
                "ProAct.Core": 1
            },
            "fors": {
                "ProAct.Core": 1
            },
            "namespaces": {}
        },
        "src/js/core/event.js": {
            "name": "src/js/core/event.js",
            "modules": {},
            "classes": {
                "ProAct.Event": 1,
                "ProAct.Event.Types": 1
            },
            "fors": {
                "ProAct.Event": 1
            },
            "namespaces": {
                "ProAct.Event": 1
            }
        },
        "src/js/core/functions.js": {
            "name": "src/js/core/functions.js",
            "modules": {},
            "classes": {
                "ProAct.ProbProvider": 1
            },
            "fors": {
                "ProAct.ProbProvider": 1,
                "ProAct": 1
            },
            "namespaces": {}
        },
        "src/js/core/pro.js": {
            "name": "src/js/core/pro.js",
            "modules": {
                "proact-core": 1
            },
            "classes": {
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Utils": 1,
                "ProAct.Configuration": 1
            },
            "fors": {
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Configuration": 1
            },
            "namespaces": {
                "ProAct": 1
            }
        },
        "src/js/properties/auto_property.js": {
            "name": "src/js/properties/auto_property.js",
            "modules": {},
            "classes": {
                "ProAct.AutoProperty": 1
            },
            "fors": {
                "ProAct.AutoProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/functions.js": {
            "name": "src/js/properties/functions.js",
            "modules": {},
            "classes": {},
            "fors": {
                "ProAct": 1
            },
            "namespaces": {}
        },
        "src/js/properties/object_core.js": {
            "name": "src/js/properties/object_core.js",
            "modules": {},
            "classes": {
                "ProAct.ObjectCore": 1
            },
            "fors": {
                "ProAct.ObjectCore": 1
            },
            "namespaces": {}
        },
        "src/js/properties/object_property.js": {
            "name": "src/js/properties/object_property.js",
            "modules": {},
            "classes": {
                "ProAct.ObjectProperty": 1
            },
            "fors": {
                "ProAct.ObjectProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/property.js": {
            "name": "src/js/properties/property.js",
            "modules": {
                "proact-properties": 1
            },
            "classes": {
                "ProAct.Property": 1,
                "ProAct.Property.Types": 1
            },
            "fors": {
                "ProAct.Property.Types": 1,
                "ProAct.Property": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {
                "ProAct.Property": 1
            }
        },
        "src/js/properties/property_provider.js": {
            "name": "src/js/properties/property_provider.js",
            "modules": {},
            "classes": {
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1
            },
            "fors": {
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1
            },
            "namespaces": {}
        },
        "src/js/properties/proxy_property.js": {
            "name": "src/js/properties/proxy_property.js",
            "modules": {},
            "classes": {
                "ProAct.ProxyProperty": 1
            },
            "fors": {
                "ProAct.ProxyProperty": 1
            },
            "namespaces": {}
        },
        "src/js/properties/value_event.js": {
            "name": "src/js/properties/value_event.js",
            "modules": {},
            "classes": {
                "ProAct.ValueEvent": 1
            },
            "fors": {
                "ProAct.ValueEvent": 1
            },
            "namespaces": {}
        },
        "src/js/streams/buffered_stream.js": {
            "name": "src/js/streams/buffered_stream.js",
            "modules": {},
            "classes": {
                "ProAct.BufferedStream": 1
            },
            "fors": {
                "ProAct.BufferedStream": 1
            },
            "namespaces": {}
        },
        "src/js/streams/debouncing_stream.js": {
            "name": "src/js/streams/debouncing_stream.js",
            "modules": {},
            "classes": {
                "ProAct.DebouncingStream": 1
            },
            "fors": {
                "ProAct.DebouncingStream": 1
            },
            "namespaces": {}
        },
        "src/js/streams/delayed_stream.js": {
            "name": "src/js/streams/delayed_stream.js",
            "modules": {},
            "classes": {
                "ProAct.DelayedStream": 1
            },
            "fors": {
                "ProAct.DelayedStream": 1,
                "ProAct.Stream": 1
            },
            "namespaces": {}
        },
        "src/js/streams/functions.js": {
            "name": "src/js/streams/functions.js",
            "modules": {},
            "classes": {},
            "fors": {
                "ProAct": 1
            },
            "namespaces": {}
        },
        "src/js/streams/size_buffered_stream.js": {
            "name": "src/js/streams/size_buffered_stream.js",
            "modules": {},
            "classes": {
                "ProAct.SizeBufferedStream": 1
            },
            "fors": {
                "ProAct.SizeBufferedStream": 1,
                "ProAct.Stream": 1
            },
            "namespaces": {}
        },
        "src/js/streams/stream.js": {
            "name": "src/js/streams/stream.js",
            "modules": {
                "proact-streams": 1
            },
            "classes": {
                "ProAct.Stream": 1
            },
            "fors": {
                "ProAct.Stream": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {}
        },
        "src/js/streams/subscribable_stream.js": {
            "name": "src/js/streams/subscribable_stream.js",
            "modules": {},
            "classes": {
                "ProAct.SubscribableStream": 1
            },
            "fors": {
                "ProAct.SubscribableStream": 1
            },
            "namespaces": {}
        },
        "src/js/streams/throttling_stream.js": {
            "name": "src/js/streams/throttling_stream.js",
            "modules": {},
            "classes": {
                "ProAct.ThrottlingStream": 1
            },
            "fors": {
                "ProAct.ThrottlingStream": 1,
                "ProAct.Stream": 1
            },
            "namespaces": {}
        },
        "src/js/arrays/array.js": {
            "name": "src/js/arrays/array.js",
            "modules": {},
            "classes": {
                "ProAct.Array": 1,
                "ProAct.Array.Operations": 1
            },
            "fors": {
                "ProAct.Array.Operations": 1,
                "ProAct.Array": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {
                "ProAct.Array": 1
            }
        },
        "src/js/arrays/array_core.js": {
            "name": "src/js/arrays/array_core.js",
            "modules": {
                "proact-arrays": 1
            },
            "classes": {
                "ProAct.ArrayCore": 1
            },
            "fors": {
                "ProAct.ArrayCore": 1,
                "ProAct.Actor": 1
            },
            "namespaces": {}
        },
        "src/js/arrays/array_property.js": {
            "name": "src/js/arrays/array_property.js",
            "modules": {},
            "classes": {
                "ProAct.ArrayProperty": 1
            },
            "fors": {
                "ProAct.ArrayProperty": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.Property.Types": 1
            },
            "namespaces": {}
        },
        "src/js/arrays/array_utils.js": {
            "name": "src/js/arrays/array_utils.js",
            "modules": {},
            "classes": {
                "ProAct.ArrayUtils": 1
            },
            "fors": {},
            "namespaces": {
                "ProAct": 1
            }
        },
        "src/js/arrays/listeners.js": {
            "name": "src/js/arrays/listeners.js",
            "modules": {},
            "classes": {
                "ProAct.Array.Listeners": 1
            },
            "fors": {
                "ProAct.Array.Listeners": 1
            },
            "namespaces": {
                "ProAct.Array": 1
            }
        },
        "src/js/dsl/dsl.js": {
            "name": "src/js/dsl/dsl.js",
            "modules": {},
            "classes": {
                "ProAct.OpStore": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.ops": 1,
                "ProAct.DSL.predefined": 1,
                "ProAct.DSL.predefined.mapping": 1,
                "ProAct.DSL.predefined.filtering": 1,
                "ProAct.DSL.predefined.accumulation": 1
            },
            "fors": {
                "ProAct.OpStore.all": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.ops": 1,
                "ProAct.DSL.predefined.mapping": 1,
                "ProAct.DSL.predefined.filtering": 1,
                "ProAct.DSL.predefined.accumulation": 1
            },
            "namespaces": {
                "ProAct": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.predefined": 1
            }
        },
        "src/js/dsl/provider.js": {
            "name": "src/js/dsl/provider.js",
            "modules": {},
            "classes": {
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.FunctionProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1,
                "ProAct.Registry.Provider.types": 1,
                "ProAct.Registry.StreamProvider.types": 1,
                "ProAct.Registry.ProObjectProvider.types": 1
            },
            "fors": {
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.Provider.types": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.StreamProvider.types": 1,
                "ProAct.Registry.FunctionProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1,
                "ProAct.Registry.ProObjectProvider.types": 1,
                "ProAct": 1
            },
            "namespaces": {
                "ProAct.Registry": 1,
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1
            }
        },
        "src/js/dsl/registry.js": {
            "name": "src/js/dsl/registry.js",
            "modules": {
                "proact-dsl": 1
            },
            "classes": {
                "ProAct.Registry": 1
            },
            "fors": {
                "ProAct.Registry": 1,
                "ProAct.Actor": 1,
                "ProAct.ObjectCore": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "proact-flow": {
            "name": "proact-flow",
            "submodules": {},
            "classes": {
                "ProAct.Flow": 1,
                "ProAct.Queue": 1,
                "ProAct.Queues": 1
            },
            "fors": {
                "ProAct.Flow": 1,
                "ProAct": 1,
                "ProAct.Queue": 1,
                "ProAct.Queues": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "src/js/flow/queues.js",
            "line": 5,
            "description": "The `proact-flow` provides executing functions in the right order in time.\nFunction execution can be deferred, there are priorities and turns.",
            "itemtype": "main"
        },
        "proact-core": {
            "name": "proact-core",
            "submodules": {},
            "classes": {
                "ProAct": 1,
                "ProAct.Actor": 1,
                "ProAct.ActorUtil": 1,
                "ProAct.Core": 1,
                "ProAct.Event": 1,
                "ProAct.Event.Types": 1,
                "ProAct.ProbProvider": 1,
                "ProAct.States": 1,
                "ProAct.Utils": 1,
                "ProAct.Configuration": 1
            },
            "fors": {
                "ProAct.Actor": 1,
                "ProAct.Core": 1,
                "ProAct.Event": 1,
                "ProAct.ProbProvider": 1,
                "ProAct": 1,
                "ProAct.States": 1,
                "ProAct.Configuration": 1
            },
            "namespaces": {
                "ProAct": 1,
                "ProAct.Event": 1
            },
            "tag": "main",
            "file": "src/js/core/pro.js",
            "line": 493,
            "description": "The `proact-core` module provides base utilties and common functionality for all the other\nmodules of the lib.",
            "itemtype": "main"
        },
        "proact-properties": {
            "name": "proact-properties",
            "submodules": {},
            "classes": {
                "ProAct.AutoProperty": 1,
                "ProAct.ObjectCore": 1,
                "ProAct.ObjectProperty": 1,
                "ProAct.Property": 1,
                "ProAct.Property.Types": 1,
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1,
                "ProAct.ProxyProperty": 1,
                "ProAct.ValueEvent": 1
            },
            "fors": {
                "ProAct.AutoProperty": 1,
                "ProAct": 1,
                "ProAct.ObjectCore": 1,
                "ProAct.ObjectProperty": 1,
                "ProAct.Property.Types": 1,
                "ProAct.Property": 1,
                "ProAct.Actor": 1,
                "ProAct.PropertyProvider": 1,
                "ProAct.SimplePropertyProvider": 1,
                "ProAct.AutoPropertyProvider": 1,
                "ProAct.ObjectPropertyProvider": 1,
                "ProAct.ProxyPropertyProvider": 1,
                "ProAct.ProxyProperty": 1,
                "ProAct.ValueEvent": 1
            },
            "namespaces": {
                "ProAct.Property": 1
            },
            "tag": "main",
            "file": "src/js/properties/value_event.js",
            "line": 5,
            "description": "The `proact-properties` module provides stateful reactive values attached to normal JavaScript\nobject's fields.",
            "itemtype": "main"
        },
        "proact-streams": {
            "name": "proact-streams",
            "submodules": {},
            "classes": {
                "ProAct.BufferedStream": 1,
                "ProAct.DebouncingStream": 1,
                "ProAct.DelayedStream": 1,
                "ProAct.Stream": 1,
                "ProAct.SizeBufferedStream": 1,
                "ProAct.SubscribableStream": 1,
                "ProAct.ThrottlingStream": 1
            },
            "fors": {
                "ProAct.BufferedStream": 1,
                "ProAct.DebouncingStream": 1,
                "ProAct.DelayedStream": 1,
                "ProAct.Stream": 1,
                "ProAct": 1,
                "ProAct.SizeBufferedStream": 1,
                "ProAct.Actor": 1,
                "ProAct.SubscribableStream": 1,
                "ProAct.ThrottlingStream": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "src/js/streams/throttling_stream.js",
            "line": 5,
            "description": "The `proact-streams` module provides stateless streams to the ProAct.js API.\nFRP reactive streams.",
            "itemtype": "main"
        },
        "proact-arrays": {
            "name": "proact-arrays",
            "submodules": {},
            "classes": {
                "ProAct.Array": 1,
                "ProAct.Array.Operations": 1,
                "ProAct.ArrayCore": 1,
                "ProAct.ArrayProperty": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.ArrayUtils": 1,
                "ProAct.Array.Listeners": 1
            },
            "fors": {
                "ProAct.Array.Operations": 1,
                "ProAct.Array": 1,
                "ProAct.Actor": 1,
                "ProAct.ArrayCore": 1,
                "ProAct.ArrayProperty": 1,
                "ProAct.ArrayPropertyProvider": 1,
                "ProAct.Property.Types": 1,
                "ProAct.Array.Listeners": 1
            },
            "namespaces": {
                "ProAct.Array": 1,
                "ProAct": 1
            },
            "tag": "main",
            "file": "src/js/arrays/listeners.js",
            "line": 5,
            "description": "The `proact-arrays` module provides reactive arrays.\nAll the modification operations over arrays, like `push` for example could be listened to.",
            "itemtype": "main"
        },
        "proact-dsl": {
            "name": "proact-dsl",
            "submodules": {},
            "classes": {
                "ProAct.OpStore": 1,
                "ProAct.OpStore.all": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.ops": 1,
                "ProAct.DSL.predefined": 1,
                "ProAct.DSL.predefined.mapping": 1,
                "ProAct.DSL.predefined.filtering": 1,
                "ProAct.DSL.predefined.accumulation": 1,
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.FunctionProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1,
                "ProAct.Registry.Provider.types": 1,
                "ProAct.Registry.StreamProvider.types": 1,
                "ProAct.Registry.ProObjectProvider.types": 1,
                "ProAct.Registry": 1
            },
            "fors": {
                "ProAct.OpStore.all": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.ops": 1,
                "ProAct.DSL.predefined.mapping": 1,
                "ProAct.DSL.predefined.filtering": 1,
                "ProAct.DSL.predefined.accumulation": 1,
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.Provider.types": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.StreamProvider.types": 1,
                "ProAct.Registry.FunctionProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1,
                "ProAct.Registry.ProObjectProvider.types": 1,
                "ProAct": 1,
                "ProAct.Registry": 1,
                "ProAct.Actor": 1,
                "ProAct.ObjectCore": 1
            },
            "namespaces": {
                "ProAct": 1,
                "ProAct.DSL": 1,
                "ProAct.DSL.predefined": 1,
                "ProAct.Registry": 1,
                "ProAct.Registry.Provider": 1,
                "ProAct.Registry.StreamProvider": 1,
                "ProAct.Registry.ProObjectProvider": 1
            },
            "tag": "main",
            "file": "src/js/dsl/registry.js",
            "line": 9,
            "description": "The `proact-dsl` module provides DSL for creating and managing different ProAct objects.",
            "itemtype": "main"
        }
    },
    "classes": {
        "ProAct.Flow": {
            "name": "ProAct.Flow",
            "shortname": "ProAct.Flow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-flow",
            "namespace": "",
            "file": "src/js/flow/flow.js",
            "line": 9,
            "description": "<p>\n Constructs the action flow of the ProAct.js; An action flow is a set of actions\n executed in the reactive environment, which order is determined by the dependencies\n between the reactive properties. The action flow puts on motion the data flow in the reactive\n ecosystem. Every change on a property triggers an action flow, which triggers the data flow.\n</p>\n ProAct.Flow is inspired by the Ember's Backburner.js (https://github.com/ebryn/backburner.js).\n The defferences are the priority queues and some other optimizations like the the 'once' argument of the {{#crossLink \"ProAct.Queue/go:method\"}}{{/crossLink}} method.\n It doesn't include debouncing and timed defer of actions for now.\n<p>\n ProAct.Flow is used to solve many of the problems in the reactive programming, for example the diamond problem.\n</p>\n<p>\n It can be used for other purposes too, for example to run rendering in a rendering queue, after all of the property updates.\n</p>\n<p>\n `ProAct.Flow`, {{#crossLink \"ProAct.Queues\"}}{{/crossLink}} and {{#crossLink \"ProAct.Queue\"}}{{/crossLink}} together form the `proact-flow` module of ProAct.\n</p>\n\nTODO ProAct.Flow#start and ProAct.Flow#stop are confusing names - should be renamed to something like 'init' and 'exec'.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueNames",
                    "description": "Array with the names of the sub-queues of the {{#crossLink \"ProAct.Queues\"}}{{/crossLink}}es of the flow. The size of this array determines\n     the number of the sub-queues.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Various options for the ProAct.Flow.\n   <p>Available options:</p>\n   <ul>\n     <li>start - A callback that will be called every time when the action flow starts.</li>\n     <li>stop - A callback that will be called every time when the action flow ends.</li>\n     <li>err - A callback that will be called if an error is thrown in the action flow.</li>\n     <li>flowInstance - Options object for the current flow instance. The flow instances are of the class {{#crossLink \"ProAct.Queues\"}}{{/crossLink}}.</li>\n   </ul>",
                    "type": "Object"
                }
            ]
        },
        "ProAct": {
            "name": "ProAct",
            "shortname": "ProAct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/pro.js",
            "line": 9,
            "description": "ProAct.js turns plain JavaScript objects into holders of reactive properties.\nYou can define the dependencies between these objects and properties using the 'vanilla' js syntax.\nFor example if an object should have a property 'x', that depends on its two fields 'a' and 'b', the only thing that's needed\nis to define a function 'x', that refers to 'this.a' and 'this.b'.\n\nSo ProAct.js can turn every vanilla JavaScript value to a set of reactive properties, and this generates a dependency graph between them.\nThe data flow in this oriented graph is determined by its edges. So if we should receive data from the outside of this dependency system we'll need\na powerful but easy to use tool to turn every user or server generated action into a data event, common to the graph.\n\nProAct.js can be used to define bindings, to separate views from models (mv*), for performance optimizations... It is a tool.\nA powerful tool for creating other, high level tools, or applications.\nEverything should be defined in this namespace. It can be used as P or Pro.\n\nProAct is powerful Functional Reactive Programming (FRP) lib too. Its streams and events\n\nare integrated with the reactive properties mentioned above.\nEverything can be described using declarative expressions.\nAll ProAct classes and functions are defined in this namespace.\nYou can use `Pro` and `P` instead of `ProAct` too.",
            "static": 1
        },
        "ProAct.Queue": {
            "name": "ProAct.Queue",
            "shortname": "ProAct.Queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-flow",
            "namespace": "",
            "file": "src/js/flow/queue.js",
            "line": 5,
            "description": "<p>\n  Creates a queue of actions or action queue.\n</p>\n<p>\n The idea of the action queues is to decide the order of the actions pushed into them.\n For example if an action should be executed only once, but is pushed for a second time,\n it is moved in the end of the queue and its parameters are updated.\n</p>\n<p>\n The ProAct.Queue is a priority queue, meaning every action has a numeric priority.\n The actions with the numerically lowest priority are with highes prority when executed.\n</p>\n<p>\n The {{#crossLink \"ProAct.Queue/go:method\"}}{{/crossLink}} method deques all the actions from the queue and executes them in the right\n order, using their priorities.\n</p>\n<p>\n A ProAct.Queue can be used to setup the action flow - the order of the actions must be executed.\n ProAct.js uses it to create an action flow if something changes.\n</p>\n\nTODO Default name should be extracted to a constant. ~meddle@2014-07-10",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the queue, every ProAct.Queue must have a name.\n   The default value of the name is 'proq'. {{#crossLink \"ProAct.Queues\"}}{{/crossLink}} uses the names to manage its queues.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Various options for the queue.\n   <p>Available options:</p>\n   <ul>\n     <li>before - A callback called before each call of {{#crossLink \"ProAct.Queue/go:method\"}}{{/crossLink}}.</li>\n     <li>after - A callback called after each call of {{#crossLink \"ProAct.Queue/go:method\"}}{{/crossLink}}.</li>\n     <li>err - A callback called every time an error is thrown.</li>\n   </ul>",
                    "type": "Object"
                }
            ]
        },
        "ProAct.Queues": {
            "name": "ProAct.Queues",
            "shortname": "ProAct.Queues",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-flow",
            "namespace": "",
            "file": "src/js/flow/queues.js",
            "line": 5,
            "description": "<p>\n Creates a queue of {{#crossLink \"ProAct.Queue\"}}{{/crossLink}}s. The order of these sub-queues is used\n to determine the order in which they will be dequed.\n</p>\n<p>\n The idea of this class is to have different queues for the different layers\n of an application. That way lower level actions will always execuded before higher level.\n</p>\n<p>\n If a higher level queue enques actions in lower level one, the action flow returns stops and returns\n from the lower level one.\n</p>\n<p>\n The {{#crossLink \"ProAct.Queues/go:method\"}}{{/crossLink}} method deques all the actions from all the queues and executes them in the right\n order, using their priorities and queue order.\n</p>\n<p>\n A `ProAct.Queues` can be used to setup very complex the action flow.\n ProAct.js uses it with only one queue - 'proq' to create an action flow if something changes.\n</p>\n\nTODO We need to pass before, after and error callbacks here too. ~meddle@2014-07-10",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueNames",
                    "description": "Array with the names of the sub-queues. The size of this array determines\n     the number of the sub-queues.",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Various options for the ProAct.Queues.\n   <p>Available options:</p>\n   <ul>\n     <li>queue - An options object containing options to be passed to all the sub-queues. For more information see {{#crossLink \"ProAct.Queue\"}}{{/crossLink}}.</li>\n   </ul>",
                    "type": "Object"
                }
            ]
        },
        "ProAct.Actor": {
            "name": "ProAct.Actor",
            "shortname": "ProAct.Actor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/actor.js",
            "line": 5,
            "description": "<p>\n `ProAct.Actor` is the basic observer-observable functionallity in ProAct.js\n</p>\n<p>\n The actors in ProAct.js form the dependency graph.\n If some actor listens to changes from another - it depends on it.\n</p>\n<p>\n The actors can transform the values or events incoming to them.\n</p>\n<p>\n Every actor can have a parent actor, that will be notified for all the changes\n on the child-actor, it is something as special observer.\n</p>\n<p>\n ProAct.Actor is part of the core module of ProAct.js.\n   System.out.println();\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>transforms</i>.\n     </p>",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "ProAct.ActorUtil": {
            "name": "ProAct.ActorUtil",
            "shortname": "ProAct.ActorUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "ProAct.Actor"
            ],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/actor_util.js",
            "line": 6,
            "description": "ActorUtil provides methods that can be used to make the Actor to 'act'.\nThe Actor is ProAct.js version of the base `Observable` object. Various types\nof listeners can be attached to it and used to observe its `actions`.\n\nOn the other hand the `Actor` should do something or `act`, because something\nhas to be observed after all.\n\nThe `ActorUtil` contains a set of methods that help implementing these `acts`.\n\nFor example the we can trigger events/values in the `Streams`. This is thier `act`.\nThis triggering can be implemented with ease using the methods defined in `ActorUtil`.\n\nAnother example is `Properties` - they can be set or updated by the reactive flow -> they should react.\n\nSo `ActorUtil` provides the `Actors` with helpful methods for `acting` and `reacting`.\n\nAll these methods use the {{#crossLink \"ProAct.Flow\"}}{{/crossLink}} to defer the changes the right way.\nAnd the using the `flow` these methods handle the dependencies between the `Actors`.\n\nUse the methods in the `ActorUtil` to implement your `Actor's` `actions` and `reactions`.",
            "access": "private",
            "tagname": "",
            "static": 1
        },
        "ProAct.Core": {
            "name": "ProAct.Core",
            "shortname": "ProAct.Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/core.js",
            "line": 5,
            "description": "<p>\n Constructs a ProAct.Core. The core is an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} which can be used to manage other {@link ProAct.Actor} objects or groups many ProAct.Actor objects.\n</p>\n<p>\n For example a shell can be a plain old JavaScript object; The core will be in charge of creating dynamic properties for every field of the shell.\n</p>\n<p>\n The idea of the core is to inject observer-observable capabilities in normal objects, or just group many observables.\n</p>\n<p>\n `ProAct.Core` is an abstract class, that has a {{#crossLink \"ProAct.States\"}}{{/crossLink}} state. Its initializing logic should be implemented in an extender.\n</p>\n<p>\n ProAct.Core is used as a parent for the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s it manages, so it can be passed as a listener object - defines a <i>call method</i>.\n</p>\n<p>\n ProAct.Core is part of the core module of ProAct.js.\n</p>\n\nTODO Maybe should be renamed to something else? For example ActorGroup or ActorTroupe, or maybe ActorManager :).",
            "extends": "ProAct.Actor",
            "params": [
                {
                    "name": "shell",
                    "description": "The shell arrounf this core. This ProAct.Core manages observer-observable behavior for this <i>shell</i> object.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data to be used to define the observer-observable behavior of the <i>shell</i>.",
                    "type": "Object"
                }
            ]
        },
        "ProAct.Event": {
            "name": "ProAct.Event",
            "shortname": "ProAct.Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct.Event",
            "file": "src/js/core/event.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.Event`. The event contains information of the update.\n</p>\n<p>\n `ProAct.Event` is part of the core module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the event",
                    "type": "ProAct.Event.Types"
                },
                {
                    "name": "...",
                    "description": "args\n     Arguments of the event, for example for value event, these are the old value and the new value.",
                    "optional": true
                }
            ]
        },
        "ProAct.Event.Types": {
            "name": "ProAct.Event.Types",
            "shortname": "ProAct.Event.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct.Event",
            "file": "src/js/core/event.js",
            "line": 160,
            "description": "Defines the possible types of the ProAct.Events.",
            "static": 1
        },
        "ProAct.ProbProvider": {
            "name": "ProAct.ProbProvider",
            "shortname": "ProAct.ProbProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "",
            "file": "src/js/core/functions.js",
            "line": 5,
            "description": "A `ProbProvider` provides a way for creating a ProAct implementation,\nusing raw data.\n\nFor example such a provider can provide a way to create an\n{{#crossLink \"ProAct.Actor\"}}{{/crossLink}} from a plain JavaScript object.",
            "is_constructor": 1
        },
        "ProAct.States": {
            "name": "ProAct.States",
            "shortname": "ProAct.States",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 75,
            "description": "Defines the possible states of the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} instances.",
            "static": 1
        },
        "ProAct.Utils": {
            "name": "ProAct.Utils",
            "shortname": "ProAct.Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 156,
            "description": "Contains a set of utility functions to ease working with arrays and objects.\nCan be reffered by using `ProAct.U` too.\n\nThis class is part of the `proact-core` module of ProAct.js.",
            "static": 1
        },
        "ProAct.Configuration": {
            "name": "ProAct.Configuration",
            "shortname": "ProAct.Configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-core",
            "namespace": "ProAct",
            "file": "src/js/core/pro.js",
            "line": 493,
            "description": "Contains various configuration settings for the ProAct.js library.",
            "static": 1
        },
        "ProAct.AutoProperty": {
            "name": "ProAct.AutoProperty",
            "shortname": "ProAct.AutoProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/auto_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.AutoProperty`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state.\n The auto-computed or functional property has a state of a function return value.\n</p>\n<p>\n Auto-computed properties are functions which are turned\n to {{#crossLink \"ProAct.Property\"}}{{/crossLink}}s by a {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}}.\n</p>\n<p>\n If these functions are reading another fields of ProAct.js objects,\n they authomatically become dependent on them.\n</p>\n<p>\n For example:\n <pre>\n   var obj = {\n     a: 1,\n     b: 2,\n     c: function () {\n       return this.a - this.b;\n     }\n   };\n </pre>\n If this object - <i>obj</i> is turned to a reactive ProAct.js object,\n it becomes a simple object with three fields:\n <pre>\n   {\n     a: 1,\n     b: 2,\n     c: -1\n   }\n </pre>\n But now <i>c</i> is dependent on <i>a</i> and <i>b</i>,\n so if <i>a</i> is set to <b>4</b>, <i>obj</i> becomes:\n <pre>\n   {\n     a: 1,\n     b: 2,\n     c: 2\n   }\n </pre>\n</p>\n<p>\n The logic is the following:\n <ul>\n   <li>The property is initialized to be lazy, so its state is {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}</li>\n   <li>\n     On its first read, the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is set to the listener of the property,\n     so all the properties read in the function body become observed by it.\n     The value of the property is computed using the original function of the field.\n   </li>\n   <li>On this first read the state of the property is updated to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.</li>\n   <li>On its following reads it is a simple value, computed from the first read. No re-computations on get.</li>\n   <li>If a property, this auto-computed property depends changes, the value of <i>this</i> ProAct.AutoProperty is recomputed.</li>\n   <li>Setting the property can be implemented easy, because on set, the original function of the property is called with the new value.</li>\n </ul>\n</p>\n<p>\n `ProAct.AutoProperty` can be dependant on another `ProAct.AutoProperty`.\n</p>\n<p>\n `ProAct.AutoProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.ObjectCore": {
            "name": "ProAct.ObjectCore",
            "shortname": "ProAct.ObjectCore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/object_core.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ObjectCore`.\n `ProAct.ObjectCore` is a {{#crossLink \"ProAct.Core\"}}{{/crossLink}} that manages all the\n {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for a reactive ProAct.js object.\n</p>\n<p>\n It is responsible for all the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances as well as\n initializing them and deciding which type of property corresponds to which field.\n</p>\n<p>\n `ProAct.ObjectCore` is part of the proact-properties module of ProAct.js.\n</p>\n\n```\n \n var object = {\n   a: 4,\n   b: 5,\n   c: function () {\n     return this.a + this.b;\n   }\n };\n var core = new ProAct.ObjectCore(object);\n\n console.log(object.c); // 9\n\n object.a = 1;\n console.log(object.c); // 6\n\n console.log(core.value('c')); // 6\n\n core.set('b', 2));\n console.log(object.b); // 2\n console.log(object.c); // 3\n```",
            "extends": "ProAct.Core",
            "is_constructor": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The shell objec arround this core. This should be plain JavaScript object.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data to be used to define the observer-observable behavior of the <i>object</i>.\n     For example transformations for its properties.",
                    "type": "Object"
                }
            ]
        },
        "ProAct.ObjectProperty": {
            "name": "ProAct.ObjectProperty",
            "shortname": "ProAct.ObjectProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/object_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ObjectProperty`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state. The object property\n has a state of a JavaScript object value.\n</p>\n<p>\n The value of `ProAct.ObjectProperty` is object, turned to reactive ProAct.js object recursively.\n</p>\n<p>\n On changing the object value to another object the listeners for fields with the same name in the objects,\n are moved from the old value's fields to the new value's fields.\n</p>\n<p>\n If set to null or undefined, the property is re-defined, using {{#crossLink \"ProAct.Property/reProb:method\"}}{{/crossLink}}\n</p>\n<p>\n `ProAct.ObjectProperty` is lazy - its object is made reactive on the first read of the property.\n Its state is set to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} on the first read too.\n</p>\n<p>\n `ProAct.ObjectProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.Property": {
            "name": "ProAct.Property",
            "shortname": "ProAct.Property",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property.js",
            "line": 9,
            "description": "<p>\n Constructs a `ProAct.Property`.\n The properties are simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s with state.\n The basic property has a state of a simple value - number/string/boolean.\n</p>\n<p>\n Every property could represent a field in a plain JavaScript object.\n It makes it reactive, on reading the property value,\n if {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is set,\n it is added as a listener to the property changes.\n</p>\n<p>\n Every property has a type. The default property has a type of a simple value.\n</p>\n<p>\n All the properties of an object are managed by its {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}},\n which is set to a hidden field of the object - '__pro__'.\n</p>\n<p>\n When created every property is in {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}, state,\n when it is functional, the state is changed to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n If the property is not in {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} state, it is not useable.\n</p>\n<p>\n {{#crossLink \"ProAct.Actor/init:method\"}}{{/crossLink}} is called by this constructor for the property initialization.\n It should initialize the property and set its state to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n</p>\n<p>\n ProAct.Property is part of the `proact-properties` module of `ProAct.js`.\n</p>\n\nExamples:\n```\n var property = new Property({v: 5}, 'v');\n property.get(); // This is 5\n property.set(4);\n property.get(); // This is 4\n```",
            "extends": "ProAct.Actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                },
                {
                    "name": "getter",
                    "description": "An optional getter to be used when the property is read.\n     If this parameter is empty, a new {{#crossLink \"ProAct.Property/defaultGetter:method\"}}{{/crossLink}} is build for <i>this</i>.",
                    "type": "Function"
                },
                {
                    "name": "setter",
                    "description": "An optional setter to be used when the property is written.\n     If this parameter is empty, a new {{#crossLink \"ProAct.Property/defaultSetter:method\"}}{{/crossLink}} is build for <i>this</i>.",
                    "type": "Function"
                }
            ]
        },
        "ProAct.Property.Types": {
            "name": "ProAct.Property.Types",
            "shortname": "ProAct.Property.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "ProAct.Property",
            "file": "src/js/properties/property.js",
            "line": 115,
            "description": "Defines the possible types of the `ProAct.Property`.",
            "static": 1
        },
        "ProAct.PropertyProvider": {
            "name": "ProAct.PropertyProvider",
            "shortname": "ProAct.PropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 5,
            "description": "<p>\n The `ProAct.PropertyProvider` is an abstract class.\n</p>\n<p>\n Many providers can be registered for many kinds of properties.\n</p>\n<p>\n When a ProAct.js object is initialized its fields are turned into properties.\n Depending on the type and the name of the field, as well as meta information the valid\n type of {{#crossLink \"ProAct.Property\"}}{{/crossLink}} is created and used.\n The `PropertyProviders` have 'filter' method and depending on it the valid kind is decided.\n</p>\n<p>\n ProAct.PropertyProvider is part of the proact-properties module of ProAct.js.\n</p>",
            "is_constructor": 1
        },
        "ProAct.SimplePropertyProvider": {
            "name": "ProAct.SimplePropertyProvider",
            "shortname": "ProAct.SimplePropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 241,
            "description": "<p>\n Constructor for `ProAct.SimplePropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for fields of simple types - strings, numbers, booleans.\n</p>\n<p>\n `ProAct.SimplePropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.AutoPropertyProvider": {
            "name": "ProAct.AutoPropertyProvider",
            "shortname": "ProAct.AutoPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 318,
            "description": "<p>\n Constructor for `ProAct.AutoPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instances for fields pointing to functions.\n</p>\n<p>\n `ProAct.AutoPropertyProvider` is part of the `proact-properties` module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ObjectPropertyProvider": {
            "name": "ProAct.ObjectPropertyProvider",
            "shortname": "ProAct.ObjectPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 394,
            "description": "<p>\n Constructor for ProAct.ObjectPropertyProvider.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instances for fields pointing to objects, different from arrays or functions.\n</p>\n<p>\n `ProAct.ObjectPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ProxyPropertyProvider": {
            "name": "ProAct.ProxyPropertyProvider",
            "shortname": "ProAct.ProxyPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/property_provider.js",
            "line": 470,
            "description": "<p>\n Constructor for `ProAct.ProxyPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instances for fields that should point to properties.\n</p>\n<p>\n `ProAct.ProxyPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1
        },
        "ProAct.ProxyProperty": {
            "name": "ProAct.ProxyProperty",
            "shortname": "ProAct.ProxyProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/proxy_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ProxyProperty`. This is a property, pointing to another {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n</p>\n<p>\n The value of `ProAct.ProxyProperty` is the value of its target, if the target is updated, the proxy is updated.\n</p>\n<p>\n By setting the value of the proxy, the value of the target is updated, the proxy doesn't have its own value, it uses\n the value of the target.\n</p>\n<p>\n `ProAct.ProxyProperty` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {@link ProAct.flow} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, that will provide the value of the new `ProAct.ProxyProperty`.",
                    "type": "ProAct.Property"
                }
            ]
        },
        "ProAct.ValueEvent": {
            "name": "ProAct.ValueEvent",
            "shortname": "ProAct.ValueEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-properties",
            "namespace": "",
            "file": "src/js/properties/value_event.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ValueEvent`. The value event contains information of a value property update.\n</p>",
            "extends": "ProAct.Event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event. In most cases this should be instance of a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}",
                    "type": "Object"
                }
            ]
        },
        "ProAct.BufferedStream": {
            "name": "ProAct.BufferedStream",
            "shortname": "ProAct.BufferedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/buffered_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.BufferedStream`. This is a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with a buffer.\n</p>\n<p>\n On new value/event the listeners are not updated, but the value/event is stored in the buffer.\n</p>\n\n`ProAct.BufferedStream` is an abstract class.\n<p>\n When the buffer is flushed every value/event is emitted to the listeners. In case with property listeners\n they are updated only once with the last event/value. Good for performance optimizations.\n</p>\n<p>\n For example if it is set to stream mouse move events, we don't care for each of the event but for a portion of them.\n</p>\n<p>\n `ProAct.BufferedStream` is part of the `proact-streams` module of ProAct.js.\n</p>",
            "extends": "ProAct.Stream",
            "is_constructor": 1,
            "abstract": "",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array"
                }
            ]
        },
        "ProAct.DebouncingStream": {
            "name": "ProAct.DebouncingStream",
            "shortname": "ProAct.DebouncingStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/debouncing_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.DebouncingStream`. It is a {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}} that resets its flushing interval on every new value/event.\n Only the last event/value triggered in given interval will be emitted.\n</p>\n<p>\n `ProAct.DebouncingStream` is part of the proact-streams module of ProAct.js.\n</p>",
            "extends": "ProAct.DelayedStream",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        },
        "ProAct.DelayedStream": {
            "name": "ProAct.DelayedStream",
            "shortname": "ProAct.DelayedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/delayed_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.DelayedStream`. When a given time interval passes the buffer of the stream is flushed authomatically.\n</p>\n<p>\n `ProAct.DelayedStream` is part of the streams module of ProAct.js.\n</p>",
            "extends": "ProAct.BufferedStream",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        },
        "ProAct.Stream": {
            "name": "ProAct.Stream",
            "shortname": "ProAct.Stream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/stream.js",
            "line": 59,
            "description": "<p>\n Constructs a `ProAct.Stream`.\n The stream is a simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}, without state.\n</p>\n<p>\n The streams are ment to emit values, events, changes and can be plugged into other `Actors`.\n For example it is possible to connect multiple streams, to merge them and to separate them,\n to plug them into properties.\n</p>\n<p>\n The reactive environment consists of the properties and the objects containing them, but\n the outside world is not reactive. It is possible to use the `ProAct.Streams` as connections from the\n outside world to the reactive environment.\n</p>\n<p>\n   The transformations can be used to change the events or values emitetted.\n</p>\n<p>\n `ProAct.Stream` is part of the proact-streams module of ProAct.js.\n</p>",
            "extends": "ProAct.Actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array"
                }
            ]
        },
        "ProAct.SizeBufferedStream": {
            "name": "ProAct.SizeBufferedStream",
            "shortname": "ProAct.SizeBufferedStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.SizeBufferedStream`. When the buffer is full (has the same size as <i>this</i> size), it is flushed.\n</p>\n<p>\n `ProAct.SizeBufferedStream` is part of the `proact-streams` module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "extends": "ProAct.BufferedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "size",
                    "description": "The size of the buffer.",
                    "type": "Number"
                }
            ],
            "throws": {
                "description": "SizeBufferedStream must contain size, if there is no size passed to it.",
                "type": "Error"
            }
        },
        "ProAct.SubscribableStream": {
            "name": "ProAct.SubscribableStream",
            "shortname": "ProAct.SubscribableStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/subscribable_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.SubscribableStream`. This is a `Stream` that has a custom `subscribe` function, used to subscribe to a source.\n</p>\n\nThis can be used to stream sources like browser events. The stream is lazy, when there are no listeners to it,\nit is not subscribed to the source, on the first listener it is subscribed, when every listener is unsubscibed, it is unsubscribed.\n\n<p>\n `ProAct.SubscribableStream` is part of the `proact-streams` module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "extends": "ProAct.Stream",
            "params": [
                {
                    "name": "subscribe",
                    "description": "A function used to subscribe to a source, when the first listener to this stream is attached.",
                    "type": "Function"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the size of the buffer.\n     </p>",
                    "type": "Array"
                }
            ]
        },
        "ProAct.ThrottlingStream": {
            "name": "ProAct.ThrottlingStream",
            "shortname": "ProAct.ThrottlingStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-streams",
            "namespace": "",
            "file": "src/js/streams/throttling_stream.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ThrottlingStream`. This is special kind of {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}}.\n</p>\n<p>\n The main idea is the following : if <i>n</i> values/events are triggered to this stream before the time delay for\n flushing passes, only the last one, the <i>n</i>-th is emitted.\n</p>\n<p>\n `ProAct.ThrottlingStream` is part of the `proact-streams` module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "extends": "ProAct.DelayedStream",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.\n     <p>\n       If this is the only one passed argument and it is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "transforms",
                    "description": "A list of transformation to be used on all incoming chages.\n     <p>\n       If the arguments passed are two and this is a number - it becomes the delay of the stream.\n     </p>",
                    "type": "Array"
                },
                {
                    "name": "delay",
                    "description": "The time delay to be used to flush the stream.",
                    "type": "Number"
                }
            ]
        },
        "ProAct.Array": {
            "name": "ProAct.Array",
            "shortname": "ProAct.Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "",
            "file": "src/js/arrays/array.js",
            "line": 5,
            "description": "Creates a wrapper around a plain JavaScript array that is capable of tracking changes on the array and notifying listeners.\n<p>\n It has a {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}} which it uses to observe the array for changes or to update the array on changes.\n</p>\n<p>\n `ProAct.Array` is array-like object, it has all the methods defined in the JavaScript Array class, length property and indices.\n</p>\n<p>\n `ProAct.Array` is part of the `proact-arrays` module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "extends": "Array",
            "params": [
                {
                    "name": "...",
                    "description": "I can take an array as a parameter and it becomes reactive wrapper around it.\n     It can take a list of arguments which become the wrapped array.\n     If nothing is passed it becomes wrapper arround an empty array.",
                    "optional": true
                }
            ]
        },
        "ProAct.Array.Operations": {
            "name": "ProAct.Array.Operations",
            "shortname": "ProAct.Array.Operations",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "ProAct.Array",
            "file": "src/js/arrays/array.js",
            "line": 50,
            "description": "Defines a set of the possible operations over an array.",
            "static": 1
        },
        "ProAct.ArrayCore": {
            "name": "ProAct.ArrayCore",
            "shortname": "ProAct.ArrayCore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "",
            "file": "src/js/arrays/array_core.js",
            "line": 10,
            "description": "<p>\n Constructs a `ProAct.ArrayCore`. `ProAct.ArrayCore` is a {{#crossLink \"ProAct.Core\"}}{{/crossLink}} that manages all the updates/listeners for an `ProAct.Array`.\n</p>\n<p>\n It is responsible for updating length or index listeners and adding the right ones on read.\n</p>\n<p>\n `ProAct.ArrayCore` is part of the `proact-arrays` module of ProAct.js.\n</p>",
            "is_constructor": 1,
            "extends": "ProAct.Core",
            "params": [
                {
                    "name": "array",
                    "description": "The shell {{#crossLink \"ProAct.Array\"}}{{/crossLink}} arround this core.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data to be used to define the observer-observable behavior of the <i>array</i>.",
                    "type": "Object"
                }
            ]
        },
        "ProAct.ArrayProperty": {
            "name": "ProAct.ArrayProperty",
            "shortname": "ProAct.ArrayProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "",
            "file": "src/js/arrays/array_property.js",
            "line": 5,
            "description": "<p>\n Constructs a `ProAct.ArrayProperty`.\n A property is a simple {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} with state.\n</p>\n<p>\n The value of `ProAct.ArrayProperty` is an array, turned to reactive ProAct.js array -\n {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.\n</p>\n<p>\n On changing the array value to another array the listeners for indices/length are moved from the old value to the new value.\n</p>\n<p>\n If set to null or undefined, the property is re-defined, using\n {{#crossLink \"ProAct.Property/reProb:method\"}}{{/crossLink}}.\n</p>\n<p>\n `ProAct.ArrayProperty` is lazy - its object is made reactive on the first read of the property.\n Its state is set to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}} on the first read too.\n</p>\n<p>\n `ProAct.ArrayProperty` is part of the proact-arrays module of ProAct.js.\n</p>",
            "extends": "ProAct.Property",
            "is_constructor": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>proObject</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "proObject",
                    "description": "A plain JavaScript object, holding a field, this property will represent.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The name of the field of the object, this property should represent.",
                    "type": "String"
                }
            ]
        },
        "ProAct.ArrayPropertyProvider": {
            "name": "ProAct.ArrayPropertyProvider",
            "shortname": "ProAct.ArrayPropertyProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": ""
        },
        "ProAct.ArrayUtils": {
            "name": "ProAct.ArrayUtils",
            "shortname": "ProAct.ArrayUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "ProAct",
            "file": "src/js/arrays/array_utils.js",
            "line": 1,
            "description": "Contains a set of utility functions to ease working with {{#crossLink \"ProAct.Array\"}}{{/crossLink}}s.\nCan be reffered by using `ProAct.AU` too.\n\nThis class is part of the `proact-arrays` module of ProAct.js.",
            "static": 1
        },
        "ProAct.Array.Listeners": {
            "name": "ProAct.Array.Listeners",
            "shortname": "ProAct.Array.Listeners",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-arrays",
            "namespace": "ProAct.Array",
            "file": "src/js/arrays/listeners.js",
            "line": 5,
            "description": "Defines a set of special listeners used to trak {{#crossLink \"ProAct.Array\"}}{{/crossLink}} changes and updating dependent {{#crossLink \"ProAct.Array\"}}{{/crossLink}}s in an optimal way.",
            "static": 1
        },
        "ProAct.OpStore": {
            "name": "ProAct.OpStore",
            "shortname": "ProAct.OpStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct",
            "file": "src/js/dsl/dsl.js",
            "line": 5,
            "description": "Contains {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} operation logic definitions.\n<p>\n Every operation has\n <ol>\n   <li><b>sym</b> - A symbol used to identify the right operation in a DSL string or object.</li>\n   <li><b>match method</b> - A method used for identifying the operation, usually it uses the <i>sym</i></li>\n   <li>\n     <b>toOptions</b> - A method which is able to turn a DSL string with the operation,\n     into an actual array of options containing all the functions to be executed by the DSL and their arguments.\n   </li>\n   <li><b>action</b> - The operation logic. The options object of the above method should be passed to it, as well as the targed on which the DSL should be run.</li>\n </ol>\n</p>",
            "static": 1
        },
        "ProAct.OpStore.all": {
            "name": "ProAct.OpStore.all",
            "shortname": "ProAct.OpStore.all",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct"
        },
        "ProAct.DSL": {
            "name": "ProAct.DSL",
            "shortname": "ProAct.DSL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL",
            "file": "src/js/dsl/dsl.js",
            "line": 156,
            "description": "Contains implementation of the `ProAct.js DSL`.\n<p>\n The idea of the DSL is to define {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s and their dependencies on each other in a declarative and simple way.\n</p>\n<p>\n The {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} is used to store these actors.\n</p>\n<p>\n For example if we want to have a stream configured to write in a property, it is very easy done using the DSL:\n <pre>\n   ProAct.registry.prob('val', 0, '<<(s:data)');\n </pre>\n This tells the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} to create a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} with the value of zero, and to point the previously,\n stored 'data' stream to it.\n</p>",
            "static": 1
        },
        "ProAct.DSL.ops": {
            "name": "ProAct.DSL.ops",
            "shortname": "ProAct.DSL.ops",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL",
            "file": "src/js/dsl/dsl.js",
            "line": 189,
            "description": "The operation definitions of the DSL.\n<p>\n All of the available and executable operations defined in the ProAct.DSL.\n</p>\n<p>\n Users of ProAct.js can add their own operation to it.\n <pre>\n   ProAct.DSL.ops.myOp = ProAct.OpStore.all.simpleOp('foo', 'foo');\n </pre>\n</p>",
            "static": 1
        },
        "ProAct.DSL.predefined": {
            "name": "ProAct.DSL.predefined",
            "shortname": "ProAct.DSL.predefined",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL",
            "file": "src/js/dsl/dsl.js",
            "line": 350,
            "description": "A set of predefined operations to be used by the DSL.",
            "static": 1
        },
        "ProAct.DSL.predefined.mapping": {
            "name": "ProAct.DSL.predefined.mapping",
            "shortname": "ProAct.DSL.predefined.mapping",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined",
            "file": "src/js/dsl/dsl.js",
            "line": 359,
            "description": "A set of predefined mapping operations to be used by the DSL.",
            "static": 1
        },
        "ProAct.DSL.predefined.filtering": {
            "name": "ProAct.DSL.predefined.filtering",
            "shortname": "ProAct.DSL.predefined.filtering",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined",
            "file": "src/js/dsl/dsl.js",
            "line": 618,
            "description": "A set of predefined filtering operations to be used by the DSL.",
            "static": 1
        },
        "ProAct.DSL.predefined.accumulation": {
            "name": "ProAct.DSL.predefined.accumulation",
            "shortname": "ProAct.DSL.predefined.accumulation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined",
            "file": "src/js/dsl/dsl.js",
            "line": 804,
            "description": "A set of predefined accumulation operations to be used by the DSL.",
            "static": 1
        },
        "ProAct.Registry.Provider": {
            "name": "ProAct.Registry.Provider",
            "shortname": "ProAct.Registry.Provider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.Provider",
            "file": "src/js/dsl/provider.js",
            "line": 29,
            "description": "Constructs a `ProAct.Registry.Provider`.\nThe {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} uses registered providers as storage for different objects.\n<p>\n Every provider has one or more namespaces in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} it is registered to.\n</p>\n<p>\n Every provider knows how to store its type of obects, how to make them, or delete them.\n</p>",
            "is_constructor": 1,
            "static": 1
        },
        "ProAct.Registry.StreamProvider": {
            "name": "ProAct.Registry.StreamProvider",
            "shortname": "ProAct.Registry.StreamProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider",
            "file": "src/js/dsl/provider.js",
            "line": 46,
            "description": "Constructs a `ProAct.Registry.StreamProvider`. The {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} uses registered stream providers as storage for {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}s.",
            "is_constructor": 1,
            "extends": "ProAct.Registry.Provider",
            "static": 1
        },
        "ProAct.Registry.FunctionProvider": {
            "name": "ProAct.Registry.FunctionProvider",
            "shortname": "ProAct.Registry.FunctionProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry",
            "file": "src/js/dsl/provider.js",
            "line": 57,
            "description": "Constructs a `ProAct.Registry.FunctionProvider`.\nThe {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} uses registered function providers as storage for Functions.\n<p>\n The function provider doesn't have implementation for creation of new functions, only for storing, readin and removing them.\n</p>",
            "is_constructor": 1,
            "extends": "ProAct.Registry.Provider",
            "static": 1
        },
        "ProAct.Registry.ProObjectProvider": {
            "name": "ProAct.Registry.ProObjectProvider",
            "shortname": "ProAct.Registry.ProObjectProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.ProObjectProvider",
            "file": "src/js/dsl/provider.js",
            "line": 72,
            "description": "Constructs a `ProAct.Registry.ProObjectProvider`.\nThe {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} uses registered function providers as storage for objects with reactive {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances.",
            "is_constructor": 1,
            "extends": "ProAct.Registry.Provider",
            "static": 1
        },
        "ProAct.Registry.Provider.types": {
            "name": "ProAct.Registry.Provider.types",
            "shortname": "ProAct.Registry.Provider.types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.Provider",
            "file": "src/js/dsl/provider.js",
            "line": 179,
            "description": "An object containing all the available sub-types constructions of the managed by <i>this</i> class.\n<p>\n Should always have a 'basic' field for the default construction operation.\n</p>",
            "static": 1
        },
        "ProAct.Registry.StreamProvider.types": {
            "name": "ProAct.Registry.StreamProvider.types",
            "shortname": "ProAct.Registry.StreamProvider.types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider",
            "file": "src/js/dsl/provider.js",
            "line": 283,
            "description": "An object containing all the available sub-types constructions of the managed by <i>this</i> class.",
            "type": "Object",
            "itemtype": "property"
        },
        "ProAct.Registry.ProObjectProvider.types": {
            "name": "ProAct.Registry.ProObjectProvider.types",
            "shortname": "ProAct.Registry.ProObjectProvider.types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.ProObjectProvider",
            "file": "src/js/dsl/provider.js",
            "line": 537,
            "description": "An object containing all the available sub-types constructions of the managed by <i>this</i> class.",
            "type": "Object",
            "itemtype": "property"
        },
        "ProAct.Registry": {
            "name": "ProAct.Registry",
            "shortname": "ProAct.Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "proact-dsl",
            "namespace": "",
            "file": "src/js/dsl/registry.js",
            "line": 9,
            "description": "<p>\n Constructs a `ProAct.Registry`.\n It is used to store/create objects that can be referenced or configured using the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}}.\n</p>\n<p>\n `ProAct.Registry` is part of the `proact-dsl` module of ProAct.js.\n</p>",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/js/flow/flow.js",
            "line": 70,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Flow",
            "final": 1,
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 80,
            "description": "Puts the `ProAct.Flow` in running mode, meaning actions can be defered in it.\n<p>\n It creates a new flow instance - instance of {{#crossLink \"ProAct.Queues\"}}{{/crossLink}} and\n if there was a running instance, it is set to be the previous inctance.\n</p>\n<p>\n If a <i>start</i> callback was passed when this `ProAct.Flow` was being created,\n it is called with the new flow instance.\n</p>\n<p>\n `begin` is alias of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "start",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 115,
            "description": "Appends a new queue name to the list of <i>this</i>' queues.\n<p>\n When a new <i>flowInstance</i> is created the updated list will be used.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "addQueue",
            "params": [
                {
                    "name": "queueName",
                    "description": "The queue name to add.",
                    "type": "String"
                }
            ],
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 131,
            "description": "Sets the queue names of <i>this</i> flow.\n<p>\n When a new <i>flowInstance</i> is created the new list will be used.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "setQueues",
            "params": [
                {
                    "name": "queueNames",
                    "description": "Array with the names of the sub-queues of the {{#crossLink \"ProAct.Queues\"}}{{/crossLink}}es of the flow.\n     The size of this array determines the number of the sub-queues.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 151,
            "description": "Starts an action flow consisting of all the actions defered after the\nlast call of {{#crossLink \"ProAct.Flow/start:method\"}}{{/crossLink}} and then stops the `ProAct.Flow`.\n\n<p>\n If there is a current action flow instance, it is flushed, using the\n {{#crossLink \"ProAct.Queues/go:method\"}}{{/crossLink}} method.\n</p>\n<p>\n If there was aprevious flow instance, it is set to be the current one.\n</p>\n<p>\n If a callback for 'stop' was specified in the <i>options</i> on creation,\n it is called with the flushed instance.\n</p>\n<p>\n When the flow is started you put actions in order or with priority,\n and if you want to execute them and stop it, you call this method.\n</p>\n<p>\n `end` is an alias for this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "stop",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 203,
            "description": "Puts the flow in <i>pause mode</i>.\nWhen the flow is paused actions that should be defered to be run in it\nare skipped.",
            "instance": "",
            "itemtype": "method",
            "name": "pause",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 216,
            "description": "Resumes the action flow if it is paused.\nThe flow becomes active again and actions can be pushed into it.",
            "instance": "",
            "itemtype": "method",
            "name": "resume",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 228,
            "description": "Starts the action flow, executes the passed callback, in the passed context,\nand then stops the action flow, executing all the pushed by the <i>callback</i> actions.\n<p>\n This means that you are guaranteed that you have a running action flow for the actions\n that should be pushed to a flow in the <i>callback</i>.\n</p>\n<p>\n `go` and `flush` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "context",
                    "description": "The value of <i>this</i> bound to the <i>callback</i> when it is executed.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback that will be invoked in a new running `ProAct.Flow`.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 277,
            "description": "Checks if there is an active {{#crossLink \"ProAct.Queues\"}}{{/crossLink}} instance in this `ProAct.Flow`.\n\nTODO This should be named 'isActive'.",
            "instance": "",
            "itemtype": "method",
            "name": "isRunning",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 290,
            "description": "Checks if this `ProAct.Flow` is paused.",
            "instance": "",
            "itemtype": "method",
            "name": "isPaused",
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 301,
            "description": "Pushes an action to the flow.\nThis method can defer in the flow the same action multiple times.\n<p>\n `defer`, `enque` and `add` are aliases of this method.\n</p>\n<p>\n If the flow is paused, the action will not be defered.\n</p>\n\nTODO Errors should be put in constants!",
            "instance": "",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue to defer the action in.\n     <p>\n       On the place of this argument the context can be passed and the queue to push in\n       becomes the first queue available.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to defer into the flow.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "throws": {
                "description": "<i>Not in running flow!</i>, if there is no action flow instance.",
                "type": "Error"
            },
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 348,
            "description": "Defers an action to the flow only once per run.\n<p>\n If the action is pushed for the second time using this method, instead of\n adding it, its set to be executed later then all the actions that were defered only once, using this method.\n</p>\n<p>\n `deferOnce`, `enqueOnce` and `addOnce` are aliases of this method.\n</p>\n<p>\n If the flow is paused, the action will not be defered.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "pushOnce",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue to defer the action in.\n     <p>\n       On the place of this argument the context can be passed and the queue to push in\n       becomes the first queue of the sub-queues.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to defer.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "throws": {
                "description": "<i>Not in running flow!</i>, if there is no action flow instance.",
                "type": "Error"
            },
            "class": "ProAct.Flow",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/flow.js",
            "line": 401,
            "description": "The {{#crossLink \"ProAct.Flow\"}}{{/crossLink}} instance used by ProAct's property updates by default.\n<p>\n It defines only one queue - the default one <i>proq</i>.\n</p>\n<p>\n Override this instance if you are creating a framework or toolset over ProAct.js.\n</p>",
            "itemtype": "property",
            "name": "flow",
            "type": "ProAct.Flow",
            "final": 1,
            "class": "ProAct",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 50,
            "description": "Executes the passed <i>action</i>.",
            "itemtype": "method",
            "name": "runAction",
            "static": 1,
            "params": [
                {
                    "name": "queue",
                    "description": "The queue managing the action to execute.",
                    "type": "ProAct.Queue"
                },
                {
                    "name": "context",
                    "description": "The context in which the action should be executed.\n     <p>\n       The action is a normal JavaScript function and the context is the object\n       that should be bound to <i>this</i> when calling it.\n     </p>\n     <p>\n       It can be null or undefined.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to execute.",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "The parameters to be passed to the action.",
                    "type": "Array"
                },
                {
                    "name": "errHandler",
                    "description": "It is called if an error is thrown when executing the action.\n     <p>\n       It can be null if the error should be catched from the outside.\n     </p>",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 113,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Queue",
            "final": 1,
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 123,
            "description": "Retrieves the lenght of this `ProAct.Queue`.",
            "instance": "",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "The number of actions queued in this queue.",
                "type": "Number"
            },
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 136,
            "description": "Checks if this `ProAct.Queue` is empty.",
            "instance": "",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True if there are no actions in this queue.",
                "type": "Boolean"
            },
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 149,
            "description": "Pushes an action to this queue.\nThis method can enque the same action multiple times and always with priority of '1'.\n<p>\n `defer`, `enque` and `add` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to enque.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 185,
            "description": "Pushes an action to this queue only once.\n<p>\n If the action is pushed for the second time using this method, instead of\n adding it to the queue, its priority goes up and its arguments are updated.\n This means that this action will be executed after all the other actions, pushed only once.\n</p>\n<p>\n `deferOnce`, `enqueOnce` and `addOnce` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "pushOnce",
            "params": [
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to enque.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queue.js",
            "line": 239,
            "description": "Starts the action flow.\n<p>\n Executes the actions in this queue in the order they were enqued, but also uses the priorities\n to execute these with numerically higher priority after these with numerically lower priority.\n</p>\n<p>\n If some of the actions enques new actions in this queue and the parameter <i>once</i> is set to false\n this method is recursively called executing the new actions.\n</p>\n<p>\n `run` is alias of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "once",
                    "description": "True if 'go' should not be called for actions generated by the executed ones.",
                    "type": "Boolean"
                }
            ],
            "class": "ProAct.Queue",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queues.js",
            "line": 59,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Queues",
            "final": 1,
            "class": "ProAct.Queues",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queues.js",
            "line": 69,
            "description": "Checks if this `ProAct.Queues` is empty.",
            "instance": "",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True if there are no actions in any of the sub-queues.",
                "type": "Boolean"
            },
            "class": "ProAct.Queues",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queues.js",
            "line": 96,
            "description": "Pushes an action to a sub-queue.\nThis method can enque the same action multiple times and always with priority of '1'.\n<p>\n `defer`, `enque` and `add` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue to enque the action in.\n     <p>\n       On the place of this argument the context can be passed and the queue to push in\n       becomes the first queue of the sub-queues.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to enque.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Queues",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queues.js",
            "line": 145,
            "description": "Pushes an action to a sub-queue only once.\n<p>\n If the action is pushed for the second time using this method, instead of\n adding it to the sub-queue, its priority goes up and its arguments are updated.\n This means that this action will be executed after all the other actions, pushed only once.\n</p>\n<p>\n `deferOnce`, `enqueOnce` and `addOnce` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "pushOnce",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue to enque the action in.\n     <p>\n       On the place of this argument the context can be passed and the queue to push in\n       becomes the first queue of the sub-queues.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "The context of the action.\n     It can be null.\n     <p>\n       If the method is called with a Function context, the context becomes the action.\n       This way the method can be called with only one parameter for actions without context.\n     </p>",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "The action to enque.\n     <p>\n       If there is no context and the action is passed in place of the context,\n       this parameter can hold the arguments of the action.\n     </p>",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "Arguments to be passed to the action when it is executed.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Queues",
            "module": "proact-flow"
        },
        {
            "file": "src/js/flow/queues.js",
            "line": 198,
            "description": "Starts the action flow.\n<p>\n Executes the actions in all the  sub-queues in the order they were enqued, but also uses the priorities\n to execute these with numerically higher priority after these with numerically lower priority.\n</p>\n<p>\n If some of the actions in the third queue pushes new actions to the second queue, the action flow returns\n to the second queue again and then continues through all the queues.\n</p>\n<p>\n `run` and `flush` are aliases of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue to begin from. Can be null and defaults to the first sub-queue.",
                    "type": "String"
                }
            ],
            "class": "ProAct.Queues",
            "module": "proact-flow"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 65,
            "description": "A constant defining bad values or bad events.\n\nPart of the filtering mechainsm; If a transformation returns\na `BadValue`, based on uncomming event -> the event is skipped.",
            "itemtype": "property",
            "name": "BadValue",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 79,
            "description": "A constant defining closing or ending events.\n\nIf a transformation returns this value, the actor will be closed.\n\nYou can manually close `Actor`s updating them with this constant as an event.",
            "itemtype": "property",
            "name": "Close",
            "type": "Object",
            "final": 1,
            "static": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 94,
            "description": "Transforms the passed <i>val</i> using the {{#crossLink \"ProAct.Actor/transforms:method\"}}{{/crossLink}} method of the passed <i>actor</i>.",
            "itemtype": "method",
            "name": "transforms",
            "static": 1,
            "params": [
                {
                    "name": "actor",
                    "description": "The `ProAct.Actor` which transformations should be used.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "val",
                    "description": "The value to transform.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The transformed value.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 123,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Actor",
            "final": 1,
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 133,
            "description": "Initializes this actor.\n<p>\n This method logic is run only if the current state of <i>this</i> is\n {{#crossLink \"ProAct.States/init:property\"}}{{/crossLink}}.\n</p>\n<p>\n Then {{#crossLink \"ProAct.Actor/afterInit:method\"}}{{/crossLink}} is called to finish the initialization.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "init",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 157,
            "description": "Allocating of resources or initializing is done here.\n<p>\n Empty by default.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "doInit",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 170,
            "description": "Called automatically after initialization of this actor.\n<p>\n By default it changes the state of <i>this</i> to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}.\n</p>\n<p>\n It can be overridden to define more complex initialization logic.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 188,
            "description": "Closes this actor => it state becomes {{#crossLink \"ProAct.States/closed:property\"}}{{/crossLink}}.\n\nThis sends a `close` event to all the subscribers to closing.\n\nAfter closing the actor it can't emit events anymore.\n\nExample:\n```\n var actor = new ProAct.Actor();\n actor.onClose(function () {\n   console.log('Done!');\n });\n\n actor.close(); // We will see 'Done!' on the console output.\n```",
            "instance": "",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "This instance - can be chained.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 217,
            "description": "Checks if <i>this</i> can be closed.\n<p>\n Defaults to return true.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "canClose",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 232,
            "description": "This method is called when a `close` event is pushed to this `Actor`.\n\nIt removes all the subscriptions to the `Actor` and sets its\nstate to {{#crossLink \"ProAct.States/closed:property\"}}{{/crossLink}}.\n\nDo not call this method; it is private!",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "doClose",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 254,
            "description": "Called immediately before destruction.\n\nThe idea is to be implemented by extenders to free additional resources on destroy.",
            "instance": "",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeDestroy",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 268,
            "description": "Destroys this `ProAct.Actor` instance.\n<p>\n The state of <i>this</i> is set to {{#crossLink \"ProAct.States/destroyed:property\"}}{{/crossLink}}.\n</p>\n\nCalls {{#crossLink \"ProAct.Actor/beforeDestroy:method\"}}{{/crossLink}}",
            "instance": "",
            "itemtype": "method",
            "name": "destroy",
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 303,
            "description": "Generates the initial listeners object.\nIt can be overridden for alternative listeners collections.\nIt is used for resetting all the listeners too.\n\nThe default types of listeners are:\n```\n {\n   change: [],\n   error: [],\n   close: []\n }\n```",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultListeners",
            "return": {
                "description": "A map containing the default listeners collections.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 331,
            "description": "A list of actions or action to be used when no action is passed for the methods working with actions.",
            "instance": "",
            "itemtype": "method",
            "name": "defaultActions",
            "access": "protected",
            "tagname": "",
            "default": "'change'",
            "return": {
                "description": "The actions to be used if no actions are provided to action related methods, like\n {{#crossLink \"ProAct.Actor/on:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.Actor/off:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}.",
                "type": "Array|String"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 348,
            "description": "Creates the <i>listener</i> of this actor.\n\nEvery actor should have one listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "makeListener",
            "access": "protected",
            "tagname": "",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 370,
            "description": "Creates the <i>error listener</i> of this actor.\n\nEvery actor should have one error listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer for errors.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "makeErrListener",
            "access": "protected",
            "tagname": "",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>error listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 392,
            "description": "Creates the <i>closing listener</i> of this actor.\n\nEvery actor should have one closing listener that should pass to other actors.\n\n<p>\n This listener turns the actor in a observer for closing events.\n</p>\n<p>\n Should be overriden with specific listener, by default it returns {{#crossLink \"ProAct/N:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "abstract": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeCloseListener",
            "default": "{ProAct.N}",
            "return": {
                "description": "The <i>closing listener of this observer</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 414,
            "description": "Creates the <i>event</i> to be send to the listeners on update.\n\n<p>\n The <i>event</i> should be an instance of {{#crossLink \"ProAct.Event\"}}{{/crossLink}}.\n</p>\n\n<p>\n By default this method returns {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}} event.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "makeEvent",
            "default": "{ProAct.Event} with type {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}}.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 437,
            "description": "Attaches a new listener to this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\n```\n  actor.on(function (v) {\n   console.log(v);\n  });\n\n  actor.on('error', function (v) {\n   console.error(v);\n  });\n\n  actor.on({\n   call: function (v) {\n     console.log(v);\n   }\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to listen for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 498,
            "description": "Removes a <i>listener</i> from the passed <i>action</i>.\n\n<p>\n If this method is called without parameters, all the listeners for all the actions are removed.\n The listeners are reset using {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}}.\n</p>\n\nExamples are:\n\nRemoving a listener:\n```\n var listener = function (v) {\n   console.log(v);\n };\n actor.on(listener);\n actor.off(listener);\n```\n\nOr for removing all the listeners attached to an actor:\n```\n actor.off();\n```\n\nOr for removing all the listeners of a given type attached to an actor:\n```\n actor.off('error');\n```\n\nOr for removing a listener from different type of actions:\n```\n var listener = function (v) {\n   console.log(v);\n };\n actor.on(listener);\n actor.onErr(listener);\n\n actor.off(['error', 'change'], listener);\n```",
            "instance": "",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to stop listening for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 581,
            "description": "Attaches a new error listener to this ProAct.Actor.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\nThis is the same as calling `on('error', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "onErr",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 600,
            "description": "Removes an error <i>listener</i> from the passed <i>action</i>.\n\nThis is the same as calling `off('error', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "offErr",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 617,
            "description": "Attaches a new close notifcation listener to this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.\n\nThis is the same as calling `on('close', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "onClose",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 636,
            "description": "Removes a close notification <i>listener</i> from the passed <i>action</i>.\n\nThis is the same as calling `off('close', listener)` on an `Actor`...",
            "instance": "",
            "itemtype": "method",
            "name": "offClose",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 653,
            "description": "Attaches the passed listener to listen to values, errors and the close notification from this `ProAct.Actor`.\n\nThe listener may be function or object that defines a <i>call</i> method.",
            "instance": "",
            "itemtype": "method",
            "name": "onAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 670,
            "description": "Removes all notifications <i>listener</i> from the passed <i>action</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "offAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 687,
            "description": "Links source actors into this actor. This means that <i>this actor</i>\nis listening for changes from the <i>sources</i>.\n<p>\n A good example is one stream to have another as as source -> if data comes into the source\n stream, it is passed to the listening too. That way the source stream is plugged <b>into</b> the listening one.\n</p>\n<p>\n The listeners from {{#crossLink \"ProAct.Actor/makeListener:method\"}}{{/crossLink}},\n {{#crossLink \"ProAct.Actor/makeErrListener:method\"}}{{/crossLink}} and {{#crossLink \"ProAct.Actor/makeCloseListener:method\"}}{{/crossLink}} are used.\n</p>\n\nChaining actors is very powerful operation. It can be used to merge many source actors into one.\n\n```\n var sourceActor1 = <Actor implementation>;\n var sourceActor2 = <Actor implementation>;\n var actor = <Actor implementation>;\n\n actor.into(sourceActor1, sourceActor2);\n actor.on(function (v) {\n   console.log(v);\n });\n\n```\n\nNow if the any of the source actors is updated, the update will be printed on the console by the `actor`.",
            "instance": "",
            "itemtype": "method",
            "name": "into",
            "params": [
                {
                    "name": "...",
                    "description": "Zero or more source ProAct.Actors to set as sources.",
                    "optional": true
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 736,
            "description": "The reverse of {{#crossLink \"ProAct.Actor/into:method\"}}{{/crossLink}} - sets <i>this actor</i> as a source\nto the passed <i>destination</i> actor.\n\n```\n var sourceActor = <Actor implementation>;\n var actor = <Actor implementation>;\n\n sourceActor.out(actor);\n actor.on(function (v) {\n   console.log(v);\n });\n\n Now if the any of the source actors is updated, the update will be printed on the console by the `actor`.\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "out",
            "params": [
                {
                    "name": "destination",
                    "description": "The actor to set as source <i>this</i> to.",
                    "type": "ProAct.Actor"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 767,
            "description": "Adds a new <i>transformation</i> to the list of transformations\nof <i>this actor</i>.\n\n<p>\n A transformation is a function or an object that has a <i>call</i> method defined.\n This function or call method should have one argument and to return a transformed version of it.\n If the returned value is {@link ProAct.Actor.BadValue}, the next transformations are skipped and the updating\n value/event becomes - bad value.\n</p>\n\n<p>\n Every value/event that updates <i>this actor</i> will be transformed using the new transformation.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "transform",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transformation",
                    "description": "The transformation to add.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 796,
            "description": "Adds a new <i>transformation</i> to the list of transformations\nof <i>this actor</i>.\n\nA transformation is a function or an object that has a <i>call</i> method defined.\nThis function or call method should have one argument and to return a transformed version of it.\nIf the returned value is {@link ProAct.Actor.BadValue}, the next transformations are skipped and the updating\nvalue/event becomes - bad value.\n\nEvery value/event that updates <i>this actor</i> will be transformed using the new transformation.\n\nThe idea of this method is that it just calls {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}},\nbut it can be overidden from another module.\n\nTODO Maybe transformStored is a bad name",
            "instance": "",
            "itemtype": "method",
            "name": "transformStored",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transformation",
                    "description": "The transformation to add. Can be string - to be retrieved by name.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the transformation, for example `mapping`.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 827,
            "description": "Adds a mapping transformation to <i>this actor</i>.\n<p>\n Mapping transformations just transform one value into another. For example if we get update with\n the value of <i>3</i> and we have mapping transformation that returns the updating value powered by <i>2</i>,\n we'll get <i>9</i> as actual updating value.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "mapping",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 848,
            "description": "Adds a filtering transformation to <i>this actor</i>.\n<p>\n Filtering can be used to filter the incoming update values. For example you can\n filter by only odd numbers as update values.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "filtering",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 876,
            "description": "Adds an accumulation transformation to <i>this actor</i>.\n<p>\n Accumulation is used to compute a value based on the previous one.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "accumulation",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 908,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.map(function (el) {\n   return el * el;\n });\n```\n\nor\n\n```\n var actor = sourceActor.map('+');\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.\n     Can be string for predefined mapping functions.",
                    "type": "Object|Function|Strin"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>mapping</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 939,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.filter(function (el) {\n   return el % 2 == 0;\n });\n```\n\nor\n\n```\n var actor = sourceActor.filter('odd');\n\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>filtering</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 970,
            "description": "Creates a new ProAct.Actor instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n<p>\n Should be overridden with creating the right actor.\n</p>\n\n```\n var actor = sourceActor.accumulate(0, function (current, el) {\n   return current + el;\n });\n```\n\nor\n\n```\n var actor = sourceActor.accumulate('+');\n```",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor.js",
            "line": 1002,
            "description": "Defers a ProAct.Actor listener.\n<p>\n By default this means that the listener is put into active {{#crossLink \"ProAct.Flow\"}}{{/crossLink}} using it's\n {{#crossLink \"ProAct.Flow/pushOnce:method\"}}{{/crossLink}} method, but it can be overridden.\n</p>\n\nThis method determines the order of actions, triggered by the changes in the data flow.\nThe default implementation is executing only one update on this Actor per data flow change.\nThis means that if the `Actor` depends on other three Actors, and all of them get updated,\nit is updated only once with the last update value.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to the listener.",
                    "type": "Object"
                },
                {
                    "name": "listener",
                    "description": "The listener to defer. It should be a function or object defining the <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/actor_util.js",
            "line": 36,
            "description": "Updating/notifying method that can be applied to an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}\n\nThis method defers the update and the notifications into {{#crossLink \"ProAct.flow\"}}{{/crossLink}}.\n\nIf the state of the caller is {{#crossLink \"ProAct.States.destroyed)\"}}{{/crossLink}}, an exception will be thrown.\nIf the state of the caller is {{#crossLink \"ProAct.States.closed)\"}}{{/crossLink}}, nothing will happen.\n\nExamples:\n\nYou can implement a stream and in it's `trigger` method use this:\n```\n  ActorUtil.update.call(this, event);\n```\nThis way the event will be triggered into the stream and all the listeners to the stream will be notified.\nFor this to work you'll have to override the `makeEvent` method of the stream to return the unmodified source - no state/no event generation,\nthe event will just go through.\n\n\nIf you want to implement a statefull `Actor` like a `property`, you can set a state in it and just notify all the\nobserving `Actors` with this method.",
            "itemtype": "method",
            "name": "update",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The event/value, causing the update -> can be null : no source.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "actions",
                    "description": "For which actions should notify -> can be null : default actions.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "eventData",
                    "description": "Data for creating the updating event -> can be null : no data.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The calling object.",
                "type": "Object"
            },
            "class": "ProAct.ActorUtil",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/actor_util.js",
            "line": 86,
            "description": "Contains the real notify/update logic defered by {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}} into the flow.\nIt is private method, should not be used - use `update`.",
            "itemtype": "method",
            "name": "doUpdate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source",
                    "description": "The event/value, causing the update -> can be null : no source.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "actions",
                    "description": "For which actions should notify -> can be null : default actions.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "eventData",
                    "description": "Data for creating the updating event -> can be null : no data.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The calling object.",
                "type": "Object"
            },
            "class": "ProAct.ActorUtil",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/core.js",
            "line": 47,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Core",
            "final": 1,
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 57,
            "description": "A function to be set to the <i>shell</i> object's <b>p</b> field (if it is configured in {{#crossLink \"ProAct.Configuration\"}}{{/crossLink}}.\n<p>\n This function is the link to the this ProAct.Core of the <i>shell</i>.\n It can be overridden to return different aspects of the core depending on parameters passed.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "value",
            "default": "{this}",
            "return": {
                "description": "Some aspects of <i>this</i> `ProAct.Core`.",
                "type": "Object"
            },
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 75,
            "description": "Initializes <i>this</i> ProAct.Core. This method should be called when the core should become active.\n<p>\n The main idea of the method is to change the {{#crossLink \"ProAct.States\"}}{{/crossLink}}\n state of <i>this</i> to {{#crossLink \"ProAct.States/ready:property\"}}{{/crossLink}}, by\n settuping everything needed by the shell to has observer-observable logic.\n</p>\n<p>\n The abstract {{#crossLink \"ProAct.Core/setup:method\"}}{{/crossLink}} method is called for the actual setup.\n If it throws an error, <i>this</i> state is set to {{#crossLink \"ProAct.States/error:property\"}}{{/crossLink}}\n and the core stays inactive.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "prob",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Core"
            },
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 115,
            "description": "Abstract method called by {{#crossLink \"ProAct.Core/prob:method\"}}{{/crossLink}}\nfor the actual initialization of <i>this</i> core.\n\nBy default it throws an exception.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "setup",
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/core.js",
            "line": 131,
            "description": "`ProAct.Core` can be used as a parent listener for its managed\n{{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s, so it defines the <i>call</i> method.\n<p>\n By default this method calls {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}\n with <i>this</i> and the passed <i>event</i>.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "call",
            "params": [
                {
                    "name": "event",
                    "description": "The value/event that this listener is notified for.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Core",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 34,
            "description": "Factory method for creating of new ProAct.Events with ease.\n<p>\n NOTE: For now only works with arrays, because creating array events required a lot of code.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The type of the event. Can be string for ease.\n     For now this method supports only {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} events.\n     It is possible to pass the string 'array' for type.",
                    "type": "ProAct.Event.Types|String"
                },
                {
                    "name": "data",
                    "description": "Arguments of the event.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 61,
            "description": "Factory method for creating of new ProAct.Events of type {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nTODO Move to the proact-arrays package!",
            "static": 1,
            "params": [
                {
                    "name": "source",
                    "description": "If there is an event that coused this event - it is the source. Can be null - no source.",
                    "type": "ProAct.Event"
                },
                {
                    "name": "target",
                    "description": "The thing that triggered this event.",
                    "type": "Object"
                },
                {
                    "name": "subType",
                    "description": "The operation type of the event to create. Can be string or instance of\n     {@link ProAct.Array.Operations}.\n     Prossible string values are - 'remove' and 'splice' for now.",
                    "type": "ProAct.Array.Operations|String"
                },
                {
                    "name": "data",
                    "description": "Arguments of the event.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 99,
            "description": "Factory method for creating of new ProAct.Events without target and source with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nUsing this method we can create for example an event for removing the i-th element from ProAct.Array like this:\n<pre>\n ProAct.Event.simple('array', 'del', el, array);\n</pre>\nThis event can be passed to the ProAct.ArrayCore#update method of the core of a ProAct.Array and it will delete\nthe element in it.\n\nTODO Some of these types and comments should be undepended of the proact-arrays module.",
            "static": 1,
            "params": [
                {
                    "name": "eventType",
                    "description": "The type of the event. Can be string for ease.\n     For now this method supports only {@link ProAct.Event.Types.array} events.\n     It is possible to pass the string 'array' or 'a' for type.",
                    "type": "ProAct.Event.Types|String"
                },
                {
                    "name": "subType",
                    "description": "The operation type of the event to create. Can be string or instance of\n     {@link ProAct.Array.Operations}.\n     Prossible string values are - 'pop', 'shift', 'deleteElement' or 'del' (at index) and 'splice' for now.",
                    "type": "ProAct.Array.Operations|String"
                },
                {
                    "name": "value",
                    "description": "Used a value of the event.\n     For array events this is for example the value to be added or to be removed.\n     It can be index too.",
                    "type": "Object"
                },
                {
                    "name": "array",
                    "description": "Optional parameter for array events - the array target of the event.\n     It will be set as target.\n     Can be used for determining event's parameters too.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The new event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Event",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/event.js",
            "line": 169,
            "description": "Value type events. Events for changing a value.\n<p>\n For properties the args of the event contain the ProAct Object, the old value\n of the property and the new value.\n</p>",
            "type": "Number",
            "itemtype": "property",
            "name": "value",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 183,
            "description": "Array type events. Events for changes in {@link ProAct.Array}.\n<p>\n The args should consist of operation, index, old values, new values.\n</p>\n\nTODO Move it to the proact-arrays module.",
            "type": "Number",
            "itemtype": "property",
            "name": "array",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 198,
            "description": "Close type events. Events for closing streams or destroying properties.",
            "type": "Number",
            "itemtype": "property",
            "name": "close",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/event.js",
            "line": 208,
            "description": "Error type events. Events for errors.",
            "type": "Number",
            "itemtype": "property",
            "name": "error",
            "final": 1,
            "class": "ProAct.Event",
            "module": "proact-core",
            "namespace": "ProAct.Event"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 22,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ProbProvider",
            "final": 1,
            "class": "ProAct.ProbProvider",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 32,
            "description": "Used to check if this `ProAct.ProbProvider` is compliant with the passed data.\n\nAbstract - must be implemented by an extender.",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "data",
                    "description": "The data to check.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta-data used to help in filtering.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "If <i>this</i> provider is compliant with the passed data.",
                "type": "Boolean"
            },
            "class": "ProAct.ProbProvider",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 52,
            "description": "Creates a reactive object from the passed data\n\nAbstract - must be implemented by an extender.",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "data",
                    "description": "The data to use as a source for the object.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta-data used to help when creating.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "A reactive representation of the data.",
                "type": "Object"
            },
            "class": "ProAct.ProbProvider",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 79,
            "description": "Registers a `ProAct.ProbProvider`.\n\nThe provider is appended in the end of the list of `ProAct.ProbProvider`s.",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The `ProAct.ProbProvider` to register.",
                    "type": "ProAct.ProbProvider"
                }
            ],
            "class": "ProAct.ProbProvider",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 94,
            "description": "Provides a reactive representation of passed simple data.",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The data for which to try and provide a reactive object representation.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the reactive object to be provided.",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "A reactive object provided by registered provider, or null if there is no compliant provider.",
                "type": "Object"
            },
            "class": "ProAct.ProbProvider",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/functions.js",
            "line": 130,
            "description": "The `ProAct.prob` method is the entry point for creating reactive values in ProAct.js\n\nTODO More docs",
            "itemtype": "method",
            "name": "prob",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The object/value to make reactive.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta-data used to help in the reactive object creation.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "Reactive representation of the passed <i>object</i>.",
                "type": "Object"
            },
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 66,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "static": 1,
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 84,
            "description": "Initialized : It is not usable yet.\n\nFor example a computed property (property depending on other properties/actors) is\nin `init` state when it's created and not read yet.\nWhen something reads its value it computes it for the the first time and becomes in `ready`\nstate.",
            "itemtype": "property",
            "name": "init",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 99,
            "description": "Ready for use.\n\nActive {{#crossLink \"ProAct.Actor\"}}Actors{{/crossLink}} have this state. It can be listened to, it\ncan be updated and notify all of its dependencies.",
            "itemtype": "property",
            "name": "ready",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 112,
            "description": "Ended it's lifecycle.\n\nEvery {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} can be `destroyed`. All the resources it uses are freed.\nAll the dependent objects don't depend on it anymore.\n\nFor example if an application has states/routing, {{#crossLink \"ProAct.Actor\"}}Actors{{/crossLink}} that were active in one\nof the states should be `destroyed` before going into other route/state.",
            "itemtype": "property",
            "name": "destroyed",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 128,
            "description": "Error has occured in the {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}'s lifecycle.\n\nFor example, if there was an exception in the object's initialization.",
            "itemtype": "property",
            "name": "error",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 140,
            "description": "A closed ProAct object.\n\nFor example Streams that can emmit events anymore are closed streams.\n\nProperties which value can not be updated are closed (constants).",
            "itemtype": "property",
            "name": "closed",
            "type": "Number",
            "final": 1,
            "class": "ProAct.States",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 168,
            "description": "Generates an universally unique identifier.",
            "itemtype": "method",
            "name": "uuid",
            "return": {
                "description": "Unique string.",
                "type": "String"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 183,
            "description": "Checks if the passed value is a Function or not.",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "The object/value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed value is a Function.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 194,
            "description": "Checks if the passed value is a String instance or not.",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "The object/value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed value is a String.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 205,
            "description": "Checks if the passed value is a JavaScript object or not.",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed values is not primitive.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 216,
            "description": "Checks if the passed value is {} or not.",
            "itemtype": "method",
            "name": "isEmptyObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the value is object that has no own fields.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 233,
            "description": "Checks if the passed value is a valid JavaScript Error instance or not.",
            "itemtype": "method",
            "name": "isError",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is instance of an Error.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 244,
            "description": "Checks if the passed value is a valid JavaScript Array instance or not.",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is Array.",
                "type": "Boolean"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 255,
            "description": "Clones the passed object. It creates a deep copy of it.\nFor now it clones only arrays.\n\nTODO It is not fully implemented...",
            "itemtype": "method",
            "name": "clone",
            "beta": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The object to clone.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Clone of the passed object.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 277,
            "description": "Extends the destination object with the properties and methods of the source object.\n\n```\n var obj1 = {a: 3};\n var obj2 = {b: 4;}\n ProAct.Utils.ex(obj2, obj1);\n\n console.log(obj2);\n // This prints : {a: 3, b: 4}\n\n```",
            "itemtype": "method",
            "name": "ex",
            "params": [
                {
                    "name": "destination",
                    "description": "The object to be extended - it will be modified.",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "The source holding the properties and the functions to extend destination with.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The changed destination object.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 306,
            "description": "Used for extending of classes.\nExample is:\n```\n\n var Bar = ProAct.Utils.extendClass.call(Foo, {\n   a: 1,\n   b: 2,\n   c: function () {}\n });\n\n```",
            "itemtype": "method",
            "name": "extendClass",
            "params": [
                {
                    "name": "data",
                    "description": "Data to add new properties to the new class or override old ones.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Child class.",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 343,
            "description": "Binds a `function` to an `object context`.\n\nEvery time the `function` is called, `this` will point to the passed `object`.\n\n```\n\n var context = {a: 3};\n var f = ProAct.Utils.bind(context, function () {\n   return this;\n });\n\n var result = f();\n console.log(result === context); // prints 'true'\n\n```",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "ctx",
                    "description": "The `context` to bind the `this` of the function to.",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "The `function` to bind.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The bound `function`.",
                "type": "Function"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 371,
            "description": "Removes the first appearance of the passed `value` in the passed `array`.\nIf the `value` is not present in the passed `array` does nothing.\n\n```\n\n var array = [1, 2, 3];\n ProAct.Utils.remove(array, 2);\n\n console.log(array); // prints [1, 3]\n\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "array",
                    "description": "The `array` to remove from.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The `value` to be removed.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 395,
            "description": "A powerful function that creates a diff object containing the differences between two arrays.",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "array1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<p>The object returned contains a property for every index there is a difference between the passed arrays.</p>\n     <p>The object set on the index has two array properties : 'o' and 'n'.</p>\n     <p>The 'o' property represents the owned elemetns of the first array that are different from the other's.</p>\n     <p>The 'n' property contains all the elements that are not owned by the first array, but present in the other.</p>\n     <p>Example:</p>\n```\n  var array1 = [1, 3, 4, 5],\n      array2 = [1, 2, 7, 5, 6]\n      diff;\n\n  diff = ProAct.Utils.diff(array1, array2);\n\n  console.log(diff[0]); // undefined - the arrays are the same at he index 0\n  console.log(diff[1]); // {o: [3, 4], n: [2, 7]}\n  console.log(diff[2]); // undefined the change began from index 1, so it is stored there\n  console.log(diff[3]); // undefined - the arrays are the same at index 3\n  console.log(diff[4]); // {o: [], n: [6]}\n```",
                "type": "Object"
            },
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 466,
            "description": "Defines a property to an object that contains a initial value.\n\nThe property can be configured using the arguments passed if it is possible in the javascript implementation.",
            "itemtype": "method",
            "name": "defValProp",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to define a property in.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The name of the property to define.",
                    "type": "String"
                },
                {
                    "name": "enumerable",
                    "description": "If the property should be enumerable.<br /> In other words visible when doing <pre>for (p in obj) {}</pre>",
                    "type": "Boolean"
                },
                {
                    "name": "configurable",
                    "description": "If the property should be configurable.<br /> In other words if the parameters of the property for example enumerable or writable can be changed in the future.",
                    "type": "Boolean"
                },
                {
                    "name": "writable",
                    "description": "If the property can be changed.",
                    "type": "Boolean"
                },
                {
                    "name": "val",
                    "description": "The initial value of the property.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Utils",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 502,
            "description": "If this option is set to true, when a ProAct.js object is created and has properties named\nas one or more of the properties listed in\n{{#crossLink \"ProAct.Configuration.keypropList\"}}{{/crossLink}} an `Error` will be thrown.\n\nIn other words declares some of the properties of every ProAct objects as keyword properties.",
            "itemtype": "property",
            "name": "keyprops",
            "type": "Boolean",
            "static": 1,
            "class": "ProAct.Configuration",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 516,
            "description": "Defines a list of the keyword properties that can not be used in ProAct.js objects.\nThe {{#crossLink \"ProAct.Configuration.keyprops\"}}{{/crossLink}} option must be set to true in order for this list to be used.",
            "itemtype": "property",
            "name": "keypropList",
            "type": "Array",
            "static": 1,
            "class": "ProAct.Configuration",
            "module": "proact-core",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/core/pro.js",
            "line": 528,
            "description": "No-action or emtpy function. Represent an action that does nothing.",
            "itemtype": "method",
            "name": "N",
            "class": "ProAct",
            "module": "proact-core"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 134,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.AutoProperty",
            "final": 1,
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 144,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.AutoProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/auto:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 161,
            "description": "Creates the <i>listener</i> of this `ProAct.AutoProperty`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for `ProAct.AutoProperty` is an object defining the <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>\n<p>\n On value changes the <i><this</i> value is set to the value computed by the original function,\n using the {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}} to transform it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this ProAct.AutoProperty</i>.",
                "type": "Object"
            },
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/auto_property.js",
            "line": 201,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.AutoProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.AutoProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/functions.js",
            "line": 5,
            "description": "The `ProAct.proxy` creates proxies or decorators to ProAct.js objects.\n<p>\n The decorators extend the <i>target</i> and can add new properties which depend on the extended ones.\n</p>",
            "itemtype": "method",
            "name": "proxy",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "The object/value to make decorator to the <i>target</i>.",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "The object to decorate.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta-data used to help in the reactive object creation for the proxy.",
                    "type": "Object|String"
                },
                {
                    "name": "targetMeta",
                    "description": "Meta-data used to help in the reactive object creation for the target, if it is not reactive.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "Reactive representation of the passed <i>object</i>, decorating the passed <i>target</i>.",
                "type": "Object"
            },
            "class": "ProAct",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/functions.js",
            "line": 54,
            "description": "Checks if the passed value is a valid ProAct.js object or not.\nProAct.js object have a special `__pro__` object that is hidden in them, which should be instance of {{#crossLink \"ProAct.Core\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isProObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the value is object containing {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances and has a `core`.",
                "type": "Boolean"
            },
            "class": "ProAct",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/functions.js",
            "line": 68,
            "description": "<p>\n Represents the current caller of a method, the initiator of the current action.\n</p>\n<p>\n This property does the magic when for example an {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} is called\n for the first time and the dependencies to the other properties are created.\n The current caller expects to be used in a single threaded environment.\n</p>\n<p>\n Do not remove or modify this property manually.\n</p>",
            "itemtype": "property",
            "name": "currentCaller",
            "type": "Object",
            "default": "null",
            "static": 1,
            "class": "ProAct",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 60,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectCore",
            "final": 1,
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 70,
            "description": "A function to be set to the <i>shell</i> object's <b>p</b> field (if it is configured in {{#crossLink \"ProAct.Configuration\"}}{{/crossLink}}).\n<p>\n It uses its <i>p</i> argument if it is string to return the right {{#crossLink \"ProAct.Property\"}}{{/crossLink}} for passed field name.\n</p>\n<p>\n If the <i>p</i> argument is <b>*</b> or empty <i>this</i> `ProAct.ObjectCore` instance is returned.\n</p>\n\n```\n core.value('a'); // returns the shell's 'a' value - shell.a.\n core.value('*'); // returns this.\n core.value(); // returns this.\n```",
            "instance": "",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "p",
                    "description": "The name of the managed {{#crossLink \"ProAct.Property\"}}{{/crossLink}} to retrieve.\n     It can be set to <b>*</b> or skipped for <i>this</i> itself to be retrieved.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Managed {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with field name equal to the passed <i>p</i> parameter or <i>this</i>.",
                "type": "Object"
            },
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 102,
            "description": "Initializes all the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances for the <i>shell</i>of <i>this</i> ProAct.ObjectCore.\n<p>\n Using the types of the fields of the <i>shell</i> object the right {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instances are created and stored\n in <i>this</i> using {{#crossLink \"ProAct.Configuration/makeProp:method\"}}{{/crossLink}}.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "setup",
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 123,
            "description": "Creates a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance for <i>this</i>'s shell.\n\n```\n var shell = {a: 3};\n var core = new ProAct.Core(shell);\n\n shell.b = function () { return this.a + 5; };\n core.makeProp('b');\n\n console.log(shell.b); // 8\n\n shell.a = 5;\n console.log(shell.b); // 10\n```",
            "instance": "",
            "itemtype": "method",
            "name": "makeProp",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the property, the name of the field in the <i>shell</i>.",
                    "type": "String"
                },
                {
                    "name": "listeners",
                    "description": "Initial listeners for 'change' of the property, can be skipped.",
                    "type": "Array"
                },
                {
                    "name": "meta",
                    "description": "Meta information for the property to create, for example if the meta contains 'noprop', no property is created,\n     and the initial value of the field is preserved.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "The newly crated and stored in <i>this</i> property, or null if no property was created.",
                "type": "ProAct.Property"
            },
            "throws": {
                "description": "If there is no field defined in the <i>shell</i> named as the passed <i>property</i>.",
                "type": "Error"
            },
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 187,
            "description": "Applies meta information and actions on already created property.\n\nThis method is called by the {{#crossLink \"ProAct.ObjectCore/makeProp:method\"}}{{/crossLink}} one,\nother modules can inject logic by overriding it.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "applyMeta",
            "params": [
                {
                    "name": "meta",
                    "description": "Meta information for the property to modify with.",
                    "type": "String|Array"
                },
                {
                    "name": "property",
                    "description": "The property to update.",
                    "type": "ProAct.Property"
                }
            ],
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_core.js",
            "line": 205,
            "description": "Sets the value of a managed property. The interesting thing here is that\nif the property does not exist this method creates it and stores a new field in the <i>shell</i> object\nwith the passed <i>value</i>.\n<p>\n The new field is reactive.\n</p>\n\n```\n var shell = {a: 3};\n var core = new ProAct.Core(shell);\n\n core.set('b', function () { return this.a + 5; });\n\n console.log(shell.b); // 8\n\n shell.a = 5;\n console.log(shell.b); // 10\n```",
            "instance": "",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the property to update/create.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the property to be set.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.ObjectCore",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 140,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectProperty",
            "final": 1,
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 150,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.ObjectProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/object:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/object_property.js",
            "line": 167,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.ObjectProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.ObjectProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 124,
            "description": "ProAct.Property for simple types - Numbers, Strings or Booleans.",
            "itemtype": "property",
            "name": "simple",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 134,
            "description": "ProAct.Property for auto computed types - Functions.",
            "itemtype": "property",
            "name": "auto",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 144,
            "description": "ProAct.Property for object types - fields containing objects.",
            "itemtype": "property",
            "name": "object",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 154,
            "description": "ProAct.Property for nil types - fields containing null or undefined.",
            "itemtype": "property",
            "name": "nil",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 164,
            "description": "Retrieves the right` ProAct.Property.Types` value from a value.",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "value",
                    "description": "The value to use to compute the `ProAct.Property.Types` member for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The type of the passed value.",
                "type": "Number"
            },
            "class": "ProAct.Property.Types",
            "module": "proact-properties",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 187,
            "description": "Generates a default getter function for a `ProAct.Property` instance.\n<p>\n Every `ProAct.Property` instance has a getter and a setter,\n they can be passed in the constructor, but if left blank,\n this method is used for creating the getter function.\n</p>\n<p>\n The default getter function uses {{#crossLink \"ProAct.Property/addCaller:method\"}}{{/crossLink}}\n method to track the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} listener if set.\n If it is set it is added as a listener to the passed <i>property</i>.\n</p>",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultGetter",
            "params": [
                {
                    "name": "property",
                    "description": "The `ProAct.Property` instance to generate a getter function for.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "The generated getter function.",
                "type": "Function"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 217,
            "description": "Generates a default setter function for a ProAct.Property instance.\n<p>\n Every `ProAct.Property` instance has a setter and a getter,\n they can be passed in the constructor, but if left blank,\n this method is used for creating the setter function.\n</p>\n<p>\n The default setter function uses the {{#crossLink \"ProAct.ActorUtil/update:method\"}}{{/crossLink}}\n method to update all the listeners for <i>change</i>s for the passed <i>property</i>.\n</p>\n<p>\n It updates the listeners only if the new value of the property\n is different from the old one (using <i>===</i> for the comparison).\n</p>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defaultSetter",
            "static": 1,
            "params": [
                {
                    "name": "property",
                    "description": "The `ProAct.Property` instance to generate a setter function for.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "setter",
                    "description": "A setter function for the way of setting the value.\n     It can be skipped if the value should be set using <i>=</i>.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The generated setter function.",
                "type": "Function"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 271,
            "description": "Used to define the managed by a `ProAct.Property` instance field of the passed <i>obj</i>.\n<p>\n The field is writable, enumerable and configurable.\n</p>",
            "itemtype": "method",
            "name": "defineProp",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "The object which field should be defined as a property.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The name of the property field to define.",
                    "type": "String"
                },
                {
                    "name": "get",
                    "description": "The getter that should be used to read the new property to be defined.",
                    "type": "Function"
                },
                {
                    "name": "set",
                    "description": "The setter that should be used to update the new property to be defined.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 299,
            "description": "Recreates a property, using its current value.\n<p>\n The re-definition works by using {{#crossLink \"ProAct.Property/destroy:method\"}}{{/crossLink}}\n to destroy the passed <i>property</i> first, and then the\n {{#crossLink \"ProAct.ObjectCore/makeProp:method\"}}{{/crossLink}} method is called of the\n {{#crossLink \"ProAct.ObjectCore\"}}{{/crossLink}} of the object the <i>property</i> belongs to.\n</p>\n<p>\n This way a new `ProAct.Property` instance is created to replace the passed one.\n</p>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reProb",
            "static": 1,
            "params": [
                {
                    "name": "property",
                    "description": "The ProAct.Property instance to re-define.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "The new re-defined property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 333,
            "description": "Creates a constant property. It's value can not be changed.\n\n```\n var property = ProAct.Property.constant(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 5\n```",
            "static": 1,
            "itemtype": "method",
            "name": "constant",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property. Can not be changed.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new constant property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 357,
            "description": "Creates a value property. It's value can be updated any time and other properties may depend on it.\n\nThis propety is eager - this means that it is initialized automatically even if it's not used.\n\n```\n var property = ProAct.Property.value(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 4\n```",
            "static": 1,
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new value property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 386,
            "description": "Creates a lazy initialized value property. It's value can be updated any time and other properties may depend on it.\n\nBeing lazy means, that the property won't be initialized until it is read (it's get() method is called).\n\n```\n var property = ProAct.Property.lazyValue(5);\n\n console.log(property.get()); // 5\n\n property.set(4);\n console.log(property.get()); // 4\n```",
            "static": 1,
            "itemtype": "method",
            "name": "lazyValue",
            "params": [
                {
                    "name": "val",
                    "description": "The value of the property.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Optional meta data for the property.",
                    "type": "Object"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to. By default the default queue is used.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new lazily initialized value property.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 433,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Property",
            "final": 1,
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 443,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the base class - `ProAct.Property` it is\n {{#crossLink \"ProAct.Property.Types/simple:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 460,
            "description": "Creates the <i>event</i> to be send to the listeners of this `ProAct.Property` on update.\n<p>\n The <i>event</i> should be an instance of {{#crossLink \"ProAct.Event\"}}{{/crossLink}}.\n</p>\n<p>\n By default this method returns {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}} event with target the property name and arguments:\n <ul>\n   <li>The object this `ProAct.Property` manages a field for.</li>\n   <li>The old value of this property.</li>\n   <li>The new value of this property.</li>\n </ul>\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeEvent",
            "default": "{ProAct.Event} with type {{#crossLink \"ProAct.Event.Types/value:property\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event, created.",
                "type": "ProAct.ValueEvent"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 488,
            "description": "Creates the <i>listener</i> of this `ProAct.Property`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for ProAct.Property is an object defining the <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>\n<p>\n On value changes the <i><this</i> value is set to the new value using the {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}} to transform it.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this ProAct.Property</i>.",
                "type": "Object"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 530,
            "description": "Initializes this property.\n<p>\n First the property is defined as a field in its object,\n using {{#crossLink \"ProAct.Property/defineProp:method\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "doInit",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 547,
            "description": "Uses {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} to\nautomatically add a new listener to this property if the caller is set.\n<p>\n This method is used by the default getter to make every reader of the property a listener to it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "addCaller",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 567,
            "description": "A hook that is called right before destruction, the extenders use it to clean up resources.\n\nThe `ProAct.Property` deletes its state and is removed from its core container.\n\nDon't override it.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "beforeDestroy",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 591,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n\nWhen the source is changed, the product of this operator is updated too.\n\n```\n var val = ProAct.Property.value(5);\n var plusOne = val.map(function (v) {\n   return v + 1;\n });\n\n plusOne.get(); // 6\n\n val.set(4);\n plusOne.get(); // 5\n```\n\nor\n\n```\n var positive = val.map('+');\n\n val.set(-4);\n\n positive.get(); // 4\n```",
            "instance": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.\n     Can be string for predefined mapping functions.",
                    "type": "Object|Function|Strin"
                }
            ],
            "return": {
                "description": "A new `ProAct.Property` instance with the <i>mapping</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 634,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n\nWhen the source changes, the product, may be updated.\n\nTODO On creation if the filter fails, the property keeps the original value.\nWhat to do? Also these kinds of properties shouldn't be set manually.\n\n```\n var prop = ProAct.Property.value(4);\n var even = sourceActor.filter(function (el) {\n   return el % 2 == 0;\n });\n\n even.get(); // 4\n\n prop.set(5);\n even.get(); // 4\n\n prop.set(6);\n even.get(); // 6\n```\n\nor\n\n```\n var actor = sourceActor.filter('odd');\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new ProAct.Actor instance with the <i>filtering</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Actor",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 680,
            "description": "Creates a new `ProAct.Property` instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n\nSome examples:\n\n```\n var prop = ProAct.Property.value(3);\n var acc = prop.accumulate(0, function (current, el) {\n   return current + el;\n });\n\n acc.get(); // 3\n\n prop.set(5);\n\n acc.get(); // 8\n\n prop.set(2);\n\n acc.get(); // 10\n```",
            "instance": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Property` instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 719,
            "description": "The <b>toString()</b> method returns a string representing this `ProAct.Property`.\n<p>\n The string representation is the value of <i>this</i> property.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "toString",
            "class": "ProAct.Property",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 740,
            "description": "Generates a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} containing the state of an accumulations.\n\n<p>\n The value will be updated with every update coming to this actor.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance observing <i>this</i> with the accumulation applied.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Actor",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property.js",
            "line": 763,
            "description": "Creates a {{{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance,\ndependent on this.\nComes from the `proact-properties` module.",
            "instance": "",
            "itemtype": "method",
            "name": "toProperty",
            "class": "ProAct.Actor",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 35,
            "description": "Registers a `ProAct.PropertyProvider`.\n<p>\n The provider is appended in the end of the list of `ProAct.PropertyProviders`.\n</p>\n<p>\n When a property must be provided if there is a `ProAct.PropertyProvider` registered before\n the passed <i>propertyProvider</i>, with valid filtering for the passed field, it will\n be used instead.\n</p>",
            "itemtype": "method",
            "name": "registerProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The `ProAct.PropertyProvider` to register.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 56,
            "description": "Registers a `ProAct.PropertyProvider`.\n<p>\n The provider is prepended in the beginning of the list of `ProAct.PropertyProviders`.\n</p>\n<p>\n It's filtering will be called before any other registered provider.\n</p>",
            "itemtype": "method",
            "name": "prependProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The `ProAct.PropertyProvider` to register.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 75,
            "description": "Removes a `ProAct.PropertyProvider` from the list of the registered `ProAct.PropertyProviders`.",
            "itemtype": "method",
            "name": "unregisterProvider",
            "static": 1,
            "params": [
                {
                    "name": "propertyProvider",
                    "description": "The ProAct.PropertyProvider to unregister.",
                    "type": "ProAct.PropertyProvider"
                }
            ],
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 88,
            "description": "Removes all `ProAct.PropertyProviders` from the list of the registered `ProAct.PropertyProviders`.",
            "static": 1,
            "itemtype": "method",
            "name": "clearProviders",
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 99,
            "description": "Provides a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance using the list of the registered\n`ProAct.PropertyProviders`.\n<p>\n The providers are tried in the order of their registration\n (the order can be changed using {{#crossLink \"ProAct.PropertyProvider/prependProvider:method\"}}{{/crossLink}}).\n</p>\n<p>\n The {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method is used to check\n if a provider is compliant with the passed arguments.\n</p>\n<p>\n If a compliant provider is found, its {{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}} method\n is used to provide the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>object</i>.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to provide a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance for.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A property provided by registered provider, or null if there is no compliant provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 168,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.PropertyProvider",
            "final": 1,
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 178,
            "description": "Used to check if this `ProAct.PropertyProvider` is compliant with the field and meta data\nto be used for creating a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with\n{{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}}.\n<p>\n Abstract - must be implemented by an extender.\n</p>",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n     Can be used in the filtering process.\n     <p>\n       For example field name beginning with foo. Can be turned into a FooProperty.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "If <i>this</i> provider is compliant with the passed arguments.",
                "type": "Boolean"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 207,
            "description": "Provides an instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.\n<p>\n It should be called only after <i>this</i> {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method,\n called with the same arguments returns true.\n</p>\n<p>\n Abstract - must be implemented in an extender.\n</p>",
            "abstract": "",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}. Can be used in the filtering process.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A property provided by <i>this</i> provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.PropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 262,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.SimplePropertyProvider",
            "final": 1,
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 272,
            "description": "Used to check if this `ProAct.SimplePropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}. Can be used in the filtering process.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> not undefined or null as well as object, array ot function.",
                "type": "Boolean"
            },
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 292,
            "description": "Provides an instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.SimplePropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 339,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.AutoPropertyProvider",
            "final": 1,
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 349,
            "description": "Used to check if this `ProAct.AutoPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> a function.",
                "type": "Boolean"
            },
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 368,
            "description": "Provides an instance of {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.AutoProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.AutoProperty"
            },
            "class": "ProAct.AutoPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 415,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ObjectPropertyProvider",
            "final": 1,
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 425,
            "description": "Used to check if this `ProAct.ObjectPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> an object, different from array or function.",
                "type": "Boolean"
            },
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 444,
            "description": "Provides an instance of {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ObjectProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ObjectProperty"
            },
            "class": "ProAct.ObjectPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 491,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ProxyPropertyProvider",
            "final": 1,
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 501,
            "description": "Used to check if this `ProAct.ProxyPropertyProvider` is compliant with the meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "If the meta is present and of type {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, it becomes the target property of the\n     {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} that will be provided.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "True if <i>meta</i> argument is present and is instance of {{#crossLink \"ProAct.Property\"}}{{/crossLink}}.",
                "type": "Boolean"
            },
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/property_provider.js",
            "line": 525,
            "description": "Provides an instance of {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "The target {{#crossLink \"ProAct.Property\"}}{{/crossLink}} of the {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} to be created.",
                    "type": "ProAct.Property"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ProxyProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ProxyProperty"
            },
            "class": "ProAct.ProxyPropertyProvider",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 79,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ProxyProperty",
            "final": 1,
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 89,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For `ProAct.ProxyProperty` this is the type if its <i>target</i>.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/proxy_property.js",
            "line": 105,
            "description": "Creates the <i>listener</i> of this `ProAct.ProxyProperty`.\n<p>\n This listener turns the observable in a observer.\n</p>\n<p>\n The listener for ProAct.ProxyProperty is an object defining an empty <i>call</i> method.\n</p>\n<p>\n It has a <i>property</i> field set to <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this `ProAct.ProxyProperty`</i>.",
                "type": "Object"
            },
            "class": "ProAct.ProxyProperty",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/value_event.js",
            "line": 32,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ValueEvent",
            "final": 1,
            "class": "ProAct.ValueEvent",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/value_event.js",
            "line": 42,
            "description": "A `ValueEvent` represents change of a property from an old value to a new value.\nThis method returns the old value, that was changed.",
            "instance": "",
            "itemtype": "method",
            "name": "fromVal",
            "return": {
                "description": "The old value.",
                "type": "Object"
            },
            "class": "ProAct.ValueEvent",
            "module": "proact-properties"
        },
        {
            "file": "src/js/properties/value_event.js",
            "line": 61,
            "description": "A `ValueEvent` represents change of a property from an old value to a new value.\nThis method returns the new value.",
            "instance": "",
            "itemtype": "method",
            "name": "toVal",
            "return": {
                "description": "The new value.",
                "type": "Object"
            },
            "class": "ProAct.ValueEvent",
            "module": "proact-properties"
        },
        {
            "file": "src/js/streams/buffered_stream.js",
            "line": 58,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.BufferedStream",
            "final": 1,
            "class": "ProAct.BufferedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/buffered_stream.js",
            "line": 68,
            "description": "Flushes the stream by emitting all the events/values stored in its buffer.\nThe buffer becomes empty.",
            "instance": "",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.BufferedStream"
            },
            "class": "ProAct.BufferedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 47,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.DebouncingStream",
            "final": 1,
            "class": "ProAct.DebouncingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 57,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n But the buffer of `ProAct.DebouncingStream` can store only one value/event, so when the delay passes only\n the last value/event triggered into the stream by this method is emitted.\n On every call of this method the delay is reset.\n So for example if you have mouse move as source, it will emit only the last mouse move event, that was send <i>delay</i> milliseconds ago.\n</p>\n<p>\n ProAct.DebouncingStream.t is alias of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DebouncingStream"
            },
            "class": "ProAct.DebouncingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/debouncing_stream.js",
            "line": 89,
            "description": "Creates a new {{#crossLink \"ProAct.DebouncingStream\"}}{{/crossLink}} instance having as source <i>this</i>.",
            "memberof": "ProAct.Stream",
            "instance": "",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.DebouncingStream\"}}{{/crossLink}} instance.",
                "type": "ProAct.DebouncingStream"
            },
            "class": "ProAct.DebouncingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 62,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.DelayedStream",
            "final": 1,
            "class": "ProAct.DelayedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 72,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n</p>\n<p>\n `ProAct.DelayedStream.t` is alias of this method.\n</p>\nTODO - this method shoudl be private, we don't want manual triggering...",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 96,
            "description": "<p>\n Cancels the delay interval flushes. If this method is called the stream will stop emitting incoming values/event,\n until the {{#crossLink \"ProAct.DelayedStream/setDelay:method\"}}{{/crossLink}} method is called.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "cancelDelay",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 117,
            "description": "<p>\n Modifies the delay of the stream. The current delay is canceled using the {{#crossLink \"ProAct.DelayedStream/cancelDelay:method\"}}{{/crossLink}} method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "setDelay",
            "params": [
                {
                    "name": "delay",
                    "description": "The new delay of the stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.DelayedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/delayed_stream.js",
            "line": 149,
            "description": "Creates a new {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}} instance having as source <i>this</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}} instance.",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 5,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.\n\nThis method is capable of creating various `source` streams.\n\nFor example if the method is called like that:\n```\n var stream = ProAct.stream();\n```\n\nA sourceless stream will be created, but it will be possible to invoke `trigger*` on it:\n```\n stream.trigger(val);\n stream.triggerErr(new Error());\n stream.triggerClose();\n```\n\nThe method can be called with a subscribe function too:\n```\n var stream = ProAct.stream(function (source) {\n   // ... logic using the source - the source is a stream, that has trigger/triggerErr/triggerClose\n   $('.sel').on('click.myClick', function (e) {\n     source.trigger(e);\n   });\n\n   return function () {\n     // unsubscribing logic\n     $('.sel').off('click.myClick');\n   };\n });\n```\n\nSo subscribe/unsubscribe to an even source can be programmed using this method.\n\nThe first argument can be a string too and if that's the case, {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}'s\n`fromString` method will be used for the stream construction.",
            "itemtype": "method",
            "name": "stream",
            "params": [
                {
                    "name": "subscribe",
                    "description": "Can be null for no subsbcribe functon, can function to be used for subscribtion to a source or\n     can be string to use it with {{#crossLink \"ProAct.Stream/fromString:method\"}}{{/crossLink}}",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "transformations",
                    "description": "A list of transformation to be used on all incoming chages.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "source",
                    "description": "A default source of the stream, can be null.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>\n     <p>\n       If this parameter is not a string it is used as the\n       <i>source</i>.\n     </p>",
                    "type": "String"
                }
            ],
            "static": 1,
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 83,
            "description": "Creates a closed {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "closed",
            "static": 1,
            "return": {
                "description": "A closed {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 97,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits the passed \"value\" once and then closes.\n<p>Example:</p>\n<pre>\n   var stream = ProAct.timeout(1000, 7);\n   stream.on(function (v) {\n     console.log(v);\n   });\n\n  // This will print '7' after 1s and will close.\n\n</pre>",
            "itemtype": "method",
            "name": "timeout",
            "static": 1,
            "params": [
                {
                    "name": "timeout",
                    "description": "The time to wait (in milliseconds) before emitting the <i>value</i> and close.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to emit.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 132,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits the passed \"value\" over and over again at given time interval.\n<p>Example:</p>\n<pre>\n   var stream = ProAct.interval(1000, 7);\n   stream.on(function (v) {\n     console.log(v);\n   });\n\n  // This will print one number on every 1s and the numbers will be 7,7,7,7,7....\n\n</pre>",
            "itemtype": "method",
            "name": "interval",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "The time in milliseconds on which the <i>value</i> will be emitted.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to emit.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 166,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits values of the passed <i>vals</i> array on the passed <i>interval</i> milliseconds.\n<p>\n When every value is emitted through the stream it is closed.\n<p>\n<p>Example:</p>\n<pre>\n   var stream = ProAct.seq(1000, [4, 5]);\n   stream.on(function (v) {\n     console.log(v);\n   });\n\n  // This will print one number on every 1s and the numbers will be 4 5 and the stream will be closed.\n\n</pre>",
            "itemtype": "method",
            "name": "seq",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "The time in milliseconds on which a value of the passed <i>vals</i> array will be emitted.",
                    "type": "Number"
                },
                {
                    "name": "vals",
                    "description": "The array containing the values to be emitted on the passed <i>interval</i>.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 214,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits values of the passed <i>vals</i> array on the passed interval.\n<p>\n When every value is emitted through the stream they are emitted again and again and so on...\n<p>\n<p>Example:</p>\n<pre>\n   var stream = ProAct.repeat(1000, [4, 5]);\n   stream.on(function (v) {\n     console.log(v);\n   });\n\n  // This will print one number on every 1s and the numbers will be 4 5 4 5 4 5 4 5 4 5 .. and so on\n\n</pre>",
            "itemtype": "method",
            "name": "interval",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "The time in milliseconds on which a value of the passed <i>vals</i> array will be emitted.",
                    "type": "Number"
                },
                {
                    "name": "vals",
                    "description": "The array containing the values to be emitted on the passed <i>interval</i>.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 258,
            "description": "The {{#crossLink \"ProAct/fromInvoke:method\"}}{{/crossLink}} creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits the result of the passed\n<i>func</i> argument on every <i>interval</i> milliseconds.\n<p>\n If <i>func</i> returns {{#crossLink \"ProAct/closed:method\"}}{{/crossLink}} the stream is closed.\n</p>\n<p>Example:</p>\n<pre>\n   var stream = ProAct.fromInvoke(1000, function () {\n     return 5;\n   });\n   stream.on(function (v) {\n     console.log(v);\n   });\n\n   // After 1s we'll see '5' in the log, after 2s we'll see a second '5' in the log and so on...\n\n</pre>",
            "itemtype": "method",
            "name": "fromInvoke",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "The interval on which <i>func</i> will be called and its returned value will\n     be triggered into the stream.",
                    "type": "Number"
                },
                {
                    "name": "func",
                    "description": "The function to invoke in order to get the value to trigger into the stream.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 307,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}, which emits the result of an action that uses a callback\nto notify that it is finished.\n\nThis can be used to create streams from http requests for example.\n\nExample:\n```\n var stream = ProAct.fromCallback(action);\n stream.on(function (v) {\n   console.log(v);\n });\n\n```",
            "itemtype": "method",
            "name": "fromCallback",
            "static": 1,
            "params": [
                {
                    "name": "callbackCaller",
                    "description": "The action that receives a callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/functions.js",
            "line": 350,
            "description": "Creates a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source an evet emitter or dispatcher,\nit can be used with jQuery for example for example.\n\nExample:\n```\n var stream = ProAct.fromEventDispatcher($('.some-input'), 'keydown');\n stream.on(function (e) {\n   console.log(e.which);\n });\n\n```",
            "itemtype": "method",
            "name": "fromEventDispatcher",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The event dispatcher, can be a jQuery button, or a DOM element, or somethnig like that.",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "The type of the event - for example 'click'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} instance.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 66,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.SizeBufferedStream",
            "final": 1,
            "class": "ProAct.SizeBufferedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 76,
            "description": "<p>\n Triggers a new event/value to the stream. If the buffer is full, anything that is listening for events from\n this stream will get updated with all the values/events in the buffer.\n</p>\n<p>\n ProAct.Stream.t is alias of this method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.SizeBufferedStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/size_buffered_stream.js",
            "line": 107,
            "description": "Creates a new {{#crossLink \"ProAct.SizeBufferedStream\"}}{{/crossLink}} instance having as source <i>this</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "bufferit",
            "params": [
                {
                    "name": "size",
                    "description": "The size of the buffer of the new ProAct.SizeBufferedStream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.SizeBufferedStream\"}}{{/crossLink}} instance.",
                "type": "ProAct.SizeBufferedStream"
            },
            "throws": {
                "description": "`SizeBufferedStream` must contain size, if there is no size passed to it.",
                "type": "Error"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 123,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Stream",
            "final": 1,
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 133,
            "description": "Creates the <i>event</i> to be send to the listeners on update.\n<p>\n Streams don't create new events by default, the event is the source.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeEvent",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                }
            ],
            "return": {
                "description": "The event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 152,
            "description": "Creates the <i>listener</i> of this stream.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 177,
            "description": "Creates the <i>error listener</i> of this stream.\n<p>\n The listener pushes the incoming event into `this Stream` by default.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "makeErrListener",
            "return": {
                "description": "The <i>error listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 205,
            "description": "Creates the <i>closing listener</i> of this stream.\n\nPushes a closing notification into the stream by default.",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeCloseListener",
            "return": {
                "description": "The <i>closing listener of this stream</i>.",
                "type": "Object"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 232,
            "description": "Defers a `ProAct.Actor` listener.\n<p>\n For streams this means pushing it to active flow using {{#crossLink \"ProAct.Flow/push:method\"}}{{/crossLink}}.\n If the listener is object with 'property' field, it is done using {{#crossLink \"ProAct.Actor/defer:method\"}}{{/crossLink}}.\n That way the reactive environment is updated only once, but the streams are not part of it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defer",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to the listener.",
                    "type": "Object"
                },
                {
                    "name": "listener",
                    "description": "The listener to defer. It should be a function or object defining the <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 269,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and mapping\nthe passed <i>mapping function</i>.\n\n```\n  var mapped = stream.map(function (v) {\n    return v * v;\n  });\n\n  mapped.on(function (v) {\n    console.log(v); // squares\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mappingFunction",
                    "description": "Function or object with a <i>call method</i> to use as map function.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>mapping</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 295,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and filtering\nthe passed <i>filtering function</i>.\n\n```\n  var filtered = stream.filter(function (v) {\n    return v % 2 === 1;\n  });\n\n  filtered.on(function (v) {\n    console.log(v); // odds\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filteringFunction",
                    "description": "The filtering function or object with a call method, should return boolean.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>filtering</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 321,
            "description": "Creates a new `ProAct.Stream` instance with source <i>this</i> and accumulation\nthe passed <i>accumulation function</i>.\n\n```\n var acc = stream.accumulate(0, function (p, v) {\n   return p + v;\n });\n\n acc.on(console.log); // sums\n```",
            "instance": "",
            "itemtype": "method",
            "name": "accumulate",
            "params": [
                {
                    "name": "initVal",
                    "description": "Initial value for the accumulation. For example '0' for sum.",
                    "type": "Object"
                },
                {
                    "name": "accumulationFunction",
                    "description": "The function to accumulate.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the <i>accumulation</i> applied.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 347,
            "description": "Creates a new `ProAct.Stream` instance that merges this with other streams.\nThe new instance will have new value on value from any of the source streams.\n\n```\n var merged = stream1.merge(stream2);\n```\n\nHere if `stream1` emits:\n1--2---3----5-----X\n\nand `steam2` emits:\n----A-----B-----C-----D--X\n\n`merged` will emit:\n1--2A--3--B-5---C-----D--X",
            "instance": "",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "...",
                    "description": "A list of streams to be set as sources.",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new `ProAct.Stream` instance with the sources this and all the passed streams.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 379,
            "description": "Links source actors into this `ProAct.Stream`. This means that <i>this stream</i>\nis listening for changes from the <i>sources</i>.\n\nThe streams count their sources and when the sources are zero, they become inactive.\n\n```\n var stream1 = ProAct.stream();\n var stream2 = ProAct.stream();\n var stream = ProAct.stream();\n\n stream.into(stream1, stream2);\n stream.on(function (v) {\n   console.log(v);\n });\n\n```\n\nNow if the any of the source streams is emits,\nthe notification will be printed on the output.",
            "instance": "",
            "itemtype": "method",
            "name": "into",
            "params": [
                {
                    "name": "...",
                    "description": "Zero or more source }{{/crossLink}}s to set as sources.",
                    "type": "{#crossLink \"ProAct.Actor\"",
                    "optional": true
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 416,
            "description": "Checks if <i>this</i> can be closed.\n\nUses the number of the active sources to decide if `this stream` is ready to be closed.\nIf the active sources are zero - it can.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "canClose",
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 437,
            "description": "Turns this `ProAct.Actor` to a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}.\n\nIn reality this method creates a new `Stream` with source this.",
            "instance": "",
            "itemtype": "method",
            "name": "toStream",
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 450,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt skips the first `n` updates incoming from `this`.\n\nsource : --3---4---5--4---3---4---5--|->\nskip(3): -------------4---3---4---5--|->",
            "instance": "",
            "itemtype": "method",
            "name": "skip",
            "params": [
                {
                    "name": "n",
                    "description": "The number of notifications to skip.",
                    "type": "Number"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 479,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt skips notifications from its source, while a condition is true.\n\n```\n\n source.skipWhile(function (v) {\n     return v % 2 === 1;\n });\n\n // source :\n // --3---5---2--4---3---4---5--|->\n // skipWhile:\n // ----------2--4---3---4---5--|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "skipWhile",
            "params": [
                {
                    "name": "condition",
                    "description": "A condition function, which is called for each of the incoming values\n       While it returns true, the elements are skipped,\n       after it returns false for the first time, the current and all the following values are emitted.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 523,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt skips dublicating elements, comming one after another.\n\n```\n\n source.skipDuplicates();\n\n // source :\n // --3---5---5--4---3---3---5--|->\n // skipDuplicates:\n // --3---5------4---3-------5--|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "skipDuplicates",
            "params": [
                {
                    "name": "comparator",
                    "description": "A function used to compare the elements.\n     If nothing is passed it defaults to comparing using `===`.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 558,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt emits the difference between the last update and the current incomming update from the source.\n\n```\n\n source.diff(0, function(prev, v) {\n     return v - prev;\n });\n\n // source :\n // --3---5------6---|->\n // diff:\n // --3---2------1---|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "diff",
            "params": [
                {
                    "name": "seed",
                    "description": "A value to pass the `differ` function as previous on the inital notification from the source.",
                    "type": "Object"
                },
                {
                    "name": "differ",
                    "description": "Creates the difference, receives two params - the previous update and the current.\n     It can be skipped - the default `differ` function returns array with two elements - the previous and the curren updates.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 605,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt takes the first `limit` updates incoming from `this`.\n\nsource : --3---4---5--4---3---4---5--|->\nskip(3): --3---4---5--|->",
            "instance": "",
            "itemtype": "method",
            "name": "take",
            "params": [
                {
                    "name": "limit",
                    "description": "The number of notifications to emit.",
                    "type": "Number"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 630,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nIt emits notifications from its source, while a condition is true.\n\n```\n\n source.takeWhile(function (v) {\n     return v % 2 === 1;\n });\n\n // source :\n // --3---5---2--4---3---4---5--|->\n // takeWhile:\n // --3---5--|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "takeWhile",
            "params": [
                {
                    "name": "condition",
                    "description": "A condition function, which is called for each of the incoming values\n       While it returns true, the elements are emitted,\n       after it returns false for the first time, the stream created by takeWhile closes.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 665,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nThe logic of the stream is implemented through the passed `lambda` parameter.\n\nTODO The first parameter of the lambda should be called something else and not stream.\n\n```\n source.fromLambda(function (stream, notification) {\n   stream.trigger(notification);\n });\n\n // Just forwards notifications..\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "fromLambda",
            "params": [
                {
                    "name": "lambda",
                    "description": "A function, with two arguments - the returned by this function stream and notification.\n     For every update comming from `this`, the lambda is called with the update and the stream in it.\n     Has the `trigger`, `triggerErr` and `triggerClose` methods.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 707,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nFor every update incomming from the source, a new `Actor` is created using the `mapper`\nfunction. All the updates, emitted by the streams, returned by the `mapper` are emitted by the\n`Actor` created by `flatMap`\n\n\n```\n source.flatMap(function (v) {\n   return ProAct.seq(100, [v, v +1 ]);\n });\n\n // source:\n // -1---2----4-----3-----2-----1---->\n // flatMap\n // -1-2-2-3--4-5---3-4---2-3---1-2-->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "flatMap",
            "params": [
                {
                    "name": "mapper",
                    "description": "A function that returns an `ProAct.Actor` using the incomming notification.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 741,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nFor every update incomming from the source, a new `Actor` is created using the `mapper`\nfunction. ALl the updates, emitted by the streams, returned by the `mapper` are emitted by the\n`Actor` created by `flatMap`. The number of the currently active sources is limited by the\npassed `limit`. All the sources created after the limit is reached are queued and reused as sources later.",
            "instance": "",
            "itemtype": "method",
            "name": "flatMapLimited",
            "params": [
                {
                    "name": "mapper",
                    "description": "A function that returns an `ProAct.Actor` using the incomming notification.",
                    "type": "Function"
                },
                {
                    "name": "limit",
                    "description": "The number of the currently active sources.",
                    "type": "Number"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 784,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nFor every update comming from `this`, a new `ProAct.Actor` is created using the logic\npassed through `mapper`. This new `Actor` becomes the current source of the `ProAct.Stream`,\nreturned by this method. The next update will create a new source, which will become\nthe current one and replace the old one. This is the same as {{#crossLink \"ProAct.Actor/flatMapLimited:method\"}}{{/crossLink}},\nwith `limit` of `1`.\n\n```\n source.flatMapLast(function (v) {\n   return ProAct.seq(100, [v, v + 1, v + 2, v + 3]);\n });\n\n // source:\n // -1---2----4-----3-----2-----1----|->\n // flatMapLast\n // -1-2-2-3-44-5-6-3-4-5-2-3-4-1-2-3-4-|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "flatMapLast",
            "params": [
                {
                    "name": "mapper",
                    "description": "A function that returns an `ProAct.Actor` using the incomming notification.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/stream.js",
            "line": 822,
            "description": "Creates a new {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} with source - `this`.\nFor every update comming from `this`, a new `ProAct.Actor` is created using the logic\npassed through `mapper`. The first such `Actor` becomes the source of the `Actor`, returned by this\nmethod. When it finishes, if a new `Actor` is emitted, it becomes the source.\n\n```\n source.flatMapLast(function (v) {\n   return ProAct.seq(100, [v, v + 1, v + 2, v + 3]);\n });\n\n // source:\n // -1---2----4-----3-----2-----1----|->\n // flatMapFirst\n // -1-2-3-4--4-5-6-7-----2-3-4-5-|->\n\n```",
            "instance": "",
            "itemtype": "method",
            "name": "flatMapFirst",
            "params": [
                {
                    "name": "mapper",
                    "description": "A function that returns an `ProAct.Actor` using the incomming notification.",
                    "type": "Function"
                }
            ],
            "class": "ProAct.Actor",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/subscribable_stream.js",
            "line": 54,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.SubscribableStream",
            "final": 1,
            "class": "ProAct.SubscribableStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/subscribable_stream.js",
            "line": 64,
            "description": "Attaches a new listener to this `ProAct.SubscribableStream`.\n\nThe listener may be function or object that defines a <i>call</i> method.\nOn the first attached listener the `subscribe` function passed to the constructor will be called.\nThat way the stream will be subscribed to custom data source.\n\n```\n  stream.on(function (v) {\n   console.log(v);\n  });\n\n  stream.on('error', function (v) {\n   console.error(v);\n  });\n\n  stream.on({\n   call: function (v) {\n     console.log(v);\n   }\n  });\n```",
            "instance": "",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to listen for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to attach. It must be instance of Function or object with a <i>call</i> method.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.SubscribableStream"
            },
            "class": "ProAct.SubscribableStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/subscribable_stream.js",
            "line": 110,
            "description": "Removes a <i>listener</i> from the passed <i>action</i>.\n\nIf this method is called without parameters, all the listeners for all the actions are removed.\nThe listeners are reset using {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}}.\n\nIf the last listener is removed using this method, `this stream` authomatically unsubscribes\nfrom the source, using the function, returned by the `subscribe` function passed to the constructor.\n\nExamples are:\n\nRemoving a listener:\n```\n var listener = function (v) {\n   console.log(v);\n };\n stream.on(listener);\n stream.off(listener);\n```\n\nOr for removing all the listeners attached to an stream:\n```\n stream.off();\n```\n\nOr for removing all the listeners of a given type attached to an stream:\n```\n stream.off('error');\n```\n\nOr for removing a listener from different type of actions:\n```\n var listener = function (v) {\n   console.log(v);\n };\n stream.on(listener);\n stream.onErr(listener);\n\n stream.off(['error', 'change'], listener);\n```",
            "instance": "",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "actions",
                    "description": "The action/actions to stop listening for. If this parameter is skipped or null/undefined,\n     the actions from {{#crossLink \"ProAct.Actor/defaultActions:method\"}}{{/crossLink}} are used.\n     <p>\n       The actions can be skipped and on their place as first parameter to be passed the <i>listener</i>.\n     </p>",
                    "type": "Array|String"
                },
                {
                    "name": "listener",
                    "description": "The listener to detach. If it is skipped, null or undefined all the listeners are removed from this actor.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.SubscribableStream"
            },
            "class": "ProAct.SubscribableStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 50,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ThrottlingStream",
            "final": 1,
            "class": "ProAct.ThrottlingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 60,
            "description": "<p>\n Triggers a new event/value to the stream. It is stored in the buffer of the stream and not emitted.\n But the buffer of `ProAct.ThrottlingStream` can store only one value/event, so when the delay passes only\n the last value/event triggered into the stream by this method is emitted.\n</p>\n<p>\n `ProAct.ThrottlingStream.t` is alias of this method.\n</p>\n\nTODO - should be moved to StreamUtil.",
            "instance": "",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event/value to pass to trigger.",
                    "type": "Object"
                },
                {
                    "name": "useTransformations",
                    "description": "If the stream should transform the triggered value. By default it is true (if not passed)",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.ThrottlingStream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/streams/throttling_stream.js",
            "line": 92,
            "description": "Creates a new {{#crossLink \"ProAct.ThrottlingStream\"}}{{/crossLink}} instance having as source <i>this</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "throttle",
            "params": [
                {
                    "name": "delay",
                    "description": "The time delay to be used for flushing the buffer of the new stream.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ThrottlingStream\"}}{{/crossLink}} instance.",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.Stream",
            "module": "proact-streams"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 59,
            "description": "Represents setting a value to an index of an array.\n<pre>\n array[3] = 12;\n</pre>",
            "itemtype": "property",
            "name": "set",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 72,
            "description": "Represents adding values to array.\n<pre>\n array.push(12);\n array.unshift(12);\n</pre>",
            "itemtype": "property",
            "name": "add",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 86,
            "description": "Represents removing values from array.\n<pre>\n array.pop();\n array.shift();\n</pre>",
            "itemtype": "property",
            "name": "remove",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 100,
            "description": "Represents setting the length of an array.\n<pre>\n array.length = 5;\n</pre>",
            "itemtype": "property",
            "name": "setLength",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 113,
            "description": "Represents reversing the element order in an array.\n<pre>\n array.reverse();\n</pre>",
            "itemtype": "property",
            "name": "reverse",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 126,
            "description": "Represents sorting the elements in an array.\n<pre>\n array.sort();\n</pre>",
            "itemtype": "property",
            "name": "sort",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 139,
            "description": "Represents the powerful <i>splice</i> operation.\n<pre>\n array.splice(2, 3, 4, 15, 6);\n</pre>",
            "itemtype": "property",
            "name": "splice",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Array.Operations",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 153,
            "description": "A helper method for filtering an array and notifying the right listeners of the filtered result.\n<p>\n This is used if there is an `ProAct.Array` created by filtering another `ProAct.Array`.\n If the original is changed, the filtered array should be changed in some cases.\n So refilter does this - changes the dependent filtered array, using\n {{#crossLink \"ProAct.ArrayCore/updateByDiff:method\"}}{{/crossLink}}.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "original",
                    "description": "The original array to filter by.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "filtered",
                    "description": "The array to be filtered - changed by a filter function, applied on the original.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "filterArgs",
                    "description": "Arguments of the filtering - filtering function and data.",
                    "type": "Array"
                }
            ],
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 182,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Array",
            "final": 1,
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 192,
            "description": "The <b>concat()</b> method returns a new array comprised of this array joined with other array(s) and/or value(s).\n<p>\n The result `ProAct.Array` is dependent on <i>this</i>, so if <i>this</i> changes, the concatenation resut will be updated.\n</p>\n<p>\n If the argument passed is another `ProAct.Array` the result array is dependent on it too.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "...",
                    "description": "Arrays and/or values to concatenate to the resulting array.",
                    "optional": true
                }
            ],
            "return": {
                "description": "A new `ProAct.Array` consisting of the elements in the <i>this</i> object on which it is called, followed in order by,\n     for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 229,
            "description": "The <b>every()</b> method tests whether all elements in the `ProAct.Array` pass the test implemented by the provided function.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to test for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>callback</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if all the elements in the <i>this</i> ProAct.Array pass the test implemented by the <i>callback</i>, false otherwise.",
                "type": "Boolean"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 254,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/every:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on the array.",
            "instance": "",
            "itemtype": "method",
            "name": "pevery",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to test for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>callback</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{{#crossLink \"ProAct.Property\"}}{{/crossLink}} with value of true if all the elements in <i>this</i> `ProAct.Array` pass the test implemented by the <i>fun</i>, false otherwise.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 275,
            "description": "The <b>some()</b> method tests whether some element in the array passes the test implemented by the provided function.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to test for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>callback</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if one or more of the elements in <i>this</i> `ProAct.Array` pass the test implemented by the <i>callback</i>, false otherwise.",
                "type": "Boolean"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 297,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/some:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on the array.",
            "instance": "",
            "itemtype": "method",
            "name": "psome",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to test for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>callback</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{{#crossLink \"ProAct.Property\"}}{{/crossLink}} with value of true if one or more of the elements in <i>this</i> `ProAct.Array` pass the test implemented by the <i>fun</i>, false otherwise.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 318,
            "description": "The <b>forEach()</b> method executes a provided function once per array element.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to execute for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as <i>this</i> when executing <i>callback</i>.",
                    "type": "Object"
                }
            ],
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 338,
            "description": "The <b>filter()</b> method creates a new `ProAct.Array` with all elements that pass the test implemented by the provided function.\n<p>\n The result `ProAct.Array` is dependent on <i>this</i>, so if <i>this</i> changes, the filtered resut will be updated.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to test for each element.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>fun</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Array` consisting of the elements in <i>this</i> `ProAct.Array` that pass the test implemented by <i>fun</i>.",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 368,
            "description": "The <b>map()</b> method creates a new `ProAct.Array` with the results of calling a provided function on every element in <i>this</i> `ProAct.Array`.\n<p>\n The result `ProAct.Array` is dependent on <i>this</i>, so if <i>this</i> changes, the mapped resut will be updated.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fun",
                    "description": "Function that produces an element of the new `ProAct.Array`, taking three arguments:\n     <ol>\n       <li><b>currentValue</b> : The current element being processed in the array.</li>\n       <li><b>index</b> : The index of the current element being processed in the array.</li>\n       <li><b>array</b> : The array map was called upon.</li>\n     </ol>",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing <i>fun</i>.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new `ProAct.Array` consisting of the elements in <i>this</i> `ProAct.Array` transformed by <i>fun</i>.",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 396,
            "description": "The <b>reduce()</b> method applies a function against an accumulator and each value of the `ProAct.Array` (from left-to-right) has to reduce it to a single value.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to execute on each value in the array, taking four arguments:\n     <ol>\n       <li><b>previousValue</b> : The value previously returned in the last invocation of the <i>fun</i>, or <i>initialValue</i>, if supplied.</li>\n       <li><b>currentValue</b> : The current element being processed in the `ProAct.Array`.</li>\n       <li><b>index</b> : The index of the current element being processed in the `ProAct.Array`.</li>\n       <li><b>array</b> : The array reduce was called upon.</li>\n     </ol>",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Object to use as the first argument to the first call of the <i>fun</i> .",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value of the last <i>fun</i> invocation.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 424,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/reduce:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on <i>this</i> `ProAct.Array`.",
            "instance": "",
            "itemtype": "method",
            "name": "preduce",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to execute on each value in the array, taking four arguments:\n     <ol>\n       <li><b>previousValue</b> : The value previously returned in the last invocation of the <i>fun</i>, or <i>initialValue</i>, if supplied.</li>\n       <li><b>currentValue</b> : The current element being processed in the `ProAct.Array`.</li>\n       <li><b>index</b> : The index of the current element being processed in the `ProAct.Array`.</li>\n       <li><b>array</b> : The array reduce was called upon.</li>\n     </ol>",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Object to use as the first argument to the first call of the <i>fun</i> .",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{{#crossLink \"ProAct.Property\"}}{{/crossLink}} with value of the last <i>fun</i> invocation.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 450,
            "description": "The <b>reduceRight()</b> method applies a function against an accumulator and each value of the `ProAct.Array` (from right-to-left) as to reduce it to a single value.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "reduceRight",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to execute on each value in the array, taking four arguments:\n     <ol>\n       <li><b>previousValue</b> : The value previously returned in the last invocation of the <i>fun</i>, or <i>initialValue</i>, if supplied.</li>\n       <li><b>currentValue</b> : The current element being processed in the `ProAct.Array`.</li>\n       <li><b>index</b> : The index of the current element being processed in the `ProAct.Array`.</li>\n       <li><b>array</b> : The array reduce was called upon.</li>\n     </ol>",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Object to use as the first argument to the first call of the <i>fun</i> .",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The value of the last <i>fun</i> invocation.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 478,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/reduceRight:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on <i>this</i> `ProAct.Array`.",
            "instance": "",
            "itemtype": "method",
            "name": "preduceRight",
            "params": [
                {
                    "name": "fun",
                    "description": "Function to execute on each value in the array, taking four arguments:\n     <ol>\n       <li><b>previousValue</b> : The value previously returned in the last invocation of the <i>fun</i>, or <i>initialValue</i>, if supplied.</li>\n       <li><b>currentValue</b> : The current element being processed in the `ProAct.Array`.</li>\n       <li><b>index</b> : The index of the current element being processed in the `ProAct.Array`.</li>\n       <li><b>array</b> : The array reduce was called upon.</li>\n     </ol>",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Object to use as the first argument to the first call of the <i>fun</i> .",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "{{#crossLink \"ProAct.Property\"}}{{/crossLink}} with value of the last <i>fun</i> invocation.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 504,
            "description": "The <b>indexOf()</b> method returns the first index at which a given element can be found in the ProAct.Array, or -1 if it is not present.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "searchElement",
                    "description": "Element to locate in the ProAct.Array.",
                    "type": "Object"
                },
                {
                    "name": "fromIndex",
                    "description": "Default: 0 (Entire array is searched)\n     <p>\n       The index to start the search at.\n       If the index is greater than or equal to the `ProAct.Array`'s length, -1 is returned,\n       which means the array will not be searched.\n       If the provided index value is a negative number,\n       it is taken as the offset from the end of the `ProAct.Array`.\n     </p>\n     <p>\n       Note: if the provided index is negative, the `ProAct.Array` is still searched from front to back.\n       If the calculated index is less than 0, then the whole `ProAct.Array` will be searched.\n     </p>",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The index of the searched element or '-1' if it is not found in <i>this</i> `ProAct.Array`.",
                "type": "Number"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 537,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/indexOf:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on <i>this</i> `ProAct.Array`.",
            "instance": "",
            "itemtype": "method",
            "name": "pindexOf",
            "params": [
                {
                    "name": "searchElement",
                    "description": "Element to locate in the `ProAct.Array`.",
                    "type": "Object"
                },
                {
                    "name": "fromIndex",
                    "description": "Default: 0 (Entire array is searched)\n     <p>\n       The index to start the search at.\n       If the index is greater than or equal to the `ProAct.Array`'s length, -1 is returned,\n       which means the array will not be searched.\n       If the provided index value is a negative number,\n       it is taken as the offset from the end of the `ProAct.Array`.\n     </p>\n     <p>\n       Note: if the provided index is negative, the `ProAct.Array` is still searched from front to back.\n       If the calculated index is less than 0, then the whole ProAct.Array will be searched.\n     </p>",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with value, the index of the searched element or '-1' if it is not found in <i>this</i> `ProAct.Array`.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 568,
            "description": "The <b>lastIndexOf()</b> method returns the last index at which a given element can be found in the `ProAct.Array`, or -1 if it is not present.\nThe ProAct.Array is searched backwards, starting at <i>fromIndex</i>.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "lastIndexOf",
            "params": [
                {
                    "name": "searchElement",
                    "description": "Element to locate in the ProAct.Array.",
                    "type": "Object"
                },
                {
                    "name": "fromIndex",
                    "description": "<p>\n       The index at which to start searching backwards.\n       Defaults to the ProAct.Array's length, i.e. the whole array will be searched.\n       If the index is greater than or equal to the length of the `ProAct.Array`, the whole `ProAct.Array` will be searched.\n       If negative, it is taken as the offset from the end of the `ProAct.Array`.\n     </p>\n     <p>\n       Note that even when the index is negative,\n       the ProAct.Array is still searched from back to front.\n       If the calculated index is less than 0, -1 is returned, i.e. the `ProAct.Array` will not be searched.\n     </p>",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The index of the searched backwards element or '-1' if it is not found in <i>this</i> `ProAct.Array`.",
                "type": "Number"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 601,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/lastIndexOf:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on <i>this</i> `ProAct.Array`.",
            "instance": "",
            "itemtype": "method",
            "name": "plastindexOf",
            "params": [
                {
                    "name": "searchElement",
                    "description": "Element to locate in the `ProAct.Array`.",
                    "type": "Object"
                },
                {
                    "name": "fromIndex",
                    "description": "<p>\n       The index at which to start searching backwards.\n       Defaults to the `ProAct.Array`'s length, i.e. the whole array will be searched.\n       If the index is greater than or equal to the length of the `ProAct.Array`, the whole ProAct.Array will be searched.\n       If negative, it is taken as the offset from the end of the` ProAct.Array`.\n     </p>\n     <p>\n       Note that even when the index is negative,\n       the ProAct.Array is still searched from back to front.\n       If the calculated index is less than 0, -1 is returned, i.e. the `ProAct.Array` will not be searched.\n     </p>",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with value, the index of the backwards searched element or '-1' if it is not found in <i>this</i> `ProAct.Array`.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 631,
            "description": "The <b>join()</b> method joins all elements of an `ProAct.Array` into a string.\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "separator",
                    "description": "Specifies a string to separate each element of the `ProAct`.\n     The separator is converted to a string if necessary.\n     <p>\n      If omitted, the ProAct.Array elements are separated with a comma.\n     </p>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A string representation of all the elements in <i>this</i> `ProAct.Array`, separated by the provided <i>separator</i>.",
                "type": "String"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 655,
            "description": "Does the same as the {{#crossLink \"ProAct.Array/join:method\"}}{{/crossLink}} method, but the result is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} depending on changes on <i>this</i> `ProAct.Array`.",
            "instance": "",
            "itemtype": "method",
            "name": "pjoin",
            "params": [
                {
                    "name": "separator",
                    "description": "Specifies a string to separate each element of the `ProAct`.\n     The separator is converted to a string if necessary.\n     <p>\n      If omitted, the ProAct.Array elements are separated with a comma.\n     </p>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance with value : string representation of all the elements in <i>this</i> `ProAct.Array`, separated by the provided <i>separator</i>.",
                "type": "ProAct.Property"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 682,
            "description": "The <b>toLocaleString()</b> method returns a string representing the elements of the ProAct.Array.\nThe elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \",\").\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "toLocaleString",
            "return": {
                "description": "Locale-specific string representing the elements of <i>this</i> ProAct.Array.",
                "type": "String"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 701,
            "description": "The <b>toString()</b> method returns a string representing the specified `ProAct.Array` and its elements.\nThe elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \",\").\n<p>\n This method adds the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} as a listener to both 'index' type and 'length' type of changes.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representing the elements of <i>this</i> `ProAct.Array`.",
                "type": "String"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 720,
            "description": "Returns the result of {{#crossLink \"ProAct.Array/toArray:method\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "valueOf",
            "return": {
                "description": "This ProAct.Array converted to plain JavaScript array.",
                "type": "Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 733,
            "description": "The <b>slice()</b> method returns a shallow copy of a portion of <i>this</i> `ProAct.Array` into a new `ProAct.Array` object.\n<p>\n The result `ProAct.Array` is dependent on <i>this</i>, so if <i>this</i> changes, the slice resut will be updated.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "slice",
            "params": [
                {
                    "name": "begin",
                    "description": "Zero-based index at which to begin extraction.\n     As a negative index, begin indicates an offset from the end of the sequence. slice(-2) extracts the last two elements in the sequence.\n     If begin is omitted, slice begins from index 0.",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "Zero-based index at which to end extraction. slice extracts up to but not including end.\n     slice(1,4) extracts the second element up to the fourth element (elements indexed 1, 2, and 3).\n     As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\n     If end is omitted, slice extracts to the end of the sequence.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A portion of <i>this</i> `ProAct.Array`, dependent on it.",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 761,
            "description": "The <b>reverse()</b> method reverses an `ProAct.Array` in place. The first array element becomes the last and the last becomes the first.\n<p>\n This method notifies the 'index' listeners attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "reverse",
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 781,
            "description": "The <b>sort()</b> method sorts the elements of <i>this</i> `ProAct.Array` in place and returns the <i>this</i>. The sort is not necessarily stable.\nThe default sort order is according to string Unicode code points.\n<p>\n This method notifies the 'index' listeners attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "sort",
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 805,
            "description": "The <b>splice()</b> method changes the content of <i>this</i> `ProAct.Array`, adding new elements while removing old elements.\n<p>\n This method may notify the 'index' listeners or the 'length' listeners, or even the both types of listeners, attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}, depending\n on what the splicing does - removing, adding or changing elements (removing and adding).\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "splice",
            "params": [
                {
                    "name": "index",
                    "description": "Index at which to start changing the `ProAct.Array`.\n     If greater than the length of the `ProAct.Array`, actual starting index will be set to the length of the <i>this</i>.\n     If negative, will begin that many elements from the end.",
                    "type": "Number"
                },
                {
                    "name": "howMany",
                    "description": "An integer indicating the number of old `ProAct.Array` elements to remove.\n     If howMany is 0, no elements are removed. In this case, you should specify at least one new element.\n     If howMany is greater than the number of elements left in the ProAct.Array starting at index,\n     then all of the elements through the end of the ProAct.Array will be deleted.",
                    "type": "Number"
                },
                {
                    "name": "...",
                    "description": "<b>element1, ..., elementN</b>:\n     <p>\n       The elements to add to the `ProAct.Array`. If you don't specify any elements, splice simply removes elements from the `ProAct.Array`.\n     </p>",
                    "optional": true
                }
            ],
            "return": {
                "description": "An `ProAct.Array` containing the removed elements.\n     If only one element is removed, an `ProAct.Array` of one element is returned.\n     If no elements are removed, an empty `ProAct.Array` is returned.",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 859,
            "description": "The <b>pop()</b> method removes the last element from an `ProAct.Array` and returns that element.\n<p>\n This method notifies the 'length' listeners, attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>\n<p>\n This method removes the special index accessor of the deleted element's index - the last index.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "The removed element. If <i>this</i> `ProAct.Array` is empty the result is undefined.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 887,
            "description": "The <b>push()</b> method adds one or more elements to the end of an `ProAct.Array` and returns the new length of the `ProAct.Array`.\n<p>\n This method notifies the 'length' listeners, attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>\n<p>\n This method defines new index accessors for the elements on the new indexes. So these indexes can be set and read, and\n will attatch listeners to the {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}} or update them.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "...",
                    "description": "<b>element1, ..., elementN</b> : The elements to add to the end of the array.",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new length property of the <i>this</i>.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 919,
            "description": "The <b>shift()</b> method removes the first element from an `ProAct.Array` and returns that element. This method changes the length of the `ProAct.Array`.\n<p>\n This method notifies the 'length' listeners, attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>\n<p>\n This method removes the special index accessor of the deleted element's index - the zero index.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "The removed element. If <i>this</i> `ProAct.Array` is empty the result is undefined.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 947,
            "description": "The <b>unshift()</b> method adds one or more elements to the beginning of an `ProAct.Array` and returns the new length of the `ProAct.Array`.\n<p>\n This method notifies the 'length' listeners, attached to <i>this</i>' {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}}.\n</p>\n<p>\n This method defines new index accessors for the elements on the new indexes. So these indexes can be set and read, and\n will attatch listeners to the {{#crossLink \"ProAct.ArrayCore\"}}{{/crossLink}} or update them.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "unshift",
            "params": [
                {
                    "name": "...",
                    "description": "<b>element1, ..., elementN</b> : The elements to add to the front of the array.",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new length property of the <i>this</i>.",
                "type": "Object"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 979,
            "description": "Generates an plain array representation of <i>this</i>.\n<p>\n The returned array is shallow copy of <i>this</i>' content, so if modified with methods like 'push' or 'pop',\n <i>this</i> content will not be modified\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An plain JavaScript array representation of <i>this</i>.",
                "type": "Array"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 1008,
            "description": "Generates a JSON representation of <i>this</i>.",
            "instance": "",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "A JSON array representing <i>this</i>.",
                "type": "String"
            },
            "class": "ProAct.Array",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array.js",
            "line": 1024,
            "description": "Creates and returns a {{#crossLink \"ProAct.Array\"}}{{/crossLink}} instance, which tracks the changes of this.\nUses the current queue for queueing changes.",
            "instance": "",
            "itemtype": "method",
            "name": "toProArray",
            "return": {
                "description": "A `ProAct.Array` instance tracking the changes of `this`.",
                "type": "ProAct.Array"
            },
            "class": "ProAct.Actor",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 38,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ArrayCore",
            "final": 1,
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 48,
            "description": "Generates function wrapper around a normal function which sets\nthe {{#crossLink \"ProAct.ArrayCore/indexListener:method\"}}{{/crossLink}} of the index calling the function.\n<p>\n This is used if the array is complex - contains other ProAct.js objects, and there should be special\n updates for their elements/properties.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "actionFunction",
            "params": [
                {
                    "name": "fun",
                    "description": "The source function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The action function wrapper.",
                "type": "Function"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 78,
            "description": "Generates listener for given index or reuses already generated one.\n<p>\n This listener mimics a property listener, the idea is - if anything is listening to\n index changes in this' shell (array) and the shell is complex - has elements that are ProAct.js objects,\n if some of this element has property change, its notification should be dispatched to all the objects,\n listening to index changes in the array.\n</p>\n<p>\n So this way we can listen for stuff like array.[].foo - the foo property change for every element in the array.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "indexListener",
            "params": [
                {
                    "name": "i",
                    "description": "The index.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A listener mimicing a property one.",
                "type": "Object"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 120,
            "description": "Creates the <i>listener</i> of this `ProAct.ArrayCore`.\n<p>\n The right array typed events can change this' shell (array).\n</p>\n<p>\n If a non-event element is passed to the listener, the element is pushed\n to the shell.\n</p>\n<p>\n If a value event is passed to the listener, the new value is pushed\n to the shell.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeListener",
            "return": {
                "description": "The <i>listener of this ArrayCore</i>.",
                "type": "Object"
            },
            "class": "ProAct.Actor",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 210,
            "description": "Generates the initial listeners object.\nIt is used for resetting all the listeners too.\n<p>\n For `ProAct.ArrayCore` the default listeners object is\n <pre>\n   {\n     index: [],\n     length: []\n   }\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defaultListeners",
            "return": {
                "description": "A map containing the default listeners collections (index and length type of listeners).",
                "type": "Object"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 237,
            "description": "A list of actions or action to be used when no action is passed for the methods working with actions.\n<p>\n For `ProAct.ArrayCore` these are both 'length' and 'index' actions.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defaultActions",
            "default": "['length', 'index']",
            "return": {
                "description": "The actions to be used if no actions are provided to action related methods,\n     like {{#crossLink \"ProAct.Actor/on:method\"}}{{/crossLink}}, {{#crossLink \"ProAct.Actor/off:method\"}}{{/crossLink}}, {{#crossLink \"ProAct.Actor/update:method\"}}{{/crossLink}}, {{#crossLink \"ProAct.Actor/willUpdate:method\"}}{{/crossLink}}.",
                "type": "Array"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 256,
            "description": "Creates the <i>event</i> to be send to the listeners on update.\n<p>\n By default this method returns {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} event.\n</p>",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "makeEvent",
            "default": "{ProAct.Event} with type {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}}",
            "params": [
                {
                    "name": "source",
                    "description": "The source event of the event. It can be null",
                    "type": "ProAct.Event"
                },
                {
                    "name": "eventData",
                    "description": "An array of four elements describing the changes:\n     <ol>\n       <li>{{#crossLink \"ProAct.Array.Operations\"}}{{/crossLink}} member defining the changing operation - for example {{#crossLink \"ProAct.Array.Operations/add:property\"}}{{/crossLink}}</li>\n       <li>The index on which the chage occures.</li>\n       <li>The old values beginning from the index.</li>\n       <li>The new values beginning from the index.</li>\n     </ol>\n     Can be null. If null an empty (unchanging) event is created.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The event.",
                "type": "ProAct.Event"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 294,
            "description": "Uses {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} to automatically add a new listener to this property if the caller is set.\n<p>\n This method is used by the index getters or the length getter to make every reader of the length/index a listener to it.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "addCaller",
            "params": [
                {
                    "name": "type",
                    "description": "If the caller should be added as an 'index' listener or a 'length' listener. If skipped or null it is added as both.",
                    "type": "String"
                }
            ],
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 325,
            "description": "Special update method for updating listeners after a {{#crossLink \"ProAct.Array/splice:method\"}}{{/crossLink}} call.\n<p>\n Depending on the changes the index listeners, the length listeners or both can be notified.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "updateSplice",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the splice operation.",
                    "type": "Number"
                },
                {
                    "name": "spliced",
                    "description": "A list of the deleted items. Can be empty.",
                    "type": "Array"
                },
                {
                    "name": "newItems",
                    "description": "A list of the newly added items. Can be empty.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.ArrayCore"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 359,
            "description": "Special update method for updating listeners by comparrison to another array.\n<p>\n For every difference between <i>this shell</i>'s array and the passed one, there will be listeners notification.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "updateByDiff",
            "params": [
                {
                    "name": "array",
                    "description": "The array to compare to.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.ArrayCore"
            },
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 386,
            "description": "Initializes all the index accessors and the length accessor for <i>this's shell array</i>.\n<p>\n For the length on every read, the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is added as a 'length' listener.\n</p>\n<p>\n For every index on every read, the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is added as an 'index' listener.\n Listener accessors are defined using {{#crossLink \"ProAct.ArrayCore/defineIndexProp:method\"}}{{/crossLink}}.\n</p>\n<p>\n {{#crossLink \"ProAct.ArrayCore/addCaller:method\"}}{{/crossLink}} is used to retrieve the current caller and add it as the right listener.\n</p>\n<p>\n Setting values for an index or the length updates the right listeners.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "setup",
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_core.js",
            "line": 444,
            "description": "Defines accessors for index of <i>this' shell array</i>.\n<p>\n For an index on every read, the {{#crossLink \"ProAct/currentCaller:property\"}}{{/crossLink}} is added as an 'index' listener.\n</p>\n<p>\n {{#crossLink \"ProAct.ArrayCore/addCaller:method\"}}{{/crossLink}} is used to retrieve the current caller and add it as the right listener.\n</p>\n<p>\n Setting values for an index updates the 'index' listeners.\n</p>\n<p>\n If on the index is reciding an array or an object, it is turned to reactive object/array.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "defineIndexProp",
            "params": [
                {
                    "name": "i",
                    "description": "The index to define accessor for.",
                    "type": "Number"
                }
            ],
            "class": "ProAct.ArrayCore",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 137,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ArrayProperty",
            "final": 1,
            "class": "ProAct.ArrayProperty",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 147,
            "description": "Retrieves the {{#crossLink \"ProAct.Property.Types\"}}{{/crossLink}} value of <i>this</i> property.\n<p>\n For instances of the `ProAct.ArrayProperty` class, it is\n {{#crossLink \"ProAct.Property.Types/array:property\"}}{{/crossLink}}.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "type",
            "return": {
                "description": "The right type of the property.",
                "type": "Number"
            },
            "class": "ProAct.ArrayProperty",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 164,
            "description": "Called automatically after initialization of this property.\n<p>\n For `ProAct.ArrayProperty` it does nothing -\n the real initialization is lazy and is performed on the first read of <i>this</i>.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "afterInit",
            "class": "ProAct.ArrayProperty",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 179,
            "description": "<p>\n Constructor for `ProAct.ArrayPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instances for fields pointing to arrays.\n</p>\n<p>\n `ProAct.ArrayPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "extends": "ProAct.PropertyProvider",
            "is_constructor": 1,
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 200,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.ArrayPropertyProvider",
            "final": 1,
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 210,
            "description": "Used to check if this `ProAct.ArrayPropertyProvider` is compliant with the field and meta data.",
            "instance": "",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field name of the <i>object</i> to turn into a {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "True if the value of <b>object[property]</b> an array.",
                "type": "Boolean"
            },
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 229,
            "description": "Provides an instance of {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "queueName",
                    "description": "The name of the queue all the updates should be pushed to.\n     <p>\n       If this parameter is null/undefined the default queue of\n       {{#crossLink \"ProAct/flow:property\"}}{{/crossLink}} is used.\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to which a new {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance should be provided.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The field of the <i>object</i> to turn into a {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "meta",
                    "description": "Meta information to be used for filtering and configuration of the {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance to be provided.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "A {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instance provided by <i>this</i> provider.",
                "type": "ProAct.ArrayProperty"
            },
            "class": "ProAct.ArrayPropertyProvider",
            "module": "proact-arrays"
        },
        {
            "file": "src/js/arrays/array_property.js",
            "line": 260,
            "description": "ProAct.Property for array types - fields containing arrays.",
            "itemtype": "property",
            "name": "array",
            "type": "Number",
            "final": 1,
            "class": "ProAct.Property.Types",
            "module": "proact-arrays",
            "namespace": "ProAct.Property"
        },
        {
            "file": "src/js/arrays/array_utils.js",
            "line": 13,
            "description": "Checks if the passed value is instance of the {{#crossLink \"ProAct.Array\"}}{{/crossLink}} type or not.",
            "itemtype": "method",
            "name": "isProArray",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is a ProAct.Array instance.",
                "type": "Boolean"
            },
            "class": "ProAct.ArrayUtils",
            "module": "proact-arrays",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/arrays/array_utils.js",
            "line": 24,
            "description": "Checks if the passed value is a valid array-like object or not.\nArray like objects in ProAct.js are plain JavaScript arrays and {{#crossLink \"ProAct.Array\"}}{{/crossLink}}s.",
            "itemtype": "method",
            "name": "isArrayObject",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the passed `value` is an Array or ProAct.Array instance.",
                "type": "Boolean"
            },
            "class": "ProAct.ArrayUtils",
            "module": "proact-arrays",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 14,
            "description": "Checks the validity of an event.",
            "static": 1,
            "params": [
                {
                    "name": "event",
                    "description": "The event to check.",
                    "type": "ProAct.Event"
                }
            ],
            "throws": {
                "description": "If the event is not {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}}",
                "type": "Error"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 30,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.concat(7, 9); // b is [1, 3, 5, 7, 9]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.push(11); // b authomatically should become [1, 3, 5, 11, 7, 9]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "transformed",
                    "description": "The array created as a result of invoking {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 116,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} is invoked with argument, another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.\n<p>\n The result of the {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}},\n dependent on both the <i>original</i> and the passed as an argument one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var x = new ProAct.Array(7, 9);\n   var b = a.concat(x); // b is [1, 3, 5, 7, 9]\n </pre>\n The new array - <b>b</b> is dependent on <b>x</b>, so if for example we push something to <b>x</b>, <b>b</b> should be updated:\n <pre>\n   x.push(13); // b authomatically should become [1, 3, 5, 7, 9, 13]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "transformed",
                    "description": "The array created as a result of invoking {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "right",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} passed as an argument to {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>right</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 191,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.pevery(function (el) {\n     return el % 2 === 1;\n   }); // val.v is true.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.push(2); // val.v authomatically should become false.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 268,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.psome(function (el) {\n     return el % 2 === 0;\n   }); // val.v is false.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.push(2); // val.v authomatically should become true\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 345,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.filter(function (el) {\n     return el % 2 === 0;\n   }); // b is []\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we unshift something to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.unshift(4); // b authomatically should become [4]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>filtered</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "filtered",
                    "description": "The array created as a result of invoking {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>filtered</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 457,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.map(function (el) {\n     return el * el;\n   }); // b is [1, 9, 25]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we pop from <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.pop(); // b authomatically should become [1, 9]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>mapped</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "mapped",
                    "description": "The array created as a result of invoking {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>mapped</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 556,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.preduce(function (pel, el) {\n     return pel + el;\n   }, 0); // val.v is 0 + 1 + 3 + 5 = 9.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we shift from <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.shift(); // val.v authomatically should become 0 + 3 + 5 = 8.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 613,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.preduceRight(function (pel, el) {\n     return pel + el;\n   }, 0); // val.v is 0 + 5 + 3 + 1 = 9.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we splice <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.splice(1, 2, 4, 5); // val.v authomatically should become 0 + 5 + 4 + 1 = 10.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 669,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.pindexOf(5); // val.v is 2.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we reverse <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.reverse(); // val.v authomatically should become 0.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 775,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([5, 4, 5, 3]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.plastIndexOf(5); // val.v is 2.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we sort <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.sort(); // val.v authomatically should become 3.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The result of invoking {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Property"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/arrays/listeners.js",
            "line": 854,
            "description": "Generates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.slice(1); // b is [3, 5]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we push to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.push(32); // b authomatically should become [3, 5, 32]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>sliced</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "sliced",
                    "description": "The array created as a result of invoking {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "original",
                    "description": "The {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} was invoked.",
                    "type": "ProAct.Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed to {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}}, when it was invoked on the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A listener for events from the <i>original</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, updating the <i>sliced</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on\n     every new event, if it is necessary.",
                "type": "Function"
            },
            "class": "ProAct.Array.Listeners",
            "module": "proact-arrays",
            "namespace": "ProAct.Array"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 28,
            "description": "Can generate a simple operation definition.\n<p>\n It is used for defining all the simple operations, like <i>map</i> or <i>filter</i>.\n</p>",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the operation to define.",
                    "type": "String"
                },
                {
                    "name": "sym",
                    "description": "The symbol of the operation that shoul dbe used to identify it from within a DSL string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<ol>\n       <li><b>sym</b> - The symbol used to identify the operation in a DSL string or object.</li>\n       <li><b>match method</b> - A method using the <i>sym</i> for identifying the operation in a DSL string.</li>\n       <li>\n         <b>toOptions</b> - A method which is able to turn a DSL string with the operation,\n         into the actual array of options containing all the functions to be executed by the DSL and their arguments.\n         <p>\n           This method is able to fetch predefined operation functions.\n         </p>\n       </li>\n       <li>\n         <b>action</b> - The operation logic.\n         The options object of the above method should be passed to it, as well as the targed on which the DSL should be run.\n         <p>\n           It just calls method named as the passed <i>name</i> parameter on the targed <i>object</i>, passing it as arguments,\n           the argument array generated from the <i>toOptions</i> method.\n         </p>\n       </li>\n     </ol>",
                "type": "Object"
            },
            "class": "ProAct.OpStore.all",
            "module": "proact-dsl",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 179,
            "description": "A separator which can be used to separate multiple DSL expressions in one string.",
            "type": "String",
            "itemtype": "property",
            "name": "separator",
            "final": 1,
            "class": "ProAct.DSL",
            "module": "proact-dsl",
            "namespace": "ProAct"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 207,
            "description": "DSL operation for defining sources of {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s.\n<p>\n For example\n <pre>\n   '<<(s:bla)'\n </pre>\n means that the source of the targed of the DSL should be a stream stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} by the key 'bla'.\n</p>\n<p>\n or\n <pre>\n   '<<($1)'\n </pre>\n means that the source of the targed of the DSL should be an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} passed to the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}}\n method as the first argument after the targed object, the DSL data and the registry.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "into",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 232,
            "description": "DSL operation for setting the targed of the DSL as sources of another {{#crossLink \"ProAct.Actor\"}}{{/crossLink}}s.\n<p>\n For example\n <pre>\n   '>>(s:bla)'\n </pre>\n means that the targed of the DSL should become a source for a stream stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} by the key 'bla'.\n</p>\n<p>\n or\n <pre>\n   '>>($1)'\n </pre>\n means that the targed of the DSL should become a source for an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} passed to the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}}\n method as the first argument after the targed object, the DSL data and the registry.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "out",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 257,
            "description": "DSL operation for attaching listener to the target {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n<p>\n For example\n <pre>\n   '@(f:bla)'\n </pre>\n means that listener function, stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} as 'bla'\n should be attached as a listener to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "on",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 275,
            "description": "DSL operation for adding mapping to the target {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n<p>\n For example\n <pre>\n   'map(f:bla)'\n </pre>\n means that mapping function, stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} as 'bla'\n should be mapped to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n</p>\n<p>\n or\n <pre>\n   'map($2)'\n </pre>\n means that mapping function passed to the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}}\n method as the second argument after the targed object, the DSL data and the registry\n should be mapped to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "mapping",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 302,
            "description": "DSL operation for adding filters to the target {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n<p>\n For example\n <pre>\n   'filter(f:bla)'\n </pre>\n means that filtering function, stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} as 'bla'\n should be add as filter to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n</p>\n<p>\n or\n <pre>\n   'filter($1)'\n </pre>\n means that filtering function passed to the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}}\n method as the first argument after the targed object, the DSL data and the registry\n should be added as filter to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "filtering",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 329,
            "description": "DSL operation for adding accumulation to the target {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL.\n<p>\n For example\n <pre>\n   'acc($1, f:bla)'\n </pre>\n means that accumulating function, stored in the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} as 'bla'\n should be added as accumulation to the targed {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} of the DSL,\n and the first argument passed to {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}} after the targed object, the DSL data and the registry should\n be used as initial value for the accumulation.\n</p>",
            "final": 1,
            "itemtype": "property",
            "name": "accumulation",
            "type": "Object",
            "class": "ProAct.DSL.ops",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 368,
            "description": "Mapping operation for changing the sign of a number to the oposite.\n<p>\n For example 4 becomes -4 and -5 becomes 5.\n</p>\n<p>\n Usage in a DSL expression:\n <pre>\n   map(-)\n </pre>\n</p>",
            "final": 1,
            "static": 1,
            "itemtype": "method",
            "name": "-",
            "params": [
                {
                    "name": "n",
                    "description": "The number which will have its sign inverted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The same number as `n`, but with opposite sign.",
                "type": "Number"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 391,
            "description": "Mapping operation for computing the square of a number.\n<p>\n For example 4 becomes 16.\n</p>\n<p>\n Usage in a DSL expression:\n <pre>\n   map(pow)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "n",
                    "description": "The number to power.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The square of `n`.",
                "type": "Number"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 413,
            "description": "Mapping operation for computing the square root of a number.\n<p>\n For example 4 becomes 2.\n</p>\n<p>\n Usage in a DSL expression:\n <pre>\n   map(sqrt)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "n",
                    "description": "The number to compute the square root for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The square root of `n`.",
                "type": "Number"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 435,
            "description": "Mapping operation for turning an string to a decimal Number - integer.\n<p>\n For example '4' becomes 4.\n</p>\n<p>\n Usage in a DSL expression:\n <pre>\n   map(int)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "str",
                    "description": "The string to convert to integer.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The integer representation of `str`.",
                "type": "Number"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 457,
            "description": "Mapping operation for calling a method of an object.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(&.&go)\n </pre>\n This will call the 'target.go' method and use its result.\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "&.",
            "params": [
                {
                    "name": "methodName",
                    "description": "The method name to call.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The result of the method call.",
                "type": "Object"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 488,
            "description": "Mapping operation for turning value in an\nProAct.Array pop event.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(pop)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "Pop event.",
                "type": "Event"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 508,
            "description": "Mapping operation for turning value in an\nProAct.Array shift event.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(shift)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "Shift event.",
                "type": "Event"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 528,
            "description": "Mapping operation for turning value event in its value.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(eventToVal)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "eventToVal",
            "params": [
                {
                    "name": "event",
                    "description": "The value event to get the new value from.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "The value.",
                "type": "Object"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 549,
            "description": "Maps anything to the constant true.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(true)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "true",
            "params": [
                {
                    "name": "value",
                    "description": "Arbitrary value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Just the `true` constant.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 570,
            "description": "Toggles a boolean value. If the value is `true` it becomes `false` and vice versa.\n<p>\n Usage in a DSL expression:\n <pre>\n   map(!)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "!",
            "params": [
                {
                    "name": "value",
                    "description": "A boolean value.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The opposite of `value`.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 591,
            "description": "Adds the current time to the object value, called upon\nIf the value is not an object (for example it is a Number), it is returned as it is.\n\n<p>\n Usage in a DSL expression:\n <pre>\n   map(time)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "time",
            "params": [
                {
                    "name": "value",
                    "description": "The object to modify with time.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified value.",
                "type": "Object"
            },
            "class": "ProAct.DSL.predefined.mapping",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 627,
            "description": "Filtering operation for filtering only odd Numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(odd)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "odd",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check if it is odd.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if the number is odd.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 646,
            "description": "Filtering operation for filtering only even Numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(even)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "even",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check if it is even.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if the number is even.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 665,
            "description": "Filtering operation for filtering only positive Numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(+)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "+",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check if it is positive.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if the number is positive or zero.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 684,
            "description": "Filtering operation for filtering only negative Numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(-)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "-",
            "params": [
                {
                    "name": "n",
                    "description": "The number to check if it is negative.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True, if the number is negative or zero.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 703,
            "description": "Flitering operation for using a method of an object as a filter.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(&.&boolFunc)\n </pre>\n This will call the 'target.boolFunc' method and use its result as a filter.\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "&.",
            "params": [
                {
                    "name": "methodName",
                    "description": "The name of the method to use for filtering.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The result of the method call.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 739,
            "description": "Filtering operation for filtering only values different from undefined.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(defined)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "defined",
            "params": [
                {
                    "name": "event",
                    "description": "The value event to check if its value is defined.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "True if the value in the event is not `undefined`.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 760,
            "description": "Filtering operation for filtering only events\nthat have null/undefined as a source.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(originalEvent)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "originalEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The value event to check if it has a source or not.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "True if the `event` passed has no source.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 782,
            "description": "Filtering operation for passing everything.\n<p>\n Usage in a DSL expression:\n <pre>\n   filter(all)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "all",
            "params": [
                {
                    "name": "val",
                    "description": "Anything.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True.",
                "type": "Boolean"
            },
            "class": "ProAct.DSL.predefined.filtering",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 813,
            "description": "Accumulation operation representing a sum of numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   acc(+)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "property",
            "name": "+",
            "type": "Array",
            "class": "ProAct.DSL.predefined.accumulation",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 829,
            "description": "Accumulation operation representing a product of numbers.\n<p>\n Usage in a DSL expression:\n <pre>\n   acc(*)\n </pre>\n</p>",
            "static": 1,
            "constant": "",
            "itemtype": "property",
            "name": "*",
            "type": "Array",
            "class": "ProAct.DSL.predefined.accumulation",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 846,
            "description": "Accumulation operation representing string concatenation.\n<p>\n Usage in a DSL expression:\n <pre>\n   acc(+str)\n </pre>\n</p>",
            "static": 1,
            "itemtype": "property",
            "name": "+str",
            "type": "Array",
            "class": "ProAct.DSL.predefined.accumulation",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL.predefined"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 864,
            "description": "Defines a new predefined function to be reused in the DSL.\n\nFor example:\n```\n  ProAct.DSL.defPredefined('filter', 'enter', function (event) {\n   return event.keyCode === 13;\n  });\n\n```\ncreates a new `filtering` function, which can be used like this:\n```\n  actor2 = actor1.filter('enter');\n```\nthe `actor2` in this case will recieve only the events with keyCode of `13`.",
            "static": 1,
            "itemtype": "method",
            "name": "defPredefined",
            "params": [
                {
                    "name": "type",
                    "description": "One of the three -> `mapping`, `filtering` and `accumulation` types.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "The identificator of the predefined function to be passed to trasfromation or filtering operations.",
                    "type": "String"
                },
                {
                    "name": "operation",
                    "description": "The implementation of the operation.",
                    "type": "Function|Array"
                }
            ],
            "class": "ProAct.DSL",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 904,
            "description": "Extracts DSL actions and options from a string.\n<p>\n Splits the passed <i>optionString</i> using {{#crossLink \"ProAct.DSL/separator:property\"}}{{/crossLink}} as saparator\n and calls {{#crossLink \"ProAct.DSL/optionsFromArray:method\"}}{{/crossLink}} on the result.\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "optionsFromString",
            "params": [
                {
                    "name": "optionString",
                    "description": "The string to use to extract options from.",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Parameters for the extracted actions/functions/operations.\n     <p>\n       For example if the string contains 'map($1)', the first argument passed after the <i>optionString</i> argument\n       is passed to the 'map' operation.\n     </p>",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object containing operations as fields and options(arguments) for these operations as values.\n     <p>\n       'map($1)|filter(+)|@($2)' becomes:\n       <pre>\n         {\n           mapping: {first-argument-to-this-function-after-the-optionString-arg},\n           filtering: ProAct.DSL.predefined.filtering['+'],\n           on: {second-argument-to-this-function-after-the-optionString-arg}\n         }\n       </pre>\n     </p>",
                "type": "Object"
            },
            "class": "ProAct.DSL",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 939,
            "description": "Extracts DSL actions and options from an array of strings.\n<p>\n Example <i>optionArray</i> is ['map($1)', 'filter(+)', @($2)'] and it will become options object of functions and arguments to\n be applied on a target {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} passed to the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}} method.\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "optionsFromArray",
            "params": [
                {
                    "name": "optionArray",
                    "description": "The array of strings to use to extract options from.",
                    "type": "Array"
                },
                {
                    "name": "...",
                    "description": "Parameters for the extracted actions/functions/operations.\n     <p>\n       For example if the array contains 'map($1)', the first argument passed after the <i>optionArray</i> argument\n       is passed to the 'map' operation.\n     </p>",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object containing operations as fields and options(arguments) for these operations as values.\n     <p>\n       ['map($1)', 'filter(+)', @($2)'] becomes:\n       <pre>\n         {\n           mapping: {first-argument-to-this-function-after-the-optionString-arg},\n           filtering: ProAct.DSL.predefined.filtering['+'],\n           on: {second-argument-to-this-function-after-the-optionString-arg}\n         }\n       </pre>\n     </p>",
                "type": "Object"
            },
            "class": "ProAct.DSL",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/dsl.js",
            "line": 986,
            "description": "Configures an {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} using the DSL passed with the <i>options</i> argument.\n<p>\n Uses the passed {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} to read stored values from.\n</p>",
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "actor",
                    "description": "The target of the DSL operations.",
                    "type": "ProAct.Actor"
                },
                {
                    "name": "options",
                    "description": "The DSL formatted options to be used for the configuration.\n     <p>\n       If the value of this parameter is instance of {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} it is set as a source to the <i>target actor</i>.\n     </p>\n     <p>\n       If the value ot this parameter is String - {{#crossLink \"ProAct.DSL/optionsFromString:method\"}}{{/crossLink}} is used to be turned to an options object.\n     </p>\n     <p>\n       If the values of this parameter is object, it is used to configure the <i>targed actor</i>.\n     </p>\n     <p>\n       The format of the object should be something like:\n       <pre>\n         {\n           dsl-operation: function|array-of-functions-and-arguments,\n           dsl-operation: function|array-of-functions-and-arguments,\n           dsl-operation: function|array-of-functions-and-arguments,\n           ...\n         }\n       </pre>\n     </p>",
                    "type": "ProAct.Actor|String|Object"
                },
                {
                    "name": "registry",
                    "description": "The registry to read stored values for the DSL operations.\n     <p>\n       For example if there is 'map(f:foo)', the mapping function is read from the registry at the key 'foo'.\n     </p>",
                    "type": "ProAct.Registry"
                },
                {
                    "name": "...",
                    "description": "Parameters for the DSL operations.\n     <p>\n       For example if the array contains 'map($1)', the first argument passed after the <i>actor</i>, <i>options</i> and <i>registry</i> arguments\n       is passed to the 'map' operation.\n     </p>",
                    "optional": true
                }
            ],
            "return": {
                "description": "The configured actor.",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.DSL",
            "module": "proact-dsl",
            "namespace": "ProAct.DSL"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 87,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Registry.Provider",
            "final": 1,
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 97,
            "description": "Creates and stores an instance of the object this `ProAct.Registry.Provider` manages.\n<p>\n For the creation is used the {{#crossLink \"ProAct.Registry.Provider/provide:method\"}}{{/crossLink}} method.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "make",
            "params": [
                {
                    "name": "key",
                    "description": "The key on which the new instance will be stored.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Array containing options for the creation process. For example the exact sub-type of the object to create (optional).",
                    "type": "Array"
                },
                {
                    "name": "...",
                    "description": "Parameters passed to the constructor when the new instance is created.",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created and stored object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 121,
            "description": "Stores an instance of an object this `ProAct.Registry.Provider` manages.",
            "instance": "",
            "itemtype": "method",
            "name": "store",
            "params": [
                {
                    "name": "key",
                    "description": "The key on which the <i>object</i> will be stored.",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to store.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The stored object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 136,
            "description": "Reads a stored instance.",
            "instance": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to read.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object corresponding to the passed <i>key</i> or undefined if there is no such object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 149,
            "description": "Deletes a stored instance.",
            "instance": "",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "The key to delete.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object corresponding to the passed <i>key</i> or undefined if there is no such object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 166,
            "description": "A callback called by the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} when <i>this</i> `ProAct.Registry.Provider` is registered.",
            "instance": "",
            "access": "protected",
            "tagname": "",
            "abstract": "",
            "itemtype": "method",
            "name": "registered",
            "params": [
                {
                    "name": "registery",
                    "description": "The registry in which <i>this</i> is being registered.",
                    "type": "ProAct.Registry"
                }
            ],
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 191,
            "description": "Defines default construction logic for the managed object.\n<p>\n For example if we have a `FooProvider`, this method will be something like:\n <pre>\n   return new Foo();\n </pre>\n</p>\n<p>\n It is abstract and must be overridden by the extenders, or an Error will be thrown.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "abstract": "",
            "itemtype": "method",
            "name": "basic",
            "return": {
                "description": "An isntance of the managed class of objects.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.Provider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 214,
            "description": "Provides a new instance of the managed by <i>this</i> `ProAct.Registry.Provider` object.",
            "instance": "",
            "itemtype": "method",
            "name": "provide",
            "params": [
                {
                    "name": "options",
                    "description": "An array containing the key of the object to create and store.\n     It may contain data to pass to the constructor of the object.",
                    "type": "Array"
                },
                {
                    "name": "...",
                    "description": "Arguments that should be passed to the constructor.",
                    "optional": true
                }
            ],
            "return": {
                "description": "An isntance of the managed class of objects.",
                "type": "Object"
            },
            "class": "ProAct.Registry.Provider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.Provider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 253,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Registry.StreamProvider",
            "final": 1,
            "class": "ProAct.Registry.StreamProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 263,
            "description": "A callback called by the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}}\nwhen <i>this</i> `ProAct.Registry.StreamProvider` is registered.\n<p>\n It adds the methods <i>s</i> and <i>stream</i> to the\n {{#crossLink \"ProAct.Registry\"}}{{/crossLink}}, which are aliases\n of <i>this</i>' {{#crossLink \"ProAct.Registry.StreamProvider/get:method\"}}{{/crossLink}} method.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "registered",
            "params": [
                {
                    "name": "registry",
                    "description": "The registry in which <i>this</i> is being registered.",
                    "type": "ProAct.Registry"
                }
            ],
            "class": "ProAct.Registry.StreamProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 294,
            "description": "Constructs a simple {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.Stream();\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "basic",
            "return": {
                "description": "An isntance of {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}.",
                "type": "ProAct.Stream"
            },
            "class": "ProAct.Registry.StreamProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 311,
            "description": "Constructs a {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.DelayedStream(delay);\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "delayed",
            "params": [
                {
                    "name": "args",
                    "description": "An array of arguments - the first element of which is the <i>delay</i> of the stream to construct.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An isntance of {{#crossLink \"ProAct.DelayedStream\"}}{{/crossLink}}.",
                "type": "ProAct.DelayedStream"
            },
            "class": "ProAct.Registry.StreamProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 333,
            "description": "Constructs a {{#crossLink \"ProAct.SizeBufferedStream\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.SizeBufferedStream(size);\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "args",
                    "description": "An array of arguments - the first element of which is the <i>size</i> of the stream to construct.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An isntance of {{#crossLink \"ProAct.SizeBufferedStream\"}}{{/crossLink}}.",
                "type": "ProAct.SizeBufferedStream"
            },
            "class": "ProAct.Registry.StreamProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 355,
            "description": "Constructs a {{#crossLink \"ProAct.DebouncingStream\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.DebouncingStream(delay);\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "debouncing",
            "params": [
                {
                    "name": "args",
                    "description": "An array of arguments - the first element of which is the <i>delay</i> of the stream to construct.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An isntance of {{#crossLink \"ProAct.DebouncingStream\"}}{{/crossLink}}.",
                "type": "ProAct.DebouncingStream"
            },
            "class": "ProAct.Registry.StreamProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 377,
            "description": "Constructs a {{#crossLink \"ProAct.ThrottlingStream\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.ThrottlingStream(delay);\n </pre>\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "throttling",
            "params": [
                {
                    "name": "args",
                    "description": "An array of arguments - the first element of which is the <i>delay</i> of the stream to construct.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An isntance of {{#crossLink \"ProAct.ThrottlingStream\"}}{{/crossLink}}.",
                "type": "ProAct.ThrottlingStream"
            },
            "class": "ProAct.Registry.StreamProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 431,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Registry.FunctionProvider",
            "final": 1,
            "class": "ProAct.Registry.FunctionProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 448,
            "description": "Reads a stored instance.\n<p>\n If stored instance is not found and the key is in the form:\n actions(arg) - it is searched in the predefined lambdas, for example:\n <pre>\n   map(+)\n </pre>\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to read.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object corresponding to the passed <i>key</i> or\n     predefined lambda or undefined if there is no such object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.FunctionProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 500,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Registry.ProObjectProvider",
            "final": 1,
            "class": "ProAct.Registry.ProObjectProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 510,
            "description": "A callback called by the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}}\nwhen <i>this</i> `ProAct.Registry.ProObjectProvider` is registered.\n<p>\n It adds the methods <i>po</i> and <i>proObject</i> to the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}},\n which are aliases of <i>this</i>' {{#crossLink \"ProAct.Registry.ProObjectProvider/get:method\"}}{{/crossLink}} method.\n</p>\n<p>\n It adds the method <i>prob</i> to the {{#crossLink \"ProAct.Registry\"}}{{/crossLink}},\n which is alias of <i>this</i>' {{#crossLink \"ProAct.Registry.ProObjectProvider/make:method\"}}{{/crossLink}} method.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "registered",
            "params": [
                {
                    "name": "registery",
                    "description": "The registry in which <i>this</i> is being registered.",
                    "type": "ProAct.Registry"
                }
            ],
            "class": "ProAct.Registry.StreamProvider",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.StreamProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 551,
            "description": "Constructs a ProAct.js reactive object from original one, using {{#crossLink \"ProAct/prob:method\"}}{{/crossLink}}\n<p>\n <pre>\n   return new ProAct.prob(value, meta);\n </pre>\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "basic",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "Array containing options for the creation process.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The object/value to make reactive.",
                    "type": "Object"
                },
                {
                    "name": "meta",
                    "description": "Meta-data used to help in the reactive object creation.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "A ractive object.",
                "type": "Object"
            },
            "class": "ProAct.Registry.ProObjectProvider.types",
            "module": "proact-dsl",
            "namespace": "ProAct.Registry.ProObjectProvider"
        },
        {
            "file": "src/js/dsl/provider.js",
            "line": 582,
            "description": "The {{#crossLink \"ProAct.Registry\"}}{{/crossLink}} instance used by ProAct's by default.\n<p>\n It has a {{#crossLink \"ProAct.Registry.StreamProvider\"}}{{/crossLink}} registered on the <i>s</i> namespace.\n</p>\n<p>\n It has a {{#crossLink \"ProAct.Registry.ProObjectProvider\"}}{{/crossLink}} registered on the <i>po</i> and <i>obj</i> namespaces.\n</p>\n<p>\n It has a {{#crossLink \"ProAct.Registry.FunctionProvider\"}}{{/crossLink}} registered on the <i>f</i> and <i>l</i> namespaces.\n</p>\n<p>\n Override this instance or register your own providers in it to extend the ProAct.js DSL.\n</p>",
            "itemtype": "property",
            "name": "registry",
            "type": "ProAct.Registry",
            "static": 1,
            "class": "ProAct",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 28,
            "description": "Reference to the constructor of this object.",
            "itemtype": "property",
            "name": "constructor",
            "type": "ProAct.Registry",
            "final": 1,
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 38,
            "description": "Registers a {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} for the passed <i>namespace</i> in the registry.",
            "instance": "",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "namespace",
                    "description": "The namespace to register the <i>provider</i> in.",
                    "type": "String"
                },
                {
                    "name": "provider",
                    "description": "The {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} to register.",
                    "type": "ProAct.Registry.Provider"
                }
            ],
            "return": {
                "description": "<i>this</i>",
                "type": "ProAct.Registers"
            },
            "throws": {
                "description": "If a {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} is already registered for the passed <i>namespace</i>.",
                "type": "Error"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 64,
            "description": "Retrieves the right {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} using the <i>name</i> of stored\nin <i>this</i> ProAct.Registry object, or the <i>name</i> of an object to be stored",
            "instance": "",
            "itemtype": "method",
            "name": "getProviderByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of storable object.\n     <p>\n       It must be in the format '{namespace}:{key}'.\n     </p>\n     <p>\n       Here the namespace is the namespace the {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} manages.\n     </p>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The first element in the result is the {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} or undefined if not found.\n     <p>\n       The second one is the <b>key</b> at which an object is stored or will be stored in the provider.\n     </p>\n     <p>\n       The third element is an array with options for storing/creating an object passed to the provider using\n       the <i>name</i> string.\n     </p>",
                "type": "Array"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 95,
            "description": "Configures an object to be stored using {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} passed through <i>options</i> and DSL arguments.\n<p>\n Example usage:\n</p>\n<p>\n A {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} is passed to the registry for setup with DSL data.\n</p>\n<p>\n The data passed through the <i>options</i> parameter is\n <pre>\n   '<<(s:foo)|map(-)|filter($1)'\n </pre>\n</p>\n<p>\n And the arguments for the DSL machine passed through the <i>args</i> parameter are\n <pre>\n   [function (v) {\n     return v % 2 === 0;\n   }]\n </pre>\n</p>\n<p>\n This means that a {{#crossLink \"ProAct.Stream\"}}{{/crossLink}} stored in <i>this</i> registry by the key 'foo' should be set\n as a source to the passed as the <i>object</i> parameter simple {{#crossLink \"ProAct.Stream\"}}{{/crossLink}}.\n</p>\n<p>\n It also means that for every value comming in the <i>object</i> parameter's stream there should be mapping of negativity and\n only even values should be passed to it.\n</p>\n<p>\n So if we trigger in the 'foo' stream the value of <b>4</b> in our stream we will get <b>-4</b>, and if we trigger 5, we won't get anything.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "object",
                    "description": "The object to setup.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} data object or string used to setup the object.",
                    "type": "String|Object"
                },
                {
                    "name": "args",
                    "description": "Arguments to be used by the {{#crossLink \"ProAct.DSL/run:method\"}}{{/crossLink}} method while configuring the passed <i>object</i>.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Ready to strore object.",
                "type": "Object"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 145,
            "description": "Creates a new object and stores it in <i>this</i> registry, using the right provider for the creation\nand configuring it using the DSL passed through the <i>options</i> parameter.\n<p>\n {{#crossLink \"ProAct.Registry/getProviderByName:method\"}}{{/crossLink}} is used to locate the right provider to create the object with.\n</p>\n<p>\n {{#crossLink \"ProAct.Registry/setup:method\"}}{{/crossLink}} is used to setup the newly created object using the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}}\n</p>\n<p>\n The idea of this method is to create and configure {{#crossLink \"ProAct.Actor\"}}{{/crossLink}} objects.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "make",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the object to create and store.\n     <p>\n       It must be in the format '{namespace}:{key}'\n     </p>",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "A {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} data object or string used to setup the object to be created.",
                    "type": "String|Object"
                },
                {
                    "name": "...",
                    "description": "<b>Arguments</b> to be used by the }{{/crossLink}} method while configuring the newly created <i>object</i>.",
                    "type": "{#crossLink \"ProAct.DSL/run:method\"",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created, stored and configured object, or null if there was no {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} register for its type.",
                "type": "Object"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 185,
            "description": "Stores an object  in <i>this</i> registry, using the right provider to configure it using the DSL passed through the <i>options</i> parameter.\n<p>\n {{#crossLink \"ProAct.Registry/getProviderByName:method\"}}{{/crossLink}} is used to locate the right provider to store the object to.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "store",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the object to store.\n     <p>\n       It must be in the format '{namespace}:{key}'\n     </p>",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "The object to store.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} data object or string used to setup the object to be stored (optional).",
                    "type": "String|Object"
                },
                {
                    "name": "...",
                    "description": "<b>Arguments</b> to be used by the }{{/crossLink}} method while configuring the <i>object</i>.",
                    "type": "{#crossLink \"ProAct.DSL/run:method\"",
                    "optional": true
                }
            ],
            "return": {
                "description": "The stored and configured object, or null if there was no {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} register for its type.",
                "type": "Object"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 218,
            "description": "Retrieves an object, stored <i>this</i> registry.\n<p>\n {{#crossLink \"ProAct.Registry/getProviderByName:method\"}}{{/crossLink}} is used to locate the right provider to retrieve the object from.\n</p>",
            "instance": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the object to find.\n     <p>\n       It must be in the format '{namespace}:{key}'\n     </p>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object, or null if there was no {{#crossLink \"ProAct.Registry.Provider\"}}{{/crossLink}} register for its type or no object registered for the passed <i>name</i>.",
                "type": "Object"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 244,
            "description": "Helper method for transforming an array of keys of stored items in <i>this</i> `ProAct.Registry` to an array of the actual items.\n<p>\n Mainly used by the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} logic.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "toObjectArray",
            "params": [
                {
                    "name": "array",
                    "description": "Array of string keys to objects stored in <i>this</i> registry to be retrieved using {{#crossLink \"ProAct.Registry/toObject:method\"}}{{/crossLink}}.\n     <p>\n       If object is not stored on some key, the key itself is returned in the same possition in the result array.\n     </p>",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Of the retrieved objects, in the same order as the keys.",
                "type": "Array"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 272,
            "description": "Helper method for transforming a key of stored item in <i>this</i> `ProAct.Registry` to the actual item or returning the key, if\nthe item is not found in the `ProAct.Registry`.\n<p>\n Mainly used by the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}} logic.\n</p>",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "toObject",
            "params": [
                {
                    "name": "data",
                    "description": "Key of strored object or something else. If the key is valid and there is something stored on it, the stored object is retrieved.\n     <p>\n       If there is nothing stored for this <i>data</i>, the <i>data</i> itself is returned.\n     </p>",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "Stored object, if found using the passed <i>data</i> or the <i>data</i> itself.",
                "type": "Object"
            },
            "class": "ProAct.Registry",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 303,
            "description": "Adds a new <i>transformation</i> to the list of transformations\nof <i>this actor</i>.\n\n<p>\n A transformation is a function or an object that has a <i>call</i> method defined.\n This function or call method should have one argument and to return a transformed version of it.\n If the returned value is {{#crossLink \"ProAct.Actor/BadValue:property\"}}{{/crossLink}}, the next transformations are skipped and the updating\n value/event becomes - bad value.\n</p>\n\n<p>\n Every value/event that updates <i>this actor</i> will be transformed using the new transformation.\n</p>\n\nThis method uses {{#crossLink \"ProAct.Actor/transform:method\"}}{{/crossLink}}, but can read transformation\nfuntion/object stored in the registry (if the proact-dsl module is present) by it's string name.",
            "instance": "",
            "itemtype": "method",
            "name": "transformStored",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "transformation",
                    "description": "The transformation to add. Can be string - to be retrieved by name.",
                    "type": "Object|String"
                },
                {
                    "name": "type",
                    "description": "The type of the transformation, for example `mapping`.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "<b>this</b>",
                "type": "ProAct.Actor"
            },
            "class": "ProAct.Actor",
            "module": "proact-dsl"
        },
        {
            "file": "src/js/dsl/registry.js",
            "line": 351,
            "description": "Applies meta information and actions on already created property.\n\nThis method is called by the {{#crossLink \"ProAct.ObjectCore/makeProp:method\"}}{{/crossLink}} one,\nother modules can inject logic by overriding it.\n\nThe meta is in format of the {{#crossLink \"ProAct.DSL\"}}{{/crossLink}}.",
            "access": "protected",
            "tagname": "",
            "instance": "",
            "itemtype": "method",
            "name": "applyMeta",
            "params": [
                {
                    "name": "meta",
                    "description": "Meta information for the property to modify with.",
                    "type": "String|Array"
                },
                {
                    "name": "property",
                    "description": "The property to update.",
                    "type": "ProAct.Property"
                }
            ],
            "class": "ProAct.ObjectCore",
            "module": "proact-dsl"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:80"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:115"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:131"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:151"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:203"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:216"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:228"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:277"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:290"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:301"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/flow.js:348"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queue.js:123"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queue.js:136"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queue.js:149"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queue.js:185"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queue.js:239"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queues.js:69"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queues.js:96"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queues.js:145"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/flow/queues.js:198"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:133"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:157"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:170"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:188"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:217"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:232"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:254"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:254"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:268"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:303"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:331"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:348"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:348"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:370"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:370"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:392"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:392"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:414"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:437"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:498"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:581"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:600"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:617"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:636"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:653"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:670"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:687"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:736"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:767"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:796"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:827"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:848"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:876"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:908"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:908"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:939"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:939"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:970"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/actor.js:970"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/actor.js:1002"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:57"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:75"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:115"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/core.js:115"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/core.js:131"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/functions.js:32"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/functions.js:32"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/core/functions.js:52"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/core/functions.js:52"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:144"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:161"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/auto_property.js:201"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:70"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:102"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:123"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:187"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_core.js:205"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_property.js:150"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/object_property.js:167"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:443"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:460"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:488"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:530"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:547"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:567"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:591"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:634"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:680"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:719"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:740"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property.js:763"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/properties/property_provider.js:178"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:178"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/properties/property_provider.js:207"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:207"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:272"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:292"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:349"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:368"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:425"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:444"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:501"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/property_provider.js:525"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/proxy_property.js:89"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/proxy_property.js:105"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/value_event.js:42"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/properties/value_event.js:61"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/streams/buffered_stream.js:5"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/buffered_stream.js:68"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/debouncing_stream.js:57"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/js/streams/debouncing_stream.js:89"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/debouncing_stream.js:89"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:72"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:96"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:117"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/delayed_stream.js:149"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/size_buffered_stream.js:76"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/size_buffered_stream.js:107"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:133"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:152"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:177"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:205"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:232"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:269"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:295"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:321"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:347"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:379"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:416"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:437"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:450"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:479"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:523"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:558"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:605"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:630"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:665"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:707"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:741"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:784"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/stream.js:822"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/subscribable_stream.js:64"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/subscribable_stream.js:110"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/throttling_stream.js:60"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/streams/throttling_stream.js:92"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:192"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:229"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:254"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:275"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:297"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:318"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:338"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:368"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:396"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:424"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:450"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:478"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:504"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:537"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:568"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:601"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:631"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:655"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:682"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:701"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:720"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:733"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:761"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:781"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:805"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:859"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:887"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:919"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:947"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:979"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:1008"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array.js:1024"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:48"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:78"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:120"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:210"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:237"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:256"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:294"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:325"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:359"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:386"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_core.js:444"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_property.js:147"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_property.js:164"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_property.js:210"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/arrays/array_property.js:229"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/js/dsl/dsl.js:829"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:97"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:121"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:136"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:149"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:166"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/dsl/provider.js:166"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:191"
        },
        {
            "message": "unknown tag: abstract",
            "line": " src/js/dsl/provider.js:191"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:214"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:263"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:294"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:311"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:333"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:355"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:377"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:448"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:510"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/provider.js:551"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:38"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:64"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:95"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:145"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:185"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:218"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:244"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:272"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:303"
        },
        {
            "message": "unknown tag: instance",
            "line": " src/js/dsl/registry.js:351"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events with ease.\n<p>\n NOTE: For now only works with arrays, because creating array events required a lot of code.\n</p>",
            "line": " src/js/core/event.js:34"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events of type {{#crossLink \"ProAct.Event.Types/array:property\"}}{{/crossLink}} with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nTODO Move to the proact-arrays package!",
            "line": " src/js/core/event.js:61"
        },
        {
            "message": "Missing item type\nFactory method for creating of new ProAct.Events without target and source with ease.\n<p>\n NOTE: For now only array modifying events can be created - remove and splice (you can trigger a value for add).\n</p>\n\nUsing this method we can create for example an event for removing the i-th element from ProAct.Array like this:\n<pre>\n ProAct.Event.simple('array', 'del', el, array);\n</pre>\nThis event can be passed to the ProAct.ArrayCore#update method of the core of a ProAct.Array and it will delete\nthe element in it.\n\nTODO Some of these types and comments should be undepended of the proact-arrays module.",
            "line": " src/js/core/event.js:99"
        },
        {
            "message": "Missing item type\nProvides a reactive representation of passed simple data.",
            "line": " src/js/core/functions.js:94"
        },
        {
            "message": "Missing item type\nProvides a {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance using the list of the registered\n`ProAct.PropertyProviders`.\n<p>\n The providers are tried in the order of their registration\n (the order can be changed using {{#crossLink \"ProAct.PropertyProvider/prependProvider:method\"}}{{/crossLink}}).\n</p>\n<p>\n The {{#crossLink \"ProAct.PropertyProvider/filter:method\"}}{{/crossLink}} method is used to check\n if a provider is compliant with the passed arguments.\n</p>\n<p>\n If a compliant provider is found, its {{#crossLink \"ProAct.PropertyProvider/provide:method\"}}{{/crossLink}} method\n is used to provide the {{#crossLink \"ProAct.Property\"}}{{/crossLink}} instance.\n</p>",
            "line": " src/js/properties/property_provider.js:99"
        },
        {
            "message": "Missing item type\nA helper method for filtering an array and notifying the right listeners of the filtered result.\n<p>\n This is used if there is an `ProAct.Array` created by filtering another `ProAct.Array`.\n If the original is changed, the filtered array should be changed in some cases.\n So refilter does this - changes the dependent filtered array, using\n {{#crossLink \"ProAct.ArrayCore/updateByDiff:method\"}}{{/crossLink}}.\n</p>",
            "line": " src/js/arrays/array.js:153"
        },
        {
            "message": "Missing item type\n<p>\n Constructor for `ProAct.ArrayPropertyProvider`.\n</p>\n<p>\n Provides {{#crossLink \"ProAct.ArrayProperty\"}}{{/crossLink}} instances for fields pointing to arrays.\n</p>\n<p>\n `ProAct.ArrayPropertyProvider` is part of the proact-properties module of ProAct.js.\n</p>",
            "line": " src/js/arrays/array_property.js:179"
        },
        {
            "message": "Missing item type\nChecks the validity of an event.",
            "line": " src/js/arrays/listeners.js:14"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.concat(7, 9); // b is [1, 3, 5, 7, 9]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.push(11); // b authomatically should become [1, 3, 5, 11, 7, 9]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:30"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} is invoked with argument, another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}.\n<p>\n The result of the {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}},\n dependent on both the <i>original</i> and the passed as an argument one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/concat:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var x = new ProAct.Array(7, 9);\n   var b = a.concat(x); // b is [1, 3, 5, 7, 9]\n </pre>\n The new array - <b>b</b> is dependent on <b>x</b>, so if for example we push something to <b>x</b>, <b>b</b> should be updated:\n <pre>\n   x.push(13); // b authomatically should become [1, 3, 5, 7, 9, 13]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>transformed</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:116"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/pevery:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.pevery(function (el) {\n     return el % 2 === 1;\n   }); // val.v is true.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.push(2); // val.v authomatically should become false.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:191"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/psome:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.psome(function (el) {\n     return el % 2 === 0;\n   }); // val.v is false.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we push something to <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.push(2); // val.v authomatically should become true\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:268"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/filter:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.filter(function (el) {\n     return el % 2 === 0;\n   }); // b is []\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we unshift something to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.unshift(4); // b authomatically should become [4]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>filtered</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:345"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/map:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.map(function (el) {\n     return el * el;\n   }); // b is [1, 9, 25]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we pop from <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.pop(); // b authomatically should become [1, 9]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>mapped</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:457"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/preduce:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.preduce(function (pel, el) {\n     return pel + el;\n   }, 0); // val.v is 0 + 1 + 3 + 5 = 9.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we shift from <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.shift(); // val.v authomatically should become 0 + 3 + 5 = 8.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:556"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/preduceRight:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.preduceRight(function (pel, el) {\n     return pel + el;\n   }, 0); // val.v is 0 + 5 + 3 + 1 = 9.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we splice <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.splice(1, 2, 4, 5); // val.v authomatically should become 0 + 5 + 4 + 1 = 10.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:613"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/pindexOf:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.pindexOf(5); // val.v is 2.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we reverse <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.reverse(); // val.v authomatically should become 0.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:669"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} method is a {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, dependent on the <i>original</i> array.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([5, 4, 5, 3]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/plastIndexOf:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var val = a.plastIndexOf(5); // val.v is 2.\n </pre>\n The new value - <b>val</b> is dependent on <b>a</b>, so if for example we sort <b>a</b>, <b>val</b> should be updated:\n <pre>\n   a.sort(); // val.v authomatically should become 3.\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>val</i> {{#crossLink \"ProAct.Property\"}}{{/crossLink}}, when the <i>original</i> array changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:775"
        },
        {
            "message": "Missing item type\nGenerates a listener that can be attached to an {{#crossLink \"ProAct.Array\"}}{{/crossLink}} on which\nthe method {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} is invoked.\n<p>\n The result of the {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} method is another {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, dependent on the <i>original</i> one.\n</p>\n<p>\n For example if the original was:\n <pre>\n   var a = new ProAct.Array([1, 3, 5]);\n </pre>\n and we invoked {{#crossLink \"ProAct.Array/slice:method\"}}{{/crossLink}} on it like this:\n <pre>\n   var b = a.slice(1); // b is [3, 5]\n </pre>\n The new array - <b>b</b> is dependent on <b>a</b>, so if for example we push to <b>a</b>, <b>b</b> should be updated:\n <pre>\n   a.push(32); // b authomatically should become [3, 5, 32]\n </pre>\n</p>\n<p>\n The generated listener by this method does this - updates the <i>sliced</i> {{#crossLink \"ProAct.Array\"}}{{/crossLink}}, when the <i>original</i> changes\n and it does it in an optimal way.\n</p>",
            "line": " src/js/arrays/listeners.js:854"
        },
        {
            "message": "Missing item type\nCan generate a simple operation definition.\n<p>\n It is used for defining all the simple operations, like <i>map</i> or <i>filter</i>.\n</p>",
            "line": " src/js/dsl/dsl.js:28"
        }
    ]
}